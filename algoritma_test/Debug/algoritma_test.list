
algoritma_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800d378  0800d378  0000e378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d898  0800d898  0000f230  2**0
                  CONTENTS
  4 .ARM          00000008  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8a0  0800d8a0  0000f230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8a0  0800d8a0  0000e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8a4  0800d8a4  0000e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800d8a8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  20000230  0800dad8  0000f230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e28  0800dad8  0000fe28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be13  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000401b  00000000  00000000  0002b073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001318  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fe4  00000000  00000000  00031c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e37c  00000000  00000000  00057c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0340  00000000  00000000  00075f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001562c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f04  00000000  00000000  0015630c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d35c 	.word	0x0800d35c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0800d35c 	.word	0x0800d35c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bmp180_read>:

#include "bmp180_internals.h"
#include <math.h>

static void bmp180_read(bmp180_t *bmp180, uint8_t reg, uint8_t *buffer, uint8_t size)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	4613      	mov	r3, r2
 8001036:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(bmp180->hi2cx, BMP180_ADDRESS, reg, 1, buffer, size, HAL_MAX_DELAY);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	b29a      	uxth	r2, r3
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	9102      	str	r1, [sp, #8]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	21ee      	movs	r1, #238	@ 0xee
 8001054:	f001 fd04 	bl	8002a60 <HAL_I2C_Mem_Read>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <bmp180_write>:

static void bmp180_write(bmp180_t *bmp180, uint8_t reg, uint8_t *buffer, uint8_t size)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	461a      	mov	r2, r3
 800106c:	460b      	mov	r3, r1
 800106e:	72fb      	strb	r3, [r7, #11]
 8001070:	4613      	mov	r3, r2
 8001072:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(bmp180->hi2cx, BMP180_ADDRESS, reg, 1, buffer, size, HAL_MAX_DELAY);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	b29a      	uxth	r2, r3
 800107c:	7abb      	ldrb	r3, [r7, #10]
 800107e:	b29b      	uxth	r3, r3
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	9102      	str	r1, [sp, #8]
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	21ee      	movs	r1, #238	@ 0xee
 8001090:	f001 fbec 	bl	800286c <HAL_I2C_Mem_Write>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <bmp180_is_ready>:

static int bmp180_is_ready(bmp180_t *bmp180)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(bmp180->hi2cx, BMP180_ADDRESS, 1, HAL_MAX_DELAY);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	2201      	movs	r2, #1
 80010ae:	21ee      	movs	r1, #238	@ 0xee
 80010b0:	f001 ff08 	bl	8002ec4 <HAL_I2C_IsDeviceReady>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <bmp180_init>:
 * @returns 0 on success, 1 on sensor is not ready, 2 on sensor error.
 * @param hi2cx I2C handle.
 * @param bmp180 `bmp180_t` struct to initialize.
 * */
uint8_t bmp180_init(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	bmp180->hi2cx = hi2cx;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]

	// Check if device is ready
	if (bmp180_is_ready(bmp180))
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f7ff ffe3 	bl	800109c <bmp180_is_ready>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <bmp180_init+0x20>
		return 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0e8      	b.n	80012b2 <bmp180_init+0x1f2>

	uint8_t buffer[22];

	// Reset sensor
	buffer[0] = 0xB6;
 80010e0:	23b6      	movs	r3, #182	@ 0xb6
 80010e2:	733b      	strb	r3, [r7, #12]
	bmp180_write(bmp180, SOFT, &buffer[0], 1);
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	2301      	movs	r3, #1
 80010ea:	21e0      	movs	r1, #224	@ 0xe0
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f7ff ffb7 	bl	8001060 <bmp180_write>
	HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f000 ffc2 	bl	800207c <HAL_Delay>

	// Check if device ID is correct
	bmp180_read(bmp180, ID, &buffer[0], 1);
 80010f8:	f107 020c 	add.w	r2, r7, #12
 80010fc:	2301      	movs	r3, #1
 80010fe:	21d0      	movs	r1, #208	@ 0xd0
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f7ff ff8f 	bl	8001024 <bmp180_read>
	if (buffer[0] != 0x55) {
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	2b55      	cmp	r3, #85	@ 0x55
 800110a:	d001      	beq.n	8001110 <bmp180_init+0x50>
		return 2;
 800110c:	2302      	movs	r3, #2
 800110e:	e0d0      	b.n	80012b2 <bmp180_init+0x1f2>
	}

	// Get calibration data
	bmp180_read(bmp180, CALIB, buffer, 22);
 8001110:	f107 020c 	add.w	r2, r7, #12
 8001114:	2316      	movs	r3, #22
 8001116:	21aa      	movs	r1, #170	@ 0xaa
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f7ff ff83 	bl	8001024 <bmp180_read>

	// If any of the calibration data is 0x00 or 0xFF, sensor is damaged
	for (uint8_t i = 0; i < 22; i += 2) {
 800111e:	2300      	movs	r3, #0
 8001120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001124:	e01f      	b.n	8001166 <bmp180_init+0xa6>
		uint16_t combined_calibration_data = convert8bitto16bit(buffer[i], buffer[i + 1]);
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112a:	3328      	adds	r3, #40	@ 0x28
 800112c:	443b      	add	r3, r7
 800112e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800113a:	3301      	adds	r3, #1
 800113c:	3328      	adds	r3, #40	@ 0x28
 800113e:	443b      	add	r3, r7
 8001140:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21b      	sxth	r3, r3
 800114a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (combined_calibration_data == 0x00 || combined_calibration_data == 0XFF) {
 800114c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <bmp180_init+0x98>
 8001152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001154:	2bff      	cmp	r3, #255	@ 0xff
 8001156:	d101      	bne.n	800115c <bmp180_init+0x9c>
			return 2;
 8001158:	2302      	movs	r3, #2
 800115a:	e0aa      	b.n	80012b2 <bmp180_init+0x1f2>
	for (uint8_t i = 0; i < 22; i += 2) {
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001160:	3302      	adds	r3, #2
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116a:	2b15      	cmp	r3, #21
 800116c:	d9db      	bls.n	8001126 <bmp180_init+0x66>
		}
	}

	// Set hardware oversampling setting
	switch (bmp180->oversampling_setting) {
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7d1b      	ldrb	r3, [r3, #20]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d81a      	bhi.n	80011ac <bmp180_init+0xec>
 8001176:	a201      	add	r2, pc, #4	@ (adr r2, 800117c <bmp180_init+0xbc>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001195 	.word	0x08001195
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011a5 	.word	0x080011a5
		case ultra_low_power:
			bmp180->oss = 0;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	755a      	strb	r2, [r3, #21]
			break;
 8001192:	e012      	b.n	80011ba <bmp180_init+0xfa>
		case standart:
			bmp180->oss = 1;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	755a      	strb	r2, [r3, #21]
			break;
 800119a:	e00e      	b.n	80011ba <bmp180_init+0xfa>
		case high_resolution:
			bmp180->oss = 2;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2202      	movs	r2, #2
 80011a0:	755a      	strb	r2, [r3, #21]
			break;
 80011a2:	e00a      	b.n	80011ba <bmp180_init+0xfa>
		case ultra_high_resolution:
			bmp180->oss = 3;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2203      	movs	r2, #3
 80011a8:	755a      	strb	r2, [r3, #21]
			break;
 80011aa:	e006      	b.n	80011ba <bmp180_init+0xfa>
		default:
			bmp180->oversampling_setting = standart;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	751a      	strb	r2, [r3, #20]
			bmp180->oss = 1;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	755a      	strb	r2, [r3, #21]
			break;
 80011b8:	bf00      	nop
	}

	// Save calibration data
	bmp180->AC1 = convert8bitto16bit(buffer[0],  buffer[1]);
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	82da      	strh	r2, [r3, #22]
	bmp180->AC2 = convert8bitto16bit(buffer[2],  buffer[3]);
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	831a      	strh	r2, [r3, #24]
	bmp180->AC3 = convert8bitto16bit(buffer[4],  buffer[5]);
 80011de:	7c3b      	ldrb	r3, [r7, #16]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7c7b      	ldrb	r3, [r7, #17]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	835a      	strh	r2, [r3, #26]
	bmp180->AC4 = convert8bitto16bit(buffer[6],  buffer[7]);
 80011f0:	7cbb      	ldrb	r3, [r7, #18]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	b29a      	uxth	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	839a      	strh	r2, [r3, #28]
	bmp180->AC5 = convert8bitto16bit(buffer[8],  buffer[9]);
 8001204:	7d3b      	ldrb	r3, [r7, #20]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7d7b      	ldrb	r3, [r7, #21]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	83da      	strh	r2, [r3, #30]
	bmp180->AC6 = convert8bitto16bit(buffer[10], buffer[11]);
 8001218:	7dbb      	ldrb	r3, [r7, #22]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	b29a      	uxth	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	841a      	strh	r2, [r3, #32]
	bmp180->B1  = convert8bitto16bit(buffer[12], buffer[13]);
 800122c:	7e3b      	ldrb	r3, [r7, #24]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7e7b      	ldrb	r3, [r7, #25]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	845a      	strh	r2, [r3, #34]	@ 0x22
	bmp180->B2  = convert8bitto16bit(buffer[14], buffer[15]);
 800123e:	7ebb      	ldrb	r3, [r7, #26]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7efb      	ldrb	r3, [r7, #27]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp180->B3  = 0;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
	bmp180->B4  = 0;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
	bmp180->B5  = 0;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
	bmp180->B6  = 0;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	635a      	str	r2, [r3, #52]	@ 0x34
	bmp180->B7  = 0;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	639a      	str	r2, [r3, #56]	@ 0x38
	bmp180->MB  = convert8bitto16bit(buffer[16], buffer[17]);
 800126e:	7f3b      	ldrb	r3, [r7, #28]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7f7b      	ldrb	r3, [r7, #29]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	bmp180->MC  = convert8bitto16bit(buffer[18], buffer[19]);
 8001280:	7fbb      	ldrb	r3, [r7, #30]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	87da      	strh	r2, [r3, #62]	@ 0x3e
	bmp180->MD  = convert8bitto16bit(buffer[20], buffer[21]);
 8001292:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	bmp180->sea_pressure = 101325;//101325
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4a03      	ldr	r2, [pc, #12]	@ (80012bc <bmp180_init+0x1fc>)
 80012ae:	611a      	str	r2, [r3, #16]

	return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	00018bcd 	.word	0x00018bcd

080012c0 <bmp180_get_all>:
 * @brief Get all sensor data at once.
 * @param bmp180 `bmp180_t` struct to write data.
 * @retval None.
 * */
void bmp180_get_all(bmp180_t *bmp180)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	bmp180_get_temperature(bmp180);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f87d 	bl	80013c8 <bmp180_get_temperature>
	bmp180_get_pressure(bmp180);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8c4 	bl	800145c <bmp180_get_pressure>
	bmp180_get_altitude(bmp180);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9a3 	bl	8001620 <bmp180_get_altitude>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_bmp180_read_ut>:

static int16_t _bmp180_read_ut(bmp180_t *bmp180)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	uint8_t write_data = 0x2E, ut_data[2]; // 0x2E sıcaklık ölçüm modu
 80012ea:	232e      	movs	r3, #46	@ 0x2e
 80012ec:	73fb      	strb	r3, [r7, #15]

	bmp180_write(bmp180, CTRL_MEAS, &write_data, 1);
 80012ee:	f107 020f 	add.w	r2, r7, #15
 80012f2:	2301      	movs	r3, #1
 80012f4:	21f4      	movs	r1, #244	@ 0xf4
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feb2 	bl	8001060 <bmp180_write>
	HAL_Delay(5);
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 febd 	bl	800207c <HAL_Delay>
	bmp180_read(bmp180, OUT_MSB, ut_data, 2);
 8001302:	f107 020c 	add.w	r2, r7, #12
 8001306:	2302      	movs	r3, #2
 8001308:	21f6      	movs	r1, #246	@ 0xf6
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe8a 	bl	8001024 <bmp180_read>

	return (convert8bitto16bit(ut_data[0], ut_data[1]));
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7b7b      	ldrb	r3, [r7, #13]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <_bmp180_read_up>:

static int32_t _bmp180_read_up(bmp180_t *bmp180)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t write_data = 0x34 + (bmp180->oss << 6), up_data[3];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7d5b      	ldrb	r3, [r3, #21]
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3334      	adds	r3, #52	@ 0x34
 800133a:	b2db      	uxtb	r3, r3
 800133c:	73bb      	strb	r3, [r7, #14]
	bmp180_write(bmp180, CTRL_MEAS, &write_data, 1);
 800133e:	f107 020e 	add.w	r2, r7, #14
 8001342:	2301      	movs	r3, #1
 8001344:	21f4      	movs	r1, #244	@ 0xf4
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe8a 	bl	8001060 <bmp180_write>
	uint8_t wait = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
	switch (bmp180->oversampling_setting) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7d1b      	ldrb	r3, [r3, #20]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d817      	bhi.n	8001388 <_bmp180_read_up+0x60>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <_bmp180_read_up+0x38>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001377 	.word	0x08001377
 8001368:	0800137d 	.word	0x0800137d
 800136c:	08001383 	.word	0x08001383
		case ultra_low_power:
			wait = 5;
 8001370:	2305      	movs	r3, #5
 8001372:	73fb      	strb	r3, [r7, #15]
			break;
 8001374:	e00b      	b.n	800138e <_bmp180_read_up+0x66>
		case standart:
			wait = 8;
 8001376:	2308      	movs	r3, #8
 8001378:	73fb      	strb	r3, [r7, #15]
			break;
 800137a:	e008      	b.n	800138e <_bmp180_read_up+0x66>
		case high_resolution:
			wait = 14;
 800137c:	230e      	movs	r3, #14
 800137e:	73fb      	strb	r3, [r7, #15]
			break;
 8001380:	e005      	b.n	800138e <_bmp180_read_up+0x66>
		case ultra_high_resolution:
			wait = 26;
 8001382:	231a      	movs	r3, #26
 8001384:	73fb      	strb	r3, [r7, #15]
			break;
 8001386:	e002      	b.n	800138e <_bmp180_read_up+0x66>
		default:
			wait = 5;
 8001388:	2305      	movs	r3, #5
 800138a:	73fb      	strb	r3, [r7, #15]
			break;
 800138c:	bf00      	nop
	}
	HAL_Delay(wait);
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fe73 	bl	800207c <HAL_Delay>
	bmp180_read(bmp180, OUT_MSB, up_data, 3);
 8001396:	f107 0208 	add.w	r2, r7, #8
 800139a:	2303      	movs	r3, #3
 800139c:	21f6      	movs	r1, #246	@ 0xf6
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe40 	bl	8001024 <bmp180_read>

	return ((up_data[0] << 16) + (up_data[1] << 8) + up_data[2]) >> (8 - bmp180->oss);
 80013a4:	7a3b      	ldrb	r3, [r7, #8]
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	7a7b      	ldrb	r3, [r7, #9]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	4413      	add	r3, r2
 80013ae:	7aba      	ldrb	r2, [r7, #10]
 80013b0:	441a      	add	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7d5b      	ldrb	r3, [r3, #21]
 80013b6:	f1c3 0308 	rsb	r3, r3, #8
 80013ba:	fa42 f303 	asr.w	r3, r2, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop

080013c8 <bmp180_get_temperature>:
 * @brief Get temperature data.
 * @param bmp180 `bmp180_t` struct to write data.
 * @retval None.
 * */
void bmp180_get_temperature(bmp180_t *bmp180)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	int16_t ut = _bmp180_read_ut(bmp180);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff86 	bl	80012e2 <_bmp180_read_ut>
 80013d6:	4603      	mov	r3, r0
 80013d8:	82fb      	strh	r3, [r7, #22]
	int32_t X1, X2;

	X1 = (ut - bmp180->AC6) * bmp180->AC5 / powerof2(15);
 80013da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	8c12      	ldrh	r2, [r2, #32]
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	8bd2      	ldrh	r2, [r2, #30]
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da02      	bge.n	80013f6 <bmp180_get_temperature+0x2e>
 80013f0:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80013f4:	337f      	adds	r3, #127	@ 0x7f
 80013f6:	13db      	asrs	r3, r3, #15
 80013f8:	613b      	str	r3, [r7, #16]
	X2 = bmp180->MC * powerof2(11) / (X1 + bmp180->MD);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8001400:	02da      	lsls	r2, r3, #11
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8001408:	4619      	mov	r1, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	440b      	add	r3, r1
 800140e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
	bmp180->B5 = X1 + X2;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
	bmp180->temperature = ((bmp180->B5 + 8) / powerof2(4)) / 10.0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	3308      	adds	r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <bmp180_get_temperature+0x62>
 8001428:	330f      	adds	r3, #15
 800142a:	111b      	asrs	r3, r3, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f899 	bl	8000564 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <bmp180_get_temperature+0x90>)
 8001438:	f7ff fa28 	bl	800088c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fbf0 	bl	8000c28 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40240000 	.word	0x40240000

0800145c <bmp180_get_pressure>:
 * @brief Get pressure data.
 * @param bmp180 `bmp180_t` struct to write data.
 * @retval None.
 * */
void bmp180_get_pressure(bmp180_t *bmp180)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	int32_t X1, X2, X3, up = _bmp180_read_up(bmp180), p;
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff5f 	bl	8001328 <_bmp180_read_up>
 800146a:	61b8      	str	r0, [r7, #24]
	bmp180->B6 = bmp180->B5 - 4000;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f5a3 627a 	sub.w	r2, r3, #4000	@ 0xfa0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34
	X1 = (bmp180->B2 * (bmp180->B6 * bmp180->B6 / powerof2(12))) / powerof2(11);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	da01      	bge.n	8001494 <bmp180_get_pressure+0x38>
 8001490:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001494:	131b      	asrs	r3, r3, #12
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	da01      	bge.n	80014a2 <bmp180_get_pressure+0x46>
 800149e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80014a2:	12db      	asrs	r3, r3, #11
 80014a4:	617b      	str	r3, [r7, #20]
	X2 = bmp180->AC2 * bmp180->B6 / powerof2(11);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da01      	bge.n	80014be <bmp180_get_pressure+0x62>
 80014ba:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80014be:	12db      	asrs	r3, r3, #11
 80014c0:	613b      	str	r3, [r7, #16]
	X3 = X1 + X2;
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
	bmp180->B3 = (((bmp180->AC1 * 4 + X3) << bmp180->oss) + 2) / 4;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4413      	add	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	7d52      	ldrb	r2, [r2, #21]
 80014da:	4093      	lsls	r3, r2
 80014dc:	3302      	adds	r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da00      	bge.n	80014e4 <bmp180_get_pressure+0x88>
 80014e2:	3303      	adds	r3, #3
 80014e4:	109b      	asrs	r3, r3, #2
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
	X1 = bmp180->AC3 * bmp180->B6 / powerof2(13);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da02      	bge.n	8001506 <bmp180_get_pressure+0xaa>
 8001500:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001504:	331f      	adds	r3, #31
 8001506:	135b      	asrs	r3, r3, #13
 8001508:	617b      	str	r3, [r7, #20]
	X2 = (bmp180->B1 * (bmp180->B6 * bmp180->B6 / powerof2(12))) / powerof2(16);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	da01      	bge.n	8001526 <bmp180_get_pressure+0xca>
 8001522:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001526:	131b      	asrs	r3, r3, #12
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	da02      	bge.n	8001536 <bmp180_get_pressure+0xda>
 8001530:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001534:	33ff      	adds	r3, #255	@ 0xff
 8001536:	141b      	asrs	r3, r3, #16
 8001538:	613b      	str	r3, [r7, #16]
	X3 = ((X1 + X2) + 2) / powerof2(2);
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	3302      	adds	r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	da00      	bge.n	8001548 <bmp180_get_pressure+0xec>
 8001546:	3303      	adds	r3, #3
 8001548:	109b      	asrs	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
	bmp180->B4 = bmp180->AC4 * (uint32_t)(X3 + 32768) / powerof2(15);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	8b9b      	ldrh	r3, [r3, #28]
 8001550:	461a      	mov	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	0bda      	lsrs	r2, r3, #15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
	bmp180->B7 = ((uint32_t)up - bmp180->B3) * (50000 >> bmp180->oss);
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	7d52      	ldrb	r2, [r2, #21]
 800156e:	4611      	mov	r1, r2
 8001570:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001574:	410a      	asrs	r2, r1
 8001576:	fb03 f202 	mul.w	r2, r3, r2
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38
	if (bmp180->B7 < 0x80000000) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001582:	2b00      	cmp	r3, #0
 8001584:	db08      	blt.n	8001598 <bmp180_get_pressure+0x13c>
		p = (bmp180->B7 * 2) / bmp180->B4;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158a:	005a      	lsls	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	fbb2 f3f3 	udiv	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e007      	b.n	80015a8 <bmp180_get_pressure+0x14c>
	}
	else {
		p = (bmp180->B7 / bmp180->B4) * 2;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
	}
	X1 = (p / powerof2(8)) * (p / powerof2(8));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da00      	bge.n	80015b0 <bmp180_get_pressure+0x154>
 80015ae:	33ff      	adds	r3, #255	@ 0xff
 80015b0:	121b      	asrs	r3, r3, #8
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da00      	bge.n	80015bc <bmp180_get_pressure+0x160>
 80015ba:	33ff      	adds	r3, #255	@ 0xff
 80015bc:	121b      	asrs	r3, r3, #8
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
	X1 = (X1 * 3038) / powerof2(16);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f640 32de 	movw	r2, #3038	@ 0xbde
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da02      	bge.n	80015d8 <bmp180_get_pressure+0x17c>
 80015d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80015d6:	33ff      	adds	r3, #255	@ 0xff
 80015d8:	141b      	asrs	r3, r3, #16
 80015da:	617b      	str	r3, [r7, #20]
	X2 = (-7357 * p) / powerof2(16);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4a0f      	ldr	r2, [pc, #60]	@ (800161c <bmp180_get_pressure+0x1c0>)
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da02      	bge.n	80015ee <bmp180_get_pressure+0x192>
 80015e8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80015ec:	33ff      	adds	r3, #255	@ 0xff
 80015ee:	141b      	asrs	r3, r3, #16
 80015f0:	613b      	str	r3, [r7, #16]
	p = p + (X1 + X2 + 3791) / powerof2(4);
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da00      	bge.n	8001602 <bmp180_get_pressure+0x1a6>
 8001600:	330f      	adds	r3, #15
 8001602:	111b      	asrs	r3, r3, #4
 8001604:	461a      	mov	r2, r3
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
	bmp180->pressure = p;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	609a      	str	r2, [r3, #8]
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	ffffe343 	.word	0xffffe343

08001620 <bmp180_get_altitude>:
 * @brief Calculate altitude from pressure data.
 * @param bmp180 `bmp180_t` struct to write data.
 * @retval None.
 * */
void bmp180_get_altitude(bmp180_t *bmp180)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	bmp180->altitude = 44330 * (1 - pow(((float)bmp180->pressure / (float)bmp180->sea_pressure), 1 / 5.255));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001644:	ee16 0a90 	vmov	r0, s13
 8001648:	f7fe ff9e 	bl	8000588 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001698 <bmp180_get_altitude+0x78>
 8001654:	ec43 2b10 	vmov	d0, r2, r3
 8001658:	f00a ff20 	bl	800c49c <pow>
 800165c:	ec53 2b10 	vmov	r2, r3, d0
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	4910      	ldr	r1, [pc, #64]	@ (80016a8 <bmp180_get_altitude+0x88>)
 8001666:	f7fe fe2f 	bl	80002c8 <__aeabi_dsub>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	a30b      	add	r3, pc, #44	@ (adr r3, 80016a0 <bmp180_get_altitude+0x80>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffde 	bl	8000638 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fad0 	bl	8000c28 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60da      	str	r2, [r3, #12]
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	ccd9456c 	.word	0xccd9456c
 800169c:	3fc85b95 	.word	0x3fc85b95
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40e5a540 	.word	0x40e5a540
 80016a8:	3ff00000 	.word	0x3ff00000

080016ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	bmp180_init(&hi2c1, &bmp180);
 80016b0:	4912      	ldr	r1, [pc, #72]	@ (80016fc <MX_FREERTOS_Init+0x50>)
 80016b2:	4813      	ldr	r0, [pc, #76]	@ (8001700 <MX_FREERTOS_Init+0x54>)
 80016b4:	f7ff fd04 	bl	80010c0 <bmp180_init>
			bmp180_get_altitude(&bmp180);
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <MX_FREERTOS_Init+0x50>)
 80016ba:	f7ff ffb1 	bl	8001620 <bmp180_get_altitude>
			first_alt = bmp180.altitude;
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_FREERTOS_Init+0x50>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <MX_FREERTOS_Init+0x58>)
 80016c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readData */
  readDataHandle = osThreadNew(StartDefaultTask, NULL, &readData_attributes);
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <MX_FREERTOS_Init+0x5c>)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4810      	ldr	r0, [pc, #64]	@ (800170c <MX_FREERTOS_Init+0x60>)
 80016cc:	f003 fe32 	bl	8005334 <osThreadNew>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <MX_FREERTOS_Init+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* creation of openDrug */
  openDrugHandle = osThreadNew(StartTask02, NULL, &openDrug_attributes);
 80016d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001714 <MX_FREERTOS_Init+0x68>)
 80016d8:	2100      	movs	r1, #0
 80016da:	480f      	ldr	r0, [pc, #60]	@ (8001718 <MX_FREERTOS_Init+0x6c>)
 80016dc:	f003 fe2a 	bl	8005334 <osThreadNew>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <MX_FREERTOS_Init+0x70>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* creation of openMain */
  openMainHandle = osThreadNew(StartTask03, NULL, &openMain_attributes);
 80016e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <MX_FREERTOS_Init+0x74>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_FREERTOS_Init+0x78>)
 80016ec:	f003 fe22 	bl	8005334 <osThreadNew>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <MX_FREERTOS_Init+0x7c>)
 80016f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000000 	.word	0x20000000
 8001700:	200002a0 	.word	0x200002a0
 8001704:	2000025c 	.word	0x2000025c
 8001708:	0800d3b8 	.word	0x0800d3b8
 800170c:	0800172d 	.word	0x0800172d
 8001710:	20000294 	.word	0x20000294
 8001714:	0800d3dc 	.word	0x0800d3dc
 8001718:	080017c5 	.word	0x080017c5
 800171c:	20000298 	.word	0x20000298
 8001720:	0800d400 	.word	0x0800d400
 8001724:	08001821 	.word	0x08001821
 8001728:	2000029c 	.word	0x2000029c

0800172c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	bmp180_get_all(&bmp180);
 8001734:	481b      	ldr	r0, [pc, #108]	@ (80017a4 <StartDefaultTask+0x78>)
 8001736:	f7ff fdc3 	bl	80012c0 <bmp180_get_all>
	temperature = bmp180.temperature;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <StartDefaultTask+0x78>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a1a      	ldr	r2, [pc, #104]	@ (80017a8 <StartDefaultTask+0x7c>)
 8001740:	6013      	str	r3, [r2, #0]
	pressure = bmp180.pressure;
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <StartDefaultTask+0x78>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <StartDefaultTask+0x80>)
 8001748:	6013      	str	r3, [r2, #0]
	altitude = bmp180.altitude;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <StartDefaultTask+0x78>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a18      	ldr	r2, [pc, #96]	@ (80017b0 <StartDefaultTask+0x84>)
 8001750:	6013      	str	r3, [r2, #0]

	if (max_data < altitude)
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <StartDefaultTask+0x88>)
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <StartDefaultTask+0x84>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d503      	bpl.n	8001770 <StartDefaultTask+0x44>
		max_data = altitude;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <StartDefaultTask+0x84>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <StartDefaultTask+0x88>)
 800176e:	6013      	str	r3, [r2, #0]

	printf(str, "%f\n", altitude);
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <StartDefaultTask+0x84>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff07 	bl	8000588 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	490e      	ldr	r1, [pc, #56]	@ (80017b8 <StartDefaultTask+0x8c>)
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <StartDefaultTask+0x90>)
 8001782:	f007 fa3f 	bl	8008c04 <iprintf>

	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8001786:	480d      	ldr	r0, [pc, #52]	@ (80017bc <StartDefaultTask+0x90>)
 8001788:	f7fe fd92 	bl	80002b0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	490a      	ldr	r1, [pc, #40]	@ (80017bc <StartDefaultTask+0x90>)
 8001794:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <StartDefaultTask+0x94>)
 8001796:	f003 f983 	bl	8004aa0 <HAL_UART_Transmit>


    osDelay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f003 fe5c 	bl	8005458 <osDelay>
  {
 80017a0:	e7c8      	b.n	8001734 <StartDefaultTask+0x8>
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000250 	.word	0x20000250
 80017ac:	20000254 	.word	0x20000254
 80017b0:	20000258 	.word	0x20000258
 80017b4:	2000024c 	.word	0x2000024c
 80017b8:	0800d39c 	.word	0x0800d39c
 80017bc:	20000260 	.word	0x20000260
 80017c0:	20000340 	.word	0x20000340

080017c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	if (max_data - altitude > 2.0 && drugOpen == false)
 80017cc:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <StartTask02+0x4c>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <StartTask02+0x50>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80017e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	dd0e      	ble.n	8001808 <StartTask02+0x44>
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <StartTask02+0x54>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <StartTask02+0x44>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2120      	movs	r1, #32
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <StartTask02+0x58>)
 80017fe:	f000 fed7 	bl	80025b0 <HAL_GPIO_WritePin>
		drugOpen = true;
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <StartTask02+0x54>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
	}
	
    osDelay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f003 fe25 	bl	8005458 <osDelay>
	if (max_data - altitude > 2.0 && drugOpen == false)
 800180e:	e7dd      	b.n	80017cc <StartTask02+0x8>
 8001810:	2000024c 	.word	0x2000024c
 8001814:	20000258 	.word	0x20000258
 8001818:	20000292 	.word	0x20000292
 800181c:	40020000 	.word	0x40020000

08001820 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	if (altitude - first_alt < 500 && drugOpen == true)
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <StartTask03+0x40>)
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <StartTask03+0x44>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001838:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001868 <StartTask03+0x48>
 800183c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d508      	bpl.n	8001858 <StartTask03+0x38>
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <StartTask03+0x4c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <StartTask03+0x38>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <StartTask03+0x50>)
 8001854:	f000 feac 	bl	80025b0 <HAL_GPIO_WritePin>
	
    osDelay(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f003 fdfd 	bl	8005458 <osDelay>
	if (altitude - first_alt < 500 && drugOpen == true)
 800185e:	e7e3      	b.n	8001828 <StartTask03+0x8>
 8001860:	20000258 	.word	0x20000258
 8001864:	2000025c 	.word	0x2000025c
 8001868:	43fa0000 	.word	0x43fa0000
 800186c:	20000292 	.word	0x20000292
 8001870:	40020000 	.word	0x40020000

08001874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <MX_GPIO_Init+0xd4>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <MX_GPIO_Init+0xd4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a26      	ldr	r2, [pc, #152]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DrugP_Pin|MainP_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001900:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_GPIO_Init+0xd8>)
 8001902:	f000 fe55 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <MX_GPIO_Init+0xdc>)
 800191e:	f000 fcb3 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DrugP_Pin|MainP_Pin;
 8001922:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4804      	ldr	r0, [pc, #16]	@ (800194c <MX_GPIO_Init+0xd8>)
 800193c:	f000 fca4 	bl	8002288 <HAL_GPIO_Init>

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020800 	.word	0x40020800

08001954 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_I2C1_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <MX_I2C1_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <MX_I2C1_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_I2C1_Init+0x50>)
 8001992:	f000 fe27 	bl	80025e4 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f8e4 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200002a0 	.word	0x200002a0
 80019a8:	40005400 	.word	0x40005400
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <HAL_I2C_MspInit+0x84>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12b      	bne.n	8001a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	23c0      	movs	r3, #192	@ 0xc0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fe:	2304      	movs	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <HAL_I2C_MspInit+0x8c>)
 8001a0a:	f000 fc3d 	bl	8002288 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	@ 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005400 	.word	0x40005400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f000 fad8 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f80e 	bl	8001a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f7ff ff12 	bl	8001874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a50:	f000 fa36 	bl	8001ec0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a54:	f7ff ff7e 	bl	8001954 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a58:	f003 fc22 	bl	80052a0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a5c:	f7ff fe26 	bl	80016ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a60:	f003 fc42 	bl	80052e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <main+0x24>

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	@ 0x50
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2234      	movs	r2, #52	@ 0x34
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f007 f939 	bl	8008cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	4a29      	ldr	r2, [pc, #164]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001adc:	2310      	movs	r3, #16
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ae0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ae4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fa42 	bl	8003f80 <HAL_RCC_OscConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b02:	f000 f831 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2102      	movs	r1, #2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 feb0 	bl	8003888 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b2e:	f000 f81b 	bl	8001b68 <Error_Handler>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3750      	adds	r7, #80	@ 0x50
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b56:	f000 fa71 	bl	800203c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40001000 	.word	0x40001000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_MspInit+0x54>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	f06f 0001 	mvn.w	r0, #1
 8001bba:	f000 fb3b 	bl	8002234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	@ 0x38
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_InitTick+0xe4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	4a32      	ldr	r2, [pc, #200]	@ (8001cb0 <HAL_InitTick+0xe4>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bec:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <HAL_InitTick+0xe4>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 ff5a 	bl	8003abc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c12:	f001 ff2b 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8001c16:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c18:	e004      	b.n	8001c24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c1a:	f001 ff27 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c26:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_InitTick+0xe8>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	0c9b      	lsrs	r3, r3, #18
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_InitTick+0xf0>)
 8001c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c40:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c58:	4817      	ldr	r0, [pc, #92]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c5a:	f002 fc2f 	bl	80044bc <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c6c:	4812      	ldr	r0, [pc, #72]	@ (8001cb8 <HAL_InitTick+0xec>)
 8001c6e:	f002 fc7f 	bl	8004570 <HAL_TIM_Base_Start_IT>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c80:	2036      	movs	r0, #54	@ 0x36
 8001c82:	f000 faf3 	bl	800226c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d808      	bhi.n	8001c9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	2036      	movs	r0, #54	@ 0x36
 8001c92:	f000 facf 	bl	8002234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_InitTick+0xf4>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e002      	b.n	8001ca4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3738      	adds	r7, #56	@ 0x38
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	200002f4 	.word	0x200002f4
 8001cbc:	40001000 	.word	0x40001000
 8001cc0:	20000048 	.word	0x20000048

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <TIM6_DAC_IRQHandler+0x10>)
 8001d02:	f002 fca5 	bl	8004650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200002f4 	.word	0x200002f4

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2a:	f007 f833 	bl	8008d94 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d52:	bf00      	nop
 8001d54:	e7fd      	b.n	8001d52 <_exit+0x12>

08001d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e00a      	b.n	8001d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d68:	f3af 8000 	nop.w
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf0      	blt.n	8001d68 <_read+0x12>
  }

  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e009      	b.n	8001db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf1      	blt.n	8001da2 <_write+0x12>
  }
  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_close>:

int _close(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df0:	605a      	str	r2, [r3, #4]
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_isatty>:

int _isatty(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f006 ff98 	bl	8008d94 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20020000 	.word	0x20020000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	2000033c 	.word	0x2000033c
 8001e98:	20004e28 	.word	0x20004e28

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <MX_USART2_UART_Init+0x50>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ef8:	f002 fd82 	bl	8004a00 <HAL_UART_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f02:	f7ff fe31 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000340 	.word	0x20000340
 8001f10:	40004400 	.word	0x40004400

08001f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	@ (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8a:	f000 f97d 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	@ 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa8:	f7ff ff78 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f006 fee5 	bl	8008da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff fd33 	bl	8001a40 <main>
  bx  lr    
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8001fe8:	0800d8a8 	.word	0x0800d8a8
  ldr r2, =_sbss
 8001fec:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001ff0:	20004e28 	.word	0x20004e28

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_Init+0x40>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <HAL_Init+0x40>)
 800200e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_Init+0x40>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f8fc 	bl	800221e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f7ff fdd0 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fda2 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000004c 	.word	0x2000004c
 8002060:	20000388 	.word	0x20000388

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000388 	.word	0x20000388

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000004c 	.word	0x2000004c

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	@ (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff4c 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002246:	f7ff ff61 	bl	800210c <__NVIC_GetPriorityGrouping>
 800224a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f7ff ffb1 	bl	80021b8 <NVIC_EncodePriority>
 8002256:	4602      	mov	r2, r0
 8002258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff80 	bl	8002164 <__NVIC_SetPriority>
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff54 	bl	8002128 <__NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e165      	b.n	8002570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8154 	bne.w	800256a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ae 	beq.w	800256a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a5c      	ldr	r2, [pc, #368]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a58      	ldr	r2, [pc, #352]	@ (800258c <HAL_GPIO_Init+0x304>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	@ (8002590 <HAL_GPIO_Init+0x308>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <HAL_GPIO_Init+0x30c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x216>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_GPIO_Init+0x310>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x212>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_GPIO_Init+0x314>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	@ (80025a0 <HAL_GPIO_Init+0x318>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x20a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	@ (80025a4 <HAL_GPIO_Init+0x31c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x206>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a49      	ldr	r2, [pc, #292]	@ (80025a8 <HAL_GPIO_Init+0x320>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x202>
 8002486:	2306      	movs	r3, #6
 8002488:	e00c      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248a:	2307      	movs	r3, #7
 800248c:	e00a      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248e:	2305      	movs	r3, #5
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002492:	2304      	movs	r3, #4
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_GPIO_Init+0x324>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f ae96 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025cc:	e003      	b.n	80025d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	041a      	lsls	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	619a      	str	r2, [r3, #24]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e12b      	b.n	800284e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff f9d0 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002648:	f001 fa10 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4a81      	ldr	r2, [pc, #516]	@ (8002858 <HAL_I2C_Init+0x274>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d807      	bhi.n	8002668 <HAL_I2C_Init+0x84>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a80      	ldr	r2, [pc, #512]	@ (800285c <HAL_I2C_Init+0x278>)
 800265c:	4293      	cmp	r3, r2
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e006      	b.n	8002676 <HAL_I2C_Init+0x92>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a7d      	ldr	r2, [pc, #500]	@ (8002860 <HAL_I2C_Init+0x27c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	bf94      	ite	ls
 8002670:	2301      	movls	r3, #1
 8002672:	2300      	movhi	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0e7      	b.n	800284e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a78      	ldr	r2, [pc, #480]	@ (8002864 <HAL_I2C_Init+0x280>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9b      	lsrs	r3, r3, #18
 8002688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_I2C_Init+0x274>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d802      	bhi.n	80026b8 <HAL_I2C_Init+0xd4>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3301      	adds	r3, #1
 80026b6:	e009      	b.n	80026cc <HAL_I2C_Init+0xe8>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	4a69      	ldr	r2, [pc, #420]	@ (8002868 <HAL_I2C_Init+0x284>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	3301      	adds	r3, #1
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	495c      	ldr	r1, [pc, #368]	@ (8002858 <HAL_I2C_Init+0x274>)
 80026e8:	428b      	cmp	r3, r1
 80026ea:	d819      	bhi.n	8002720 <HAL_I2C_Init+0x13c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e59      	subs	r1, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fa:	1c59      	adds	r1, r3, #1
 80026fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002700:	400b      	ands	r3, r1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_I2C_Init+0x138>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e59      	subs	r1, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fbb1 f3f3 	udiv	r3, r1, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271a:	e051      	b.n	80027c0 <HAL_I2C_Init+0x1dc>
 800271c:	2304      	movs	r3, #4
 800271e:	e04f      	b.n	80027c0 <HAL_I2C_Init+0x1dc>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d111      	bne.n	800274c <HAL_I2C_Init+0x168>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	440b      	add	r3, r1
 8002736:	fbb0 f3f3 	udiv	r3, r0, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e012      	b.n	8002772 <HAL_I2C_Init+0x18e>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e58      	subs	r0, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	0099      	lsls	r1, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Init+0x196>
 8002776:	2301      	movs	r3, #1
 8002778:	e022      	b.n	80027c0 <HAL_I2C_Init+0x1dc>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10e      	bne.n	80027a0 <HAL_I2C_Init+0x1bc>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e58      	subs	r0, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	440b      	add	r3, r1
 8002790:	fbb0 f3f3 	udiv	r3, r0, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279e:	e00f      	b.n	80027c0 <HAL_I2C_Init+0x1dc>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e58      	subs	r0, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	0099      	lsls	r1, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	6809      	ldr	r1, [r1, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6911      	ldr	r1, [r2, #16]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	000186a0 	.word	0x000186a0
 800285c:	001e847f 	.word	0x001e847f
 8002860:	003d08ff 	.word	0x003d08ff
 8002864:	431bde83 	.word	0x431bde83
 8002868:	10624dd3 	.word	0x10624dd3

0800286c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002886:	f7ff fbed 	bl	8002064 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b20      	cmp	r3, #32
 8002896:	f040 80d9 	bne.w	8002a4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2319      	movs	r3, #25
 80028a0:	2201      	movs	r2, #1
 80028a2:	496d      	ldr	r1, [pc, #436]	@ (8002a58 <HAL_I2C_Mem_Write+0x1ec>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fdb9 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0cc      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Mem_Write+0x56>
 80028be:	2302      	movs	r3, #2
 80028c0:	e0c5      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d007      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2221      	movs	r2, #33	@ 0x21
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2240      	movs	r2, #64	@ 0x40
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a4d      	ldr	r2, [pc, #308]	@ (8002a5c <HAL_I2C_Mem_Write+0x1f0>)
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800292a:	88f8      	ldrh	r0, [r7, #6]
 800292c:	893a      	ldrh	r2, [r7, #8]
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4603      	mov	r3, r0
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fbf0 	bl	8003120 <I2C_RequestMemoryWrite>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d052      	beq.n	80029ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e081      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fe7e 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2b04      	cmp	r3, #4
 8002960:	d107      	bne.n	8002972 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06b      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d11b      	bne.n	80029ec <HAL_I2C_Mem_Write+0x180>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d017      	beq.n	80029ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1aa      	bne.n	800294a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fe71 	bl	80036e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d107      	bne.n	8002a1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e016      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	00100002 	.word	0x00100002
 8002a5c:	ffff0000 	.word	0xffff0000

08002a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7ff faf3 	bl	8002064 <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	f040 8214 	bne.w	8002eb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2319      	movs	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	497b      	ldr	r1, [pc, #492]	@ (8002c84 <HAL_I2C_Mem_Read+0x224>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fcbf 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e207      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x56>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e200      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	@ 0x22
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c88 <HAL_I2C_Mem_Read+0x228>)
 8002b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fb8c 	bl	800324c <I2C_RequestMemoryRead>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1bc      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e190      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d11b      	bne.n	8002bae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e170      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d11b      	bne.n	8002bee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	e150      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c04:	e144      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	f200 80f1 	bhi.w	8002df2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d123      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fda7 	bl	8003770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e145      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c5e:	e117      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d14e      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4906      	ldr	r1, [pc, #24]	@ (8002c8c <HAL_I2C_Mem_Read+0x22c>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fbd2 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e11a      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
 8002c82:	bf00      	nop
 8002c84:	00100002 	.word	0x00100002
 8002c88:	ffff0000 	.word	0xffff0000
 8002c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d04:	e0c4      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	496c      	ldr	r1, [pc, #432]	@ (8002ec0 <HAL_I2C_Mem_Read+0x460>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fb83 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0cb      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4955      	ldr	r1, [pc, #340]	@ (8002ec0 <HAL_I2C_Mem_Read+0x460>)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fb55 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e09d      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df0:	e04e      	b.n	8002e90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fcba 	bl	8003770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e058      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d124      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f aeb6 	bne.w	8002c06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3728      	adds	r7, #40	@ 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	00010004 	.word	0x00010004

08002ec4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff f8c6 	bl	8002064 <HAL_GetTick>
 8002ed8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f040 8111 	bne.w	800310e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2319      	movs	r3, #25
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4988      	ldr	r1, [pc, #544]	@ (8003118 <HAL_I2C_IsDeviceReady+0x254>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa90 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	e104      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_I2C_IsDeviceReady+0x50>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0fd      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d007      	beq.n	8002f3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2224      	movs	r2, #36	@ 0x24
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a70      	ldr	r2, [pc, #448]	@ (800311c <HAL_I2C_IsDeviceReady+0x258>)
 8002f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa4e 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f94:	d103      	bne.n	8002f9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0b6      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7ff f857 	bl	8002064 <HAL_GetTick>
 8002fb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	2300      	movne	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fe6:	e025      	b.n	8003034 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7ff f83c 	bl	8002064 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <HAL_I2C_IsDeviceReady+0x13a>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	22a0      	movs	r2, #160	@ 0xa0
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2ba0      	cmp	r3, #160	@ 0xa0
 800303e:	d005      	beq.n	800304c <HAL_I2C_IsDeviceReady+0x188>
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <HAL_I2C_IsDeviceReady+0x188>
 8003046:	7dbb      	ldrb	r3, [r7, #22]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0cd      	beq.n	8002fe8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d129      	bne.n	80030b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2319      	movs	r3, #25
 800308e:	2201      	movs	r2, #1
 8003090:	4921      	ldr	r1, [pc, #132]	@ (8003118 <HAL_I2C_IsDeviceReady+0x254>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f9c2 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e036      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e02c      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2319      	movs	r3, #25
 80030d6:	2201      	movs	r2, #1
 80030d8:	490f      	ldr	r1, [pc, #60]	@ (8003118 <HAL_I2C_IsDeviceReady+0x254>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f99e 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e012      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f4ff af32 	bcc.w	8002f5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00100002 	.word	0x00100002
 800311c:	ffff0000 	.word	0xffff0000

08003120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2200      	movs	r2, #0
 8003152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f960 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003170:	d103      	bne.n	800317a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e05f      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800318c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	492d      	ldr	r1, [pc, #180]	@ (8003248 <I2C_RequestMemoryWrite+0x128>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f9bb 	bl	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04c      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031bc:	6a39      	ldr	r1, [r7, #32]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fa46 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d107      	bne.n	80031e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e02b      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]
 80031f6:	e021      	b.n	800323c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f8:	893b      	ldrh	r3, [r7, #8]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fa20 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e005      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003232:	893b      	ldrh	r3, [r7, #8]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	00010002 	.word	0x00010002

0800324c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	460b      	mov	r3, r1
 8003260:	813b      	strh	r3, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	2200      	movs	r2, #0
 800328e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f8c2 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ac:	d103      	bne.n	80032b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0aa      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	4952      	ldr	r1, [pc, #328]	@ (8003418 <I2C_RequestMemoryRead+0x1cc>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f91d 	bl	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e097      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f9a8 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	2b04      	cmp	r3, #4
 800330c:	d107      	bne.n	800331e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e076      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	e021      	b.n	8003378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003334:	893b      	ldrh	r3, [r7, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b29b      	uxth	r3, r3
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003344:	6a39      	ldr	r1, [r7, #32]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f982 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	2b04      	cmp	r3, #4
 8003358:	d107      	bne.n	800336a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e050      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f967 	bl	8003650 <I2C_WaitOnTXEFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e035      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f82b 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033da:	d103      	bne.n	80033e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e013      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033e8:	897b      	ldrh	r3, [r7, #10]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	4906      	ldr	r1, [pc, #24]	@ (8003418 <I2C_RequestMemoryRead+0x1cc>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f886 	bl	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	00010002 	.word	0x00010002

0800341c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	e048      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d044      	beq.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fe15 	bl	8002064 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d139      	bne.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	0c1b      	lsrs	r3, r3, #16
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10d      	bne.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	43da      	mvns	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	e00c      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	429a      	cmp	r2, r3
 8003490:	d116      	bne.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e023      	b.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10d      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e00c      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d093      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351e:	e071      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352e:	d123      	bne.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003548:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e067      	b.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d041      	beq.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fe fd70 	bl	8002064 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d136      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10c      	bne.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e00b      	b.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e021      	b.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10c      	bne.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e00b      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	f47f af6d 	bne.w	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800365c:	e034      	b.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8e3 	bl	800382a <I2C_IsAcknowledgeFailed>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e034      	b.n	80036d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d028      	beq.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe fcf5 	bl	8002064 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11d      	bne.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b80      	cmp	r3, #128	@ 0x80
 8003698:	d016      	beq.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d1c3      	bne.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ec:	e034      	b.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f89b 	bl	800382a <I2C_IsAcknowledgeFailed>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e034      	b.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d028      	beq.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fcad 	bl	8002064 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11d      	bne.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d016      	beq.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e007      	b.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d1c3      	bne.n	80036ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800377c:	e049      	b.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b10      	cmp	r3, #16
 800378a:	d119      	bne.n	80037c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0210 	mvn.w	r2, #16
 8003794:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e030      	b.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fe fc50 	bl	8002064 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11d      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	d016      	beq.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e007      	b.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d1ae      	bne.n	800377e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003840:	d11b      	bne.n	800387a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800384a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0cc      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b68      	ldr	r3, [pc, #416]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90c      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b65      	ldr	r3, [pc, #404]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b63      	ldr	r3, [pc, #396]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b8      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b59      	ldr	r3, [pc, #356]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a58      	ldr	r2, [pc, #352]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a52      	ldr	r2, [pc, #328]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b50      	ldr	r3, [pc, #320]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	494d      	ldr	r1, [pc, #308]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d044      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b3f      	ldr	r3, [pc, #252]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e067      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4934      	ldr	r1, [pc, #208]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe fb74 	bl	8002064 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe fb70 	bl	8002064 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e04f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20c      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e032      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039dc:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4916      	ldr	r1, [pc, #88]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fa:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	490e      	ldr	r1, [pc, #56]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0e:	f000 f887 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	490a      	ldr	r1, [pc, #40]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a09      	ldr	r2, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe f8cc 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00
 8003a44:	40023800 	.word	0x40023800
 8003a48:	0800d424 	.word	0x0800d424
 8003a4c:	20000044 	.word	0x20000044
 8003a50:	20000048 	.word	0x20000048

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000044 	.word	0x20000044

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	0800d434 	.word	0x0800d434

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffdc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0b5b      	lsrs	r3, r3, #13
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	0800d434 	.word	0x0800d434

08003abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	220f      	movs	r2, #15
 8003aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003acc:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0203 	and.w	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003af0:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCC_GetClockConfig+0x5c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003afe:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <HAL_RCC_GetClockConfig+0x60>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40023c00 	.word	0x40023c00

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0ae      	sub	sp, #184	@ 0xb8
 8003b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b46:	4bcb      	ldr	r3, [pc, #812]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	f200 8206 	bhi.w	8003f60 <HAL_RCC_GetSysClockFreq+0x440>
 8003b54:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003f61 	.word	0x08003f61
 8003b64:	08003f61 	.word	0x08003f61
 8003b68:	08003f61 	.word	0x08003f61
 8003b6c:	08003b99 	.word	0x08003b99
 8003b70:	08003f61 	.word	0x08003f61
 8003b74:	08003f61 	.word	0x08003f61
 8003b78:	08003f61 	.word	0x08003f61
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003f61 	.word	0x08003f61
 8003b84:	08003f61 	.word	0x08003f61
 8003b88:	08003f61 	.word	0x08003f61
 8003b8c:	08003d91 	.word	0x08003d91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4bb9      	ldr	r3, [pc, #740]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003b96:	e1e7      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b98:	4bb8      	ldr	r3, [pc, #736]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b9e:	e1e3      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4bb4      	ldr	r3, [pc, #720]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bac:	4bb1      	ldr	r3, [pc, #708]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d071      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb8:	4bae      	ldr	r3, [pc, #696]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bde:	4622      	mov	r2, r4
 8003be0:	462b      	mov	r3, r5
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	0159      	lsls	r1, r3, #5
 8003bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf0:	0150      	lsls	r0, r2, #5
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	1a51      	subs	r1, r2, r1
 8003bfa:	6439      	str	r1, [r7, #64]	@ 0x40
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8003c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c10:	4649      	mov	r1, r9
 8003c12:	018b      	lsls	r3, r1, #6
 8003c14:	4641      	mov	r1, r8
 8003c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	018a      	lsls	r2, r1, #6
 8003c1e:	4641      	mov	r1, r8
 8003c20:	1a51      	subs	r1, r2, r1
 8003c22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c24:	4649      	mov	r1, r9
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c38:	4649      	mov	r1, r9
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4641      	mov	r1, r8
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c52:	462b      	mov	r3, r5
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c68:	4629      	mov	r1, r5
 8003c6a:	024b      	lsls	r3, r1, #9
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c72:	4621      	mov	r1, r4
 8003c74:	024a      	lsls	r2, r1, #9
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c8c:	f7fd f81c 	bl	8000cc8 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c9a:	e067      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b75      	ldr	r3, [pc, #468]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ca8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	1a51      	subs	r1, r2, r1
 8003cda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	018b      	lsls	r3, r1, #6
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	018a      	lsls	r2, r1, #6
 8003cfe:	4641      	mov	r1, r8
 8003d00:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d04:	4649      	mov	r1, r9
 8003d06:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d1e:	4692      	mov	sl, r2
 8003d20:	469b      	mov	fp, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	eb1a 0303 	adds.w	r3, sl, r3
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d54:	2200      	movs	r2, #0
 8003d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d58:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d5e:	f7fc ffb3 	bl	8000cc8 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4613      	mov	r3, r2
 8003d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d6c:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d8e:	e0eb      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4b38      	ldr	r3, [pc, #224]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9c:	4b35      	ldr	r3, [pc, #212]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d06b      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4b32      	ldr	r3, [pc, #200]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	f04f 0000 	mov.w	r0, #0
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	0159      	lsls	r1, r3, #5
 8003dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd6:	0150      	lsls	r0, r2, #5
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4621      	mov	r1, r4
 8003dde:	1a51      	subs	r1, r2, r1
 8003de0:	61b9      	str	r1, [r7, #24]
 8003de2:	4629      	mov	r1, r5
 8003de4:	eb63 0301 	sbc.w	r3, r3, r1
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003df6:	4659      	mov	r1, fp
 8003df8:	018b      	lsls	r3, r1, #6
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e00:	4651      	mov	r1, sl
 8003e02:	018a      	lsls	r2, r1, #6
 8003e04:	4651      	mov	r1, sl
 8003e06:	ebb2 0801 	subs.w	r8, r2, r1
 8003e0a:	4659      	mov	r1, fp
 8003e0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e24:	4690      	mov	r8, r2
 8003e26:	4699      	mov	r9, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	eb18 0303 	adds.w	r3, r8, r3
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	462b      	mov	r3, r5
 8003e32:	eb49 0303 	adc.w	r3, r9, r3
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e44:	4629      	mov	r1, r5
 8003e46:	024b      	lsls	r3, r1, #9
 8003e48:	4621      	mov	r1, r4
 8003e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e4e:	4621      	mov	r1, r4
 8003e50:	024a      	lsls	r2, r1, #9
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e64:	f7fc ff30 	bl	8000cc8 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e72:	e065      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x420>
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e80:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	2200      	movs	r2, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e92:	2300      	movs	r3, #0
 8003e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	0159      	lsls	r1, r3, #5
 8003ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eac:	0150      	lsls	r0, r2, #5
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	1a51      	subs	r1, r2, r1
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	4649      	mov	r1, r9
 8003eba:	eb63 0301 	sbc.w	r3, r3, r1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	018b      	lsls	r3, r1, #6
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	018a      	lsls	r2, r1, #6
 8003eda:	4651      	mov	r1, sl
 8003edc:	1a54      	subs	r4, r2, r1
 8003ede:	4659      	mov	r1, fp
 8003ee0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	00eb      	lsls	r3, r5, #3
 8003eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef2:	00e2      	lsls	r2, r4, #3
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	18e3      	adds	r3, r4, r3
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	464b      	mov	r3, r9
 8003f00:	eb45 0303 	adc.w	r3, r5, r3
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f12:	4629      	mov	r1, r5
 8003f14:	028b      	lsls	r3, r1, #10
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	028a      	lsls	r2, r1, #10
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f28:	2200      	movs	r2, #0
 8003f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f32:	f7fc fec9 	bl	8000cc8 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0f1b      	lsrs	r3, r3, #28
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f5e:	e003      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	37b8      	adds	r7, #184	@ 0xb8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	00f42400 	.word	0x00f42400

08003f80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e28d      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8083 	beq.w	80040a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa0:	4b94      	ldr	r3, [pc, #592]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d019      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fac:	4b91      	ldr	r3, [pc, #580]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d112      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd2:	4b88      	ldr	r3, [pc, #544]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	4b84      	ldr	r3, [pc, #528]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05b      	beq.n	80040a4 <HAL_RCC_OscConfig+0x124>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d157      	bne.n	80040a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e25a      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004000:	d106      	bne.n	8004010 <HAL_RCC_OscConfig+0x90>
 8004002:	4b7c      	ldr	r3, [pc, #496]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7b      	ldr	r2, [pc, #492]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e01d      	b.n	800404c <HAL_RCC_OscConfig+0xcc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0xb4>
 800401a:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a75      	ldr	r2, [pc, #468]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b73      	ldr	r3, [pc, #460]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a72      	ldr	r2, [pc, #456]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0xcc>
 8004034:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a6e      	ldr	r2, [pc, #440]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 800403a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b6c      	ldr	r3, [pc, #432]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a6b      	ldr	r2, [pc, #428]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800404a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe f806 	bl	8002064 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7fe f802 	bl	8002064 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	@ 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e21f      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0xdc>
 800407a:	e014      	b.n	80040a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd fff2 	bl	8002064 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004084:	f7fd ffee 	bl	8002064 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	@ 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e20b      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	4b57      	ldr	r3, [pc, #348]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x104>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d06f      	beq.n	8004192 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040b2:	4b50      	ldr	r3, [pc, #320]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d017      	beq.n	80040ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040be:	4b4d      	ldr	r3, [pc, #308]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d105      	bne.n	80040d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ca:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b44      	ldr	r3, [pc, #272]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x186>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1d3      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4937      	ldr	r1, [pc, #220]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e03a      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <HAL_RCC_OscConfig+0x278>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fd ff9b 	bl	8002064 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004132:	f7fd ff97 	bl	8002064 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1b4      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	4b2b      	ldr	r3, [pc, #172]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4925      	ldr	r1, [pc, #148]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <HAL_RCC_OscConfig+0x278>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd ff7a 	bl	8002064 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004174:	f7fd ff76 	bl	8002064 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e193      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d036      	beq.n	800420c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a6:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fd ff5a 	bl	8002064 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fd ff56 	bl	8002064 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e173      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80041c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x234>
 80041d2:	e01b      	b.n	800420c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <HAL_RCC_OscConfig+0x27c>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fd ff43 	bl	8002064 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	e00e      	b.n	8004200 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fd ff3f 	bl	8002064 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d907      	bls.n	8004200 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e15c      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	42470000 	.word	0x42470000
 80041fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	4b8a      	ldr	r3, [pc, #552]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ea      	bne.n	80041e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8097 	beq.w	8004348 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b83      	ldr	r3, [pc, #524]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	4b7f      	ldr	r3, [pc, #508]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a7e      	ldr	r2, [pc, #504]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b7c      	ldr	r3, [pc, #496]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <HAL_RCC_OscConfig+0x4b0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004256:	4b76      	ldr	r3, [pc, #472]	@ (8004430 <HAL_RCC_OscConfig+0x4b0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a75      	ldr	r2, [pc, #468]	@ (8004430 <HAL_RCC_OscConfig+0x4b0>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7fd feff 	bl	8002064 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fd fefb 	bl	8002064 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e118      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	4b6c      	ldr	r3, [pc, #432]	@ (8004430 <HAL_RCC_OscConfig+0x4b0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x31e>
 8004290:	4b66      	ldr	r3, [pc, #408]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	4a65      	ldr	r2, [pc, #404]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	@ 0x70
 800429c:	e01c      	b.n	80042d8 <HAL_RCC_OscConfig+0x358>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x340>
 80042a6:	4b61      	ldr	r3, [pc, #388]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	4a60      	ldr	r2, [pc, #384]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b2:	4b5e      	ldr	r3, [pc, #376]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a5d      	ldr	r2, [pc, #372]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0x358>
 80042c0:	4b5a      	ldr	r3, [pc, #360]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	4a59      	ldr	r2, [pc, #356]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80042cc:	4b57      	ldr	r3, [pc, #348]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a56      	ldr	r2, [pc, #344]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	f023 0304 	bic.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd fec0 	bl	8002064 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fd febc 	bl	8002064 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0d7      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fe:	4b4b      	ldr	r3, [pc, #300]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ee      	beq.n	80042e8 <HAL_RCC_OscConfig+0x368>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd feaa 	bl	8002064 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004312:	e00a      	b.n	800432a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fd fea6 	bl	8002064 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0c1      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	4b40      	ldr	r3, [pc, #256]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ee      	bne.n	8004314 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b3b      	ldr	r3, [pc, #236]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80ad 	beq.w	80044ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004352:	4b36      	ldr	r3, [pc, #216]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b08      	cmp	r3, #8
 800435c:	d060      	beq.n	8004420 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d145      	bne.n	80043f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b33      	ldr	r3, [pc, #204]	@ (8004434 <HAL_RCC_OscConfig+0x4b4>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd fe7a 	bl	8002064 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fe76 	bl	8002064 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e093      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b29      	ldr	r3, [pc, #164]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	491b      	ldr	r1, [pc, #108]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4b4>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fd fe4b 	bl	8002064 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fd fe47 	bl	8002064 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e064      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x452>
 80043f0:	e05c      	b.n	80044ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <HAL_RCC_OscConfig+0x4b4>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fe34 	bl	8002064 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fd fe30 	bl	8002064 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e04d      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_RCC_OscConfig+0x4ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x480>
 800441e:	e045      	b.n	80044ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e040      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004438:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <HAL_RCC_OscConfig+0x538>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d030      	beq.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d129      	bne.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d122      	bne.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800446e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	4293      	cmp	r3, r2
 8004472:	d119      	bne.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	3b01      	subs	r3, #1
 8004482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d10f      	bne.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e041      	b.n	8004552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f839 	bl	800455a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f9c0 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d001      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e04e      	b.n	8004626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a23      	ldr	r2, [pc, #140]	@ (8004634 <HAL_TIM_Base_Start_IT+0xc4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d01d      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004638 <HAL_TIM_Base_Start_IT+0xc8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <HAL_TIM_Base_Start_IT+0xcc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <HAL_TIM_Base_Start_IT+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <HAL_TIM_Base_Start_IT+0xd4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	@ (8004648 <HAL_TIM_Base_Start_IT+0xd8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_TIM_Base_Start_IT+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d111      	bne.n	8004614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d010      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004612:	e007      	b.n	8004624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0202 	mvn.w	r2, #2
 8004684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8d2 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8c4 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8d5 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0204 	mvn.w	r2, #4
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8ac 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f89e 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8af 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d020      	beq.n	800474c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0208 	mvn.w	r2, #8
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f886 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f878 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f889 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d020      	beq.n	8004798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01b      	beq.n	8004798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0210 	mvn.w	r2, #16
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2208      	movs	r2, #8
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f860 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f852 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f863 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0201 	mvn.w	r2, #1
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd f9c4 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f906 	bl	80049ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f834 	bl	800486c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0220 	mvn.w	r2, #32
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8d8 	bl	80049d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a46      	ldr	r2, [pc, #280]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a43      	ldr	r2, [pc, #268]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a42      	ldr	r2, [pc, #264]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a41      	ldr	r2, [pc, #260]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a32      	ldr	r2, [pc, #200]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a31      	ldr	r2, [pc, #196]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a30      	ldr	r2, [pc, #192]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <TIM_Base_SetConfig+0x140>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <TIM_Base_SetConfig+0x144>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <TIM_Base_SetConfig+0x148>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <TIM_Base_SetConfig+0x14c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <TIM_Base_SetConfig+0x150>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a29      	ldr	r2, [pc, #164]	@ (80049d4 <TIM_Base_SetConfig+0x154>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	611a      	str	r2, [r3, #16]
  }
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	40001800 	.word	0x40001800
 80049d0:	40001c00 	.word	0x40001c00
 80049d4:	40002000 	.word	0x40002000

080049d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e042      	b.n	8004a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fa74 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	@ 0x24
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f973 	bl	8004d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	@ 0x28
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d175      	bne.n	8004bac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Transmit+0x2c>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e06e      	b.n	8004bae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2221      	movs	r2, #33	@ 0x21
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fac1 	bl	8002064 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af8:	d108      	bne.n	8004b0c <HAL_UART_Transmit+0x6c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b14:	e02e      	b.n	8004b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2180      	movs	r1, #128	@ 0x80
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f848 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e03a      	b.n	8004bae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	3302      	adds	r3, #2
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	e007      	b.n	8004b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	3301      	adds	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1cb      	bne.n	8004b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2140      	movs	r1, #64	@ 0x40
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f814 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e006      	b.n	8004bae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b086      	sub	sp, #24
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e03b      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d037      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fd fa48 	bl	8002064 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e03a      	b.n	8004c60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d023      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b80      	cmp	r3, #128	@ 0x80
 8004bfc:	d020      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d01d      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d116      	bne.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f81d 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2208      	movs	r2, #8
 8004c32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e00f      	b.n	8004c60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d0b4      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b095      	sub	sp, #84	@ 0x54
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c90:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d119      	bne.n	8004d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d00:	61ba      	str	r2, [r7, #24]
 8004d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d22:	bf00      	nop
 8004d24:	3754      	adds	r7, #84	@ 0x54
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b0c0      	sub	sp, #256	@ 0x100
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	ea40 0301 	orr.w	r3, r0, r1
 8004d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d88:	f021 010c 	bic.w	r1, r1, #12
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d96:	430b      	orrs	r3, r1
 8004d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	6999      	ldr	r1, [r3, #24]
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	ea40 0301 	orr.w	r3, r0, r1
 8004db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004ffc <UART_SetConfig+0x2cc>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d005      	beq.n	8004dd0 <UART_SetConfig+0xa0>
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b8d      	ldr	r3, [pc, #564]	@ (8005000 <UART_SetConfig+0x2d0>)
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d104      	bne.n	8004dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fe fe60 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dd8:	e003      	b.n	8004de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fe fe47 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004dde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dec:	f040 810c 	bne.w	8005008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	1891      	adds	r1, r2, r2
 8004e08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e0a:	415b      	adcs	r3, r3
 8004e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e12:	4621      	mov	r1, r4
 8004e14:	eb12 0801 	adds.w	r8, r2, r1
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb43 0901 	adc.w	r9, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb18 0303 	adds.w	r3, r8, r3
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e40:	462b      	mov	r3, r5
 8004e42:	eb49 0303 	adc.w	r3, r9, r3
 8004e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e5e:	460b      	mov	r3, r1
 8004e60:	18db      	adds	r3, r3, r3
 8004e62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e64:	4613      	mov	r3, r2
 8004e66:	eb42 0303 	adc.w	r3, r2, r3
 8004e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e74:	f7fb ff28 	bl	8000cc8 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b61      	ldr	r3, [pc, #388]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011c      	lsls	r4, r3, #4
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec8:	4692      	mov	sl, r2
 8004eca:	469b      	mov	fp, r3
 8004ecc:	4643      	mov	r3, r8
 8004ece:	eb1a 0303 	adds.w	r3, sl, r3
 8004ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8004edc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	18db      	adds	r3, r3, r3
 8004ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004efa:	4613      	mov	r3, r2
 8004efc:	eb42 0303 	adc.w	r3, r2, r3
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f0a:	f7fb fedd 	bl	8000cc8 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	4b3b      	ldr	r3, [pc, #236]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004f16:	fba3 2301 	umull	r2, r3, r3, r1
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	2264      	movs	r2, #100	@ 0x64
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	1acb      	subs	r3, r1, r3
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f2a:	4b36      	ldr	r3, [pc, #216]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f38:	441c      	add	r4, r3
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f54:	415b      	adcs	r3, r3
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f90:	464b      	mov	r3, r9
 8004f92:	460a      	mov	r2, r1
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	18db      	adds	r3, r3, r3
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	eb42 0303 	adc.w	r3, r2, r3
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fc6:	f7fb fe7f 	bl	8000cc8 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	@ 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	3332      	adds	r3, #50	@ 0x32
 8004fe2:	4a08      	ldr	r2, [pc, #32]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 0207 	and.w	r2, r3, #7
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4422      	add	r2, r4
 8004ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff8:	e106      	b.n	8005208 <UART_SetConfig+0x4d8>
 8004ffa:	bf00      	nop
 8004ffc:	40011000 	.word	0x40011000
 8005000:	40011400 	.word	0x40011400
 8005004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005012:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800501a:	4642      	mov	r2, r8
 800501c:	464b      	mov	r3, r9
 800501e:	1891      	adds	r1, r2, r2
 8005020:	6239      	str	r1, [r7, #32]
 8005022:	415b      	adcs	r3, r3
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
 8005026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800502a:	4641      	mov	r1, r8
 800502c:	1854      	adds	r4, r2, r1
 800502e:	4649      	mov	r1, r9
 8005030:	eb43 0501 	adc.w	r5, r3, r1
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	00eb      	lsls	r3, r5, #3
 800503e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005042:	00e2      	lsls	r2, r4, #3
 8005044:	4614      	mov	r4, r2
 8005046:	461d      	mov	r5, r3
 8005048:	4643      	mov	r3, r8
 800504a:	18e3      	adds	r3, r4, r3
 800504c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005050:	464b      	mov	r3, r9
 8005052:	eb45 0303 	adc.w	r3, r5, r3
 8005056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005066:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005076:	4629      	mov	r1, r5
 8005078:	008b      	lsls	r3, r1, #2
 800507a:	4621      	mov	r1, r4
 800507c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005080:	4621      	mov	r1, r4
 8005082:	008a      	lsls	r2, r1, #2
 8005084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005088:	f7fb fe1e 	bl	8000cc8 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4b60      	ldr	r3, [pc, #384]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005092:	fba3 2302 	umull	r2, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	011c      	lsls	r4, r3, #4
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	61b9      	str	r1, [r7, #24]
 80050b4:	415b      	adcs	r3, r3
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050bc:	4641      	mov	r1, r8
 80050be:	1851      	adds	r1, r2, r1
 80050c0:	6139      	str	r1, [r7, #16]
 80050c2:	4649      	mov	r1, r9
 80050c4:	414b      	adcs	r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	00cb      	lsls	r3, r1, #3
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050de:	4651      	mov	r1, sl
 80050e0:	00ca      	lsls	r2, r1, #3
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	4642      	mov	r2, r8
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050f0:	464b      	mov	r3, r9
 80050f2:	460a      	mov	r2, r1
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005106:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005114:	4649      	mov	r1, r9
 8005116:	008b      	lsls	r3, r1, #2
 8005118:	4641      	mov	r1, r8
 800511a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511e:	4641      	mov	r1, r8
 8005120:	008a      	lsls	r2, r1, #2
 8005122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005126:	f7fb fdcf 	bl	8000cc8 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4611      	mov	r1, r2
 8005130:	4b38      	ldr	r3, [pc, #224]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2301 	umull	r2, r3, r3, r1
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2264      	movs	r2, #100	@ 0x64
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	1acb      	subs	r3, r1, r3
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	3332      	adds	r3, #50	@ 0x32
 8005144:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005150:	441c      	add	r4, r3
 8005152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005156:	2200      	movs	r2, #0
 8005158:	673b      	str	r3, [r7, #112]	@ 0x70
 800515a:	677a      	str	r2, [r7, #116]	@ 0x74
 800515c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	415b      	adcs	r3, r3
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a2:	464b      	mov	r3, r9
 80051a4:	460a      	mov	r2, r1
 80051a6:	eb42 0303 	adc.w	r3, r2, r3
 80051aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051d6:	f7fb fd77 	bl	8000cc8 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <UART_SetConfig+0x4e4>)
 80051e0:	fba3 1302 	umull	r1, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	2164      	movs	r1, #100	@ 0x64
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	3332      	adds	r3, #50	@ 0x32
 80051f2:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <UART_SetConfig+0x4e4>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	f003 020f 	and.w	r2, r3, #15
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4422      	add	r2, r4
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005214:	51eb851f 	.word	0x51eb851f

08005218 <__NVIC_SetPriority>:
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	6039      	str	r1, [r7, #0]
 8005222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db0a      	blt.n	8005242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	490c      	ldr	r1, [pc, #48]	@ (8005264 <__NVIC_SetPriority+0x4c>)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	440b      	add	r3, r1
 800523c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005240:	e00a      	b.n	8005258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	4908      	ldr	r1, [pc, #32]	@ (8005268 <__NVIC_SetPriority+0x50>)
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3b04      	subs	r3, #4
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	440b      	add	r3, r1
 8005256:	761a      	strb	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000e100 	.word	0xe000e100
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <SysTick_Handler+0x1c>)
 8005272:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005274:	f001 fd18 	bl	8006ca8 <xTaskGetSchedulerState>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800527e:	f002 fb13 	bl	80078a8 <xPortSysTickHandler>
  }
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	e000e010 	.word	0xe000e010

0800528c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005290:	2100      	movs	r1, #0
 8005292:	f06f 0004 	mvn.w	r0, #4
 8005296:	f7ff ffbf 	bl	8005218 <__NVIC_SetPriority>
#endif
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a6:	f3ef 8305 	mrs	r3, IPSR
 80052aa:	603b      	str	r3, [r7, #0]
  return(result);
 80052ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052b2:	f06f 0305 	mvn.w	r3, #5
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	e00c      	b.n	80052d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052ba:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <osKernelInitialize+0x44>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <osKernelInitialize+0x44>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	e002      	b.n	80052d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
 80052d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052d4:	687b      	ldr	r3, [r7, #4]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000038c 	.word	0x2000038c

080052e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ee:	f3ef 8305 	mrs	r3, IPSR
 80052f2:	603b      	str	r3, [r7, #0]
  return(result);
 80052f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <osKernelStart+0x1a>
    stat = osErrorISR;
 80052fa:	f06f 0305 	mvn.w	r3, #5
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	e010      	b.n	8005324 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005302:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <osKernelStart+0x48>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d109      	bne.n	800531e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800530a:	f7ff ffbf 	bl	800528c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800530e:	4b08      	ldr	r3, [pc, #32]	@ (8005330 <osKernelStart+0x48>)
 8005310:	2202      	movs	r2, #2
 8005312:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005314:	f001 f87a 	bl	800640c <vTaskStartScheduler>
      stat = osOK;
 8005318:	2300      	movs	r3, #0
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e002      	b.n	8005324 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295
 8005322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005324:	687b      	ldr	r3, [r7, #4]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	2000038c 	.word	0x2000038c

08005334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	@ 0x38
 8005338:	af04      	add	r7, sp, #16
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005344:	f3ef 8305 	mrs	r3, IPSR
 8005348:	617b      	str	r3, [r7, #20]
  return(result);
 800534a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800534c:	2b00      	cmp	r3, #0
 800534e:	d17e      	bne.n	800544e <osThreadNew+0x11a>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d07b      	beq.n	800544e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800535a:	2318      	movs	r3, #24
 800535c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d045      	beq.n	80053fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <osThreadNew+0x48>
        name = attr->name;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <osThreadNew+0x6e>
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b38      	cmp	r3, #56	@ 0x38
 8005394:	d805      	bhi.n	80053a2 <osThreadNew+0x6e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <osThreadNew+0x72>
        return (NULL);
 80053a2:	2300      	movs	r3, #0
 80053a4:	e054      	b.n	8005450 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <osThreadNew+0xa8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80053c4:	d90a      	bls.n	80053dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <osThreadNew+0xa8>
        mem = 1;
 80053d6:	2301      	movs	r3, #1
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	e010      	b.n	80053fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10c      	bne.n	80053fe <osThreadNew+0xca>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d108      	bne.n	80053fe <osThreadNew+0xca>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <osThreadNew+0xca>
          mem = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e001      	b.n	80053fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800540c:	9202      	str	r2, [sp, #8]
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 fe1a 	bl	8006054 <xTaskCreateStatic>
 8005420:	4603      	mov	r3, r0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e013      	b.n	800544e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d110      	bne.n	800544e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	b29a      	uxth	r2, r3
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fe68 	bl	8006114 <xTaskCreate>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d001      	beq.n	800544e <osThreadNew+0x11a>
            hTask = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800544e:	693b      	ldr	r3, [r7, #16]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3728      	adds	r7, #40	@ 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005460:	f3ef 8305 	mrs	r3, IPSR
 8005464:	60bb      	str	r3, [r7, #8]
  return(result);
 8005466:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <osDelay+0x1c>
    stat = osErrorISR;
 800546c:	f06f 0305 	mvn.w	r3, #5
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e007      	b.n	8005484 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <osDelay+0x2c>
      vTaskDelay(ticks);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 ff8e 	bl	80063a0 <vTaskDelay>
    }
  }

  return (stat);
 8005484:	68fb      	ldr	r3, [r7, #12]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a07      	ldr	r2, [pc, #28]	@ (80054bc <vApplicationGetIdleTaskMemory+0x2c>)
 80054a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a06      	ldr	r2, [pc, #24]	@ (80054c0 <vApplicationGetIdleTaskMemory+0x30>)
 80054a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	@ 0x80
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000390 	.word	0x20000390
 80054c0:	200003ec 	.word	0x200003ec

080054c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a07      	ldr	r2, [pc, #28]	@ (80054f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80054d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a06      	ldr	r2, [pc, #24]	@ (80054f4 <vApplicationGetTimerTaskMemory+0x30>)
 80054da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	200005ec 	.word	0x200005ec
 80054f4:	20000648 	.word	0x20000648

080054f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f103 0208 	add.w	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f103 0208 	add.w	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f103 0208 	add.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d103      	bne.n	80055ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e00c      	b.n	80055d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3308      	adds	r3, #8
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e002      	b.n	80055c8 <vListInsert+0x2e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d2f6      	bcs.n	80055c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6892      	ldr	r2, [r2, #8]
 8005622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6852      	ldr	r2, [r2, #4]
 800562c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d103      	bne.n	8005640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800568c:	f002 f87c 	bl	8007788 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	68f9      	ldr	r1, [r7, #12]
 800569a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	3b01      	subs	r3, #1
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	441a      	add	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	22ff      	movs	r2, #255	@ 0xff
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	22ff      	movs	r2, #255	@ 0xff
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d114      	bne.n	800570c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01a      	beq.n	8005720 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3310      	adds	r3, #16
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f91a 	bl	8006928 <xTaskRemoveFromEventList>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d012      	beq.n	8005720 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <xQueueGenericReset+0xd0>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	e009      	b.n	8005720 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3310      	adds	r3, #16
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fef1 	bl	80054f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3324      	adds	r3, #36	@ 0x24
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff feec 	bl	80054f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005720:	f002 f864 	bl	80077ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005724:	2301      	movs	r3, #1
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08e      	sub	sp, #56	@ 0x38
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <xQueueGenericCreateStatic+0x56>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <xQueueGenericCreateStatic+0x5a>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericCreateStatic+0x5c>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	623b      	str	r3, [r7, #32]
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <xQueueGenericCreateStatic+0x84>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <xQueueGenericCreateStatic+0x88>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <xQueueGenericCreateStatic+0x8a>
 80057bc:	2300      	movs	r3, #0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	61fb      	str	r3, [r7, #28]
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	e7fd      	b.n	80057d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057da:	2350      	movs	r3, #80	@ 0x50
 80057dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b50      	cmp	r3, #80	@ 0x50
 80057e2:	d00b      	beq.n	80057fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005810:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f805 	bl	800582e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005826:	4618      	mov	r0, r3
 8005828:	3730      	adds	r7, #48	@ 0x30
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e002      	b.n	8005850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800585c:	2101      	movs	r1, #1
 800585e:	69b8      	ldr	r0, [r7, #24]
 8005860:	f7ff fefe 	bl	8005660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08e      	sub	sp, #56	@ 0x38
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005882:	2300      	movs	r3, #0
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <xQueueGenericSend+0x34>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x42>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <xQueueGenericSend+0x46>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueGenericSend+0x48>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <xQueueGenericSend+0x64>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <xQueueGenericSend+0x72>
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <xQueueGenericSend+0x76>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericSend+0x78>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <xQueueGenericSend+0x94>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	623b      	str	r3, [r7, #32]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005908:	f001 f9ce 	bl	8006ca8 <xTaskGetSchedulerState>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <xQueueGenericSend+0xa4>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <xQueueGenericSend+0xa8>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <xQueueGenericSend+0xaa>
 800591c:	2300      	movs	r3, #0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <xQueueGenericSend+0xc6>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	61fb      	str	r3, [r7, #28]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800593a:	f001 ff25 	bl	8007788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <xQueueGenericSend+0xdc>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d129      	bne.n	80059a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005956:	f000 fa0f 	bl	8005d78 <prvCopyDataToQueue>
 800595a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	3324      	adds	r3, #36	@ 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ffdd 	bl	8006928 <xTaskRemoveFromEventList>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d013      	beq.n	800599c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005974:	4b3f      	ldr	r3, [pc, #252]	@ (8005a74 <xQueueGenericSend+0x200>)
 8005976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	e00a      	b.n	800599c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800598c:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <xQueueGenericSend+0x200>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800599c:	f001 ff26 	bl	80077ec <vPortExitCritical>
				return pdPASS;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e063      	b.n	8005a6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059aa:	f001 ff1f 	bl	80077ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e05c      	b.n	8005a6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 f817 	bl	80069f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059c6:	f001 ff11 	bl	80077ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ca:	f000 fd87 	bl	80064dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ce:	f001 fedb 	bl	8007788 <vPortEnterCritical>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d103      	bne.n	80059e8 <xQueueGenericSend+0x174>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059ee:	b25b      	sxtb	r3, r3
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSend+0x18a>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059fe:	f001 fef5 	bl	80077ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a02:	1d3a      	adds	r2, r7, #4
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 f806 	bl	8006a1c <xTaskCheckForTimeOut>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d124      	bne.n	8005a60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a18:	f000 faa6 	bl	8005f68 <prvIsQueueFull>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	3310      	adds	r3, #16
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 ff2a 	bl	8006884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a32:	f000 fa31 	bl	8005e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a36:	f000 fd5f 	bl	80064f8 <xTaskResumeAll>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f af7c 	bne.w	800593a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a42:	4b0c      	ldr	r3, [pc, #48]	@ (8005a74 <xQueueGenericSend+0x200>)
 8005a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	e772      	b.n	800593a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a56:	f000 fa1f 	bl	8005e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5a:	f000 fd4d 	bl	80064f8 <xTaskResumeAll>
 8005a5e:	e76c      	b.n	800593a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a62:	f000 fa19 	bl	8005e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a66:	f000 fd47 	bl	80064f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3738      	adds	r7, #56	@ 0x38
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b090      	sub	sp, #64	@ 0x40
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <xQueueGenericSendFromISR+0x3e>
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <xQueueGenericSendFromISR+0x42>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <xQueueGenericSendFromISR+0x44>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	e7fd      	b.n	8005ad4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSendFromISR+0x6e>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <xQueueGenericSendFromISR+0x72>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericSendFromISR+0x74>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b08:	f001 ff1e 	bl	8007948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	61fa      	str	r2, [r7, #28]
 8005b22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <xQueueGenericSendFromISR+0xc2>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d12f      	bne.n	8005b9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b50:	f000 f912 	bl	8005d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d112      	bne.n	8005b84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	3324      	adds	r3, #36	@ 0x24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fedc 	bl	8006928 <xTaskRemoveFromEventList>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e007      	b.n	8005b94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b88:	3301      	adds	r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	b25a      	sxtb	r2, r3
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b94:	2301      	movs	r3, #1
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005b98:	e001      	b.n	8005b9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3740      	adds	r7, #64	@ 0x40
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	@ 0x30
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <xQueueReceive+0x32>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	623b      	str	r3, [r7, #32]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <xQueueReceive+0x40>
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <xQueueReceive+0x44>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <xQueueReceive+0x46>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <xQueueReceive+0x62>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61fb      	str	r3, [r7, #28]
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	e7fd      	b.n	8005c12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c16:	f001 f847 	bl	8006ca8 <xTaskGetSchedulerState>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <xQueueReceive+0x72>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <xQueueReceive+0x76>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <xQueueReceive+0x78>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <xQueueReceive+0x94>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	61bb      	str	r3, [r7, #24]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c48:	f001 fd9e 	bl	8007788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01f      	beq.n	8005c98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c5c:	f000 f8f6 	bl	8005e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	1e5a      	subs	r2, r3, #1
 8005c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00f      	beq.n	8005c90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	3310      	adds	r3, #16
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fe57 	bl	8006928 <xTaskRemoveFromEventList>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c80:	4b3c      	ldr	r3, [pc, #240]	@ (8005d74 <xQueueReceive+0x1c0>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c90:	f001 fdac 	bl	80077ec <vPortExitCritical>
				return pdPASS;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e069      	b.n	8005d6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c9e:	f001 fda5 	bl	80077ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e062      	b.n	8005d6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fe9d 	bl	80069f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cba:	f001 fd97 	bl	80077ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cbe:	f000 fc0d 	bl	80064dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cc2:	f001 fd61 	bl	8007788 <vPortEnterCritical>
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d103      	bne.n	8005cdc <xQueueReceive+0x128>
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <xQueueReceive+0x13e>
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf2:	f001 fd7b 	bl	80077ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cf6:	1d3a      	adds	r2, r7, #4
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fe8c 	bl	8006a1c <xTaskCheckForTimeOut>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d123      	bne.n	8005d52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d0c:	f000 f916 	bl	8005f3c <prvIsQueueEmpty>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d017      	beq.n	8005d46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d18:	3324      	adds	r3, #36	@ 0x24
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fdb0 	bl	8006884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d26:	f000 f8b7 	bl	8005e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d2a:	f000 fbe5 	bl	80064f8 <xTaskResumeAll>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d189      	bne.n	8005c48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d34:	4b0f      	ldr	r3, [pc, #60]	@ (8005d74 <xQueueReceive+0x1c0>)
 8005d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	e780      	b.n	8005c48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d48:	f000 f8a6 	bl	8005e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d4c:	f000 fbd4 	bl	80064f8 <xTaskResumeAll>
 8005d50:	e77a      	b.n	8005c48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d54:	f000 f8a0 	bl	8005e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d58:	f000 fbce 	bl	80064f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d5e:	f000 f8ed 	bl	8005f3c <prvIsQueueEmpty>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f43f af6f 	beq.w	8005c48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3730      	adds	r7, #48	@ 0x30
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d14d      	bne.n	8005e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ff9e 	bl	8006ce4 <xTaskPriorityDisinherit>
 8005da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	e043      	b.n	8005e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d119      	bne.n	8005dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6858      	ldr	r0, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	f003 f813 	bl	8008dee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d32b      	bcc.n	8005e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	e026      	b.n	8005e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68d8      	ldr	r0, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	461a      	mov	r2, r3
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	f002 fff9 	bl	8008dee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	425b      	negs	r3, r3
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d207      	bcs.n	8005e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	425b      	negs	r3, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d105      	bne.n	8005e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e42:	697b      	ldr	r3, [r7, #20]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d303      	bcc.n	8005e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68d9      	ldr	r1, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f002 ffaf 	bl	8008dee <memcpy>
	}
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea0:	f001 fc72 	bl	8007788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eac:	e011      	b.n	8005ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3324      	adds	r3, #36	@ 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fd34 	bl	8006928 <xTaskRemoveFromEventList>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ec6:	f000 fe0d 	bl	8006ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dce9      	bgt.n	8005eae <prvUnlockQueue+0x16>
 8005eda:	e000      	b.n	8005ede <prvUnlockQueue+0x46>
					break;
 8005edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	22ff      	movs	r2, #255	@ 0xff
 8005ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ee6:	f001 fc81 	bl	80077ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eea:	f001 fc4d 	bl	8007788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef6:	e011      	b.n	8005f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3310      	adds	r3, #16
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fd0f 	bl	8006928 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f10:	f000 fde8 	bl	8006ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dce9      	bgt.n	8005ef8 <prvUnlockQueue+0x60>
 8005f24:	e000      	b.n	8005f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	22ff      	movs	r2, #255	@ 0xff
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f30:	f001 fc5c 	bl	80077ec <vPortExitCritical>
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f44:	f001 fc20 	bl	8007788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e001      	b.n	8005f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 fc47 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f70:	f001 fc0a 	bl	8007788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d102      	bne.n	8005f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8a:	f001 fc2f 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e014      	b.n	8005fd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8005fe8 <vQueueAddToRegistry+0x50>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fb4:	490c      	ldr	r1, [pc, #48]	@ (8005fe8 <vQueueAddToRegistry+0x50>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <vQueueAddToRegistry+0x50>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fca:	e006      	b.n	8005fda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b07      	cmp	r3, #7
 8005fd6:	d9e7      	bls.n	8005fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000a48 	.word	0x20000a48

08005fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ffc:	f001 fbc4 	bl	8007788 <vPortEnterCritical>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006006:	b25b      	sxtb	r3, r3
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d103      	bne.n	8006016 <vQueueWaitForMessageRestricted+0x2a>
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800601c:	b25b      	sxtb	r3, r3
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d103      	bne.n	800602c <vQueueWaitForMessageRestricted+0x40>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800602c:	f001 fbde 	bl	80077ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3324      	adds	r3, #36	@ 0x24
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fc45 	bl	80068d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006046:	6978      	ldr	r0, [r7, #20]
 8006048:	f7ff ff26 	bl	8005e98 <prvUnlockQueue>
	}
 800604c:	bf00      	nop
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	@ 0x38
 8006058:	af04      	add	r7, sp, #16
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	623b      	str	r3, [r7, #32]
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10b      	bne.n	800609e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	61fb      	str	r3, [r7, #28]
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	e7fd      	b.n	800609a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800609e:	235c      	movs	r3, #92	@ 0x5c
 80060a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80060a6:	d00b      	beq.n	80060c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	61bb      	str	r3, [r7, #24]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01e      	beq.n	8006106 <xTaskCreateStatic+0xb2>
 80060c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01b      	beq.n	8006106 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060e0:	2300      	movs	r3, #0
 80060e2:	9303      	str	r3, [sp, #12]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	f107 0314 	add.w	r3, r7, #20
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f850 	bl	800619e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006100:	f000 f8de 	bl	80062c0 <prvAddNewTaskToReadyList>
 8006104:	e001      	b.n	800610a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800610a:	697b      	ldr	r3, [r7, #20]
	}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	@ 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08c      	sub	sp, #48	@ 0x30
 8006118:	af04      	add	r7, sp, #16
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fc4f 	bl	80079cc <pvPortMalloc>
 800612e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006136:	205c      	movs	r0, #92	@ 0x5c
 8006138:	f001 fc48 	bl	80079cc <pvPortMalloc>
 800613c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	631a      	str	r2, [r3, #48]	@ 0x30
 800614a:	e005      	b.n	8006158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800614c:	6978      	ldr	r0, [r7, #20]
 800614e:	f001 fd0b 	bl	8007b68 <vPortFree>
 8006152:	e001      	b.n	8006158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d017      	beq.n	800618e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	2300      	movs	r3, #0
 800616a:	9303      	str	r3, [sp, #12]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	9302      	str	r3, [sp, #8]
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f80e 	bl	800619e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006182:	69f8      	ldr	r0, [r7, #28]
 8006184:	f000 f89c 	bl	80062c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006188:	2301      	movs	r3, #1
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	e002      	b.n	8006194 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006194:	69bb      	ldr	r3, [r7, #24]
	}
 8006196:	4618      	mov	r0, r3
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b088      	sub	sp, #32
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	461a      	mov	r2, r3
 80061b6:	21a5      	movs	r1, #165	@ 0xa5
 80061b8:	f002 fd99 	bl	8008cee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061c6:	3b01      	subs	r3, #1
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	617b      	str	r3, [r7, #20]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01f      	beq.n	800623e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e012      	b.n	800622a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	3334      	adds	r3, #52	@ 0x34
 8006214:	460a      	mov	r2, r1
 8006216:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9e9      	bls.n	8006204 <prvInitialiseNewTask+0x66>
 8006230:	e000      	b.n	8006234 <prvInitialiseNewTask+0x96>
			{
				break;
 8006232:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800623c:	e003      	b.n	8006246 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	2b37      	cmp	r3, #55	@ 0x37
 800624a:	d901      	bls.n	8006250 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800624c:	2337      	movs	r3, #55	@ 0x37
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006254:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800625a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	2200      	movs	r2, #0
 8006260:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff f966 	bl	8005538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	3318      	adds	r3, #24
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f961 	bl	8005538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800627a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	69b8      	ldr	r0, [r7, #24]
 80062a0:	f001 f93e 	bl	8007520 <pxPortInitialiseStack>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c8:	f001 fa5e 	bl	8007788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062de:	4a2a      	ldr	r2, [pc, #168]	@ (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e4:	4b27      	ldr	r3, [pc, #156]	@ (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d110      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ec:	f000 fc1e 	bl	8006b2c <prvInitialiseTaskLists>
 80062f0:	e00d      	b.n	800630e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062f2:	4b26      	ldr	r3, [pc, #152]	@ (800638c <prvAddNewTaskToReadyList+0xcc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	429a      	cmp	r2, r3
 8006306:	d802      	bhi.n	800630e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006308:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <prvAddNewTaskToReadyList+0xc8>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630e:	4b20      	ldr	r3, [pc, #128]	@ (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006316:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006318:	4b1d      	ldr	r3, [pc, #116]	@ (8006390 <prvAddNewTaskToReadyList+0xd0>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	4b1b      	ldr	r3, [pc, #108]	@ (8006394 <prvAddNewTaskToReadyList+0xd4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d903      	bls.n	8006334 <prvAddNewTaskToReadyList+0x74>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	4a18      	ldr	r2, [pc, #96]	@ (8006394 <prvAddNewTaskToReadyList+0xd4>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <prvAddNewTaskToReadyList+0xd8>)
 8006342:	441a      	add	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7ff f901 	bl	8005552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006350:	f001 fa4c 	bl	80077ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006354:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <prvAddNewTaskToReadyList+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800635c:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <prvAddNewTaskToReadyList+0xc8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d207      	bcs.n	800637a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800636a:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <prvAddNewTaskToReadyList+0xdc>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000f5c 	.word	0x20000f5c
 8006388:	20000a88 	.word	0x20000a88
 800638c:	20000f68 	.word	0x20000f68
 8006390:	20000f78 	.word	0x20000f78
 8006394:	20000f64 	.word	0x20000f64
 8006398:	20000a8c 	.word	0x20000a8c
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d018      	beq.n	80063e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063b2:	4b14      	ldr	r3, [pc, #80]	@ (8006404 <vTaskDelay+0x64>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <vTaskDelay+0x32>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60bb      	str	r3, [r7, #8]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063d2:	f000 f883 	bl	80064dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063d6:	2100      	movs	r1, #0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fcf3 	bl	8006dc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063de:	f000 f88b 	bl	80064f8 <xTaskResumeAll>
 80063e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d107      	bne.n	80063fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <vTaskDelay+0x68>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000f84 	.word	0x20000f84
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800641a:	463a      	mov	r2, r7
 800641c:	1d39      	adds	r1, r7, #4
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff f834 	bl	8005490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	9202      	str	r2, [sp, #8]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	2300      	movs	r3, #0
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	2300      	movs	r3, #0
 8006438:	460a      	mov	r2, r1
 800643a:	4922      	ldr	r1, [pc, #136]	@ (80064c4 <vTaskStartScheduler+0xb8>)
 800643c:	4822      	ldr	r0, [pc, #136]	@ (80064c8 <vTaskStartScheduler+0xbc>)
 800643e:	f7ff fe09 	bl	8006054 <xTaskCreateStatic>
 8006442:	4603      	mov	r3, r0
 8006444:	4a21      	ldr	r2, [pc, #132]	@ (80064cc <vTaskStartScheduler+0xc0>)
 8006446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006448:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <vTaskStartScheduler+0xc0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e001      	b.n	800645a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006460:	f000 fd04 	bl	8006e6c <xTimerCreateTimerTask>
 8006464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d116      	bne.n	800649a <vTaskStartScheduler+0x8e>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
}
 800647e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006480:	4b13      	ldr	r3, [pc, #76]	@ (80064d0 <vTaskStartScheduler+0xc4>)
 8006482:	f04f 32ff 	mov.w	r2, #4294967295
 8006486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006488:	4b12      	ldr	r3, [pc, #72]	@ (80064d4 <vTaskStartScheduler+0xc8>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800648e:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <vTaskStartScheduler+0xcc>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006494:	f001 f8d4 	bl	8007640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006498:	e00f      	b.n	80064ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d10b      	bne.n	80064ba <vTaskStartScheduler+0xae>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <vTaskStartScheduler+0xaa>
}
 80064ba:	bf00      	nop
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	0800d3a0 	.word	0x0800d3a0
 80064c8:	08006afd 	.word	0x08006afd
 80064cc:	20000f80 	.word	0x20000f80
 80064d0:	20000f7c 	.word	0x20000f7c
 80064d4:	20000f68 	.word	0x20000f68
 80064d8:	20000f60 	.word	0x20000f60

080064dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064e0:	4b04      	ldr	r3, [pc, #16]	@ (80064f4 <vTaskSuspendAll+0x18>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a03      	ldr	r2, [pc, #12]	@ (80064f4 <vTaskSuspendAll+0x18>)
 80064e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064ea:	bf00      	nop
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000f84 	.word	0x20000f84

080064f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006506:	4b42      	ldr	r3, [pc, #264]	@ (8006610 <xTaskResumeAll+0x118>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <xTaskResumeAll+0x2e>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	603b      	str	r3, [r7, #0]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006526:	f001 f92f 	bl	8007788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800652a:	4b39      	ldr	r3, [pc, #228]	@ (8006610 <xTaskResumeAll+0x118>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3b01      	subs	r3, #1
 8006530:	4a37      	ldr	r2, [pc, #220]	@ (8006610 <xTaskResumeAll+0x118>)
 8006532:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006534:	4b36      	ldr	r3, [pc, #216]	@ (8006610 <xTaskResumeAll+0x118>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d162      	bne.n	8006602 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800653c:	4b35      	ldr	r3, [pc, #212]	@ (8006614 <xTaskResumeAll+0x11c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d05e      	beq.n	8006602 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006544:	e02f      	b.n	80065a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b34      	ldr	r3, [pc, #208]	@ (8006618 <xTaskResumeAll+0x120>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3318      	adds	r3, #24
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff f85a 	bl	800560c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff f855 	bl	800560c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006566:	4b2d      	ldr	r3, [pc, #180]	@ (800661c <xTaskResumeAll+0x124>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d903      	bls.n	8006576 <xTaskResumeAll+0x7e>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4a2a      	ldr	r2, [pc, #168]	@ (800661c <xTaskResumeAll+0x124>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4a27      	ldr	r2, [pc, #156]	@ (8006620 <xTaskResumeAll+0x128>)
 8006584:	441a      	add	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3304      	adds	r3, #4
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7fe ffe0 	bl	8005552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006596:	4b23      	ldr	r3, [pc, #140]	@ (8006624 <xTaskResumeAll+0x12c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065a0:	4b21      	ldr	r3, [pc, #132]	@ (8006628 <xTaskResumeAll+0x130>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006618 <xTaskResumeAll+0x120>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1cb      	bne.n	8006546 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065b4:	f000 fb58 	bl	8006c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065b8:	4b1c      	ldr	r3, [pc, #112]	@ (800662c <xTaskResumeAll+0x134>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065c4:	f000 f846 	bl	8006654 <xTaskIncrementTick>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80065ce:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <xTaskResumeAll+0x130>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f1      	bne.n	80065c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80065e0:	4b12      	ldr	r3, [pc, #72]	@ (800662c <xTaskResumeAll+0x134>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065e6:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <xTaskResumeAll+0x130>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006630 <xTaskResumeAll+0x138>)
 80065f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006602:	f001 f8f3 	bl	80077ec <vPortExitCritical>

	return xAlreadyYielded;
 8006606:	68bb      	ldr	r3, [r7, #8]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000f84 	.word	0x20000f84
 8006614:	20000f5c 	.word	0x20000f5c
 8006618:	20000f1c 	.word	0x20000f1c
 800661c:	20000f64 	.word	0x20000f64
 8006620:	20000a8c 	.word	0x20000a8c
 8006624:	20000a88 	.word	0x20000a88
 8006628:	20000f70 	.word	0x20000f70
 800662c:	20000f6c 	.word	0x20000f6c
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800663a:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <xTaskGetTickCount+0x1c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006640:	687b      	ldr	r3, [r7, #4]
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000f60 	.word	0x20000f60

08006654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665e:	4b4f      	ldr	r3, [pc, #316]	@ (800679c <xTaskIncrementTick+0x148>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 8090 	bne.w	8006788 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006668:	4b4d      	ldr	r3, [pc, #308]	@ (80067a0 <xTaskIncrementTick+0x14c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006670:	4a4b      	ldr	r2, [pc, #300]	@ (80067a0 <xTaskIncrementTick+0x14c>)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d121      	bne.n	80066c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800667c:	4b49      	ldr	r3, [pc, #292]	@ (80067a4 <xTaskIncrementTick+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00b      	beq.n	800669e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	603b      	str	r3, [r7, #0]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <xTaskIncrementTick+0x46>
 800669e:	4b41      	ldr	r3, [pc, #260]	@ (80067a4 <xTaskIncrementTick+0x150>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	4b40      	ldr	r3, [pc, #256]	@ (80067a8 <xTaskIncrementTick+0x154>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a3e      	ldr	r2, [pc, #248]	@ (80067a4 <xTaskIncrementTick+0x150>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	4a3e      	ldr	r2, [pc, #248]	@ (80067a8 <xTaskIncrementTick+0x154>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4b3e      	ldr	r3, [pc, #248]	@ (80067ac <xTaskIncrementTick+0x158>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	4a3c      	ldr	r2, [pc, #240]	@ (80067ac <xTaskIncrementTick+0x158>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	f000 fad4 	bl	8006c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066c0:	4b3b      	ldr	r3, [pc, #236]	@ (80067b0 <xTaskIncrementTick+0x15c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d349      	bcc.n	800675e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ca:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <xTaskIncrementTick+0x150>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d4:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <xTaskIncrementTick+0x15c>)
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	601a      	str	r2, [r3, #0]
					break;
 80066dc:	e03f      	b.n	800675e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066de:	4b31      	ldr	r3, [pc, #196]	@ (80067a4 <xTaskIncrementTick+0x150>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d203      	bcs.n	80066fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066f6:	4a2e      	ldr	r2, [pc, #184]	@ (80067b0 <xTaskIncrementTick+0x15c>)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066fc:	e02f      	b.n	800675e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	3304      	adds	r3, #4
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe ff82 	bl	800560c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3318      	adds	r3, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe ff79 	bl	800560c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671e:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <xTaskIncrementTick+0x160>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d903      	bls.n	800672e <xTaskIncrementTick+0xda>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	4a22      	ldr	r2, [pc, #136]	@ (80067b4 <xTaskIncrementTick+0x160>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4a1f      	ldr	r2, [pc, #124]	@ (80067b8 <xTaskIncrementTick+0x164>)
 800673c:	441a      	add	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe ff04 	bl	8005552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <xTaskIncrementTick+0x168>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	429a      	cmp	r2, r3
 8006756:	d3b8      	bcc.n	80066ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800675c:	e7b5      	b.n	80066ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800675e:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <xTaskIncrementTick+0x168>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006764:	4914      	ldr	r1, [pc, #80]	@ (80067b8 <xTaskIncrementTick+0x164>)
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d901      	bls.n	800677a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800677a:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <xTaskIncrementTick+0x16c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e004      	b.n	8006792 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006788:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <xTaskIncrementTick+0x170>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	4a0d      	ldr	r2, [pc, #52]	@ (80067c4 <xTaskIncrementTick+0x170>)
 8006790:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000f84 	.word	0x20000f84
 80067a0:	20000f60 	.word	0x20000f60
 80067a4:	20000f14 	.word	0x20000f14
 80067a8:	20000f18 	.word	0x20000f18
 80067ac:	20000f74 	.word	0x20000f74
 80067b0:	20000f7c 	.word	0x20000f7c
 80067b4:	20000f64 	.word	0x20000f64
 80067b8:	20000a8c 	.word	0x20000a8c
 80067bc:	20000a88 	.word	0x20000a88
 80067c0:	20000f70 	.word	0x20000f70
 80067c4:	20000f6c 	.word	0x20000f6c

080067c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067ce:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <vTaskSwitchContext+0xa8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067d6:	4b27      	ldr	r3, [pc, #156]	@ (8006874 <vTaskSwitchContext+0xac>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067dc:	e042      	b.n	8006864 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80067de:	4b25      	ldr	r3, [pc, #148]	@ (8006874 <vTaskSwitchContext+0xac>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e4:	4b24      	ldr	r3, [pc, #144]	@ (8006878 <vTaskSwitchContext+0xb0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e011      	b.n	8006810 <vTaskSwitchContext+0x48>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <vTaskSwitchContext+0x42>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	607b      	str	r3, [r7, #4]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <vTaskSwitchContext+0x3e>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b01      	subs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	491a      	ldr	r1, [pc, #104]	@ (800687c <vTaskSwitchContext+0xb4>)
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0e3      	beq.n	80067ec <vTaskSwitchContext+0x24>
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4a13      	ldr	r2, [pc, #76]	@ (800687c <vTaskSwitchContext+0xb4>)
 8006830:	4413      	add	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3308      	adds	r3, #8
 8006846:	429a      	cmp	r2, r3
 8006848:	d104      	bne.n	8006854 <vTaskSwitchContext+0x8c>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4a09      	ldr	r2, [pc, #36]	@ (8006880 <vTaskSwitchContext+0xb8>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4a06      	ldr	r2, [pc, #24]	@ (8006878 <vTaskSwitchContext+0xb0>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6013      	str	r3, [r2, #0]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	20000f84 	.word	0x20000f84
 8006874:	20000f70 	.word	0x20000f70
 8006878:	20000f64 	.word	0x20000f64
 800687c:	20000a8c 	.word	0x20000a8c
 8006880:	20000a88 	.word	0x20000a88

08006884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60fb      	str	r3, [r7, #12]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ac:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <vTaskPlaceOnEventList+0x48>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3318      	adds	r3, #24
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe fe70 	bl	800559a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068ba:	2101      	movs	r1, #1
 80068bc:	6838      	ldr	r0, [r7, #0]
 80068be:	f000 fa81 	bl	8006dc4 <prvAddCurrentTaskToDelayedList>
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000a88 	.word	0x20000a88

080068d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	617b      	str	r3, [r7, #20]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <vTaskPlaceOnEventListRestricted+0x54>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3318      	adds	r3, #24
 8006900:	4619      	mov	r1, r3
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7fe fe25 	bl	8005552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f000 fa54 	bl	8006dc4 <prvAddCurrentTaskToDelayedList>
	}
 800691c:	bf00      	nop
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000a88 	.word	0x20000a88

08006928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3318      	adds	r3, #24
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fe56 	bl	800560c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <xTaskRemoveFromEventList+0xb0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11d      	bne.n	80069a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3304      	adds	r3, #4
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fe4d 	bl	800560c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <xTaskRemoveFromEventList+0xb4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d903      	bls.n	8006986 <xTaskRemoveFromEventList+0x5e>
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <xTaskRemoveFromEventList+0xb4>)
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4a13      	ldr	r2, [pc, #76]	@ (80069e0 <xTaskRemoveFromEventList+0xb8>)
 8006994:	441a      	add	r2, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fe fdd8 	bl	8005552 <vListInsertEnd>
 80069a2:	e005      	b.n	80069b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3318      	adds	r3, #24
 80069a8:	4619      	mov	r1, r3
 80069aa:	480e      	ldr	r0, [pc, #56]	@ (80069e4 <xTaskRemoveFromEventList+0xbc>)
 80069ac:	f7fe fdd1 	bl	8005552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <xTaskRemoveFromEventList+0xc0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d905      	bls.n	80069ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069be:	2301      	movs	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <xTaskRemoveFromEventList+0xc4>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	e001      	b.n	80069ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069ce:	697b      	ldr	r3, [r7, #20]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20000f84 	.word	0x20000f84
 80069dc:	20000f64 	.word	0x20000f64
 80069e0:	20000a8c 	.word	0x20000a8c
 80069e4:	20000f1c 	.word	0x20000f1c
 80069e8:	20000a88 	.word	0x20000a88
 80069ec:	20000f70 	.word	0x20000f70

080069f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <vTaskInternalSetTimeOutState+0x24>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a00:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <vTaskInternalSetTimeOutState+0x28>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20000f74 	.word	0x20000f74
 8006a18:	20000f60 	.word	0x20000f60

08006a1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	613b      	str	r3, [r7, #16]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	60fb      	str	r3, [r7, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a62:	f000 fe91 	bl	8007788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <xTaskCheckForTimeOut+0xc0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d102      	bne.n	8006a86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e023      	b.n	8006ace <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b15      	ldr	r3, [pc, #84]	@ (8006ae0 <xTaskCheckForTimeOut+0xc4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d007      	beq.n	8006aa2 <xTaskCheckForTimeOut+0x86>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d302      	bcc.n	8006aa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	e015      	b.n	8006ace <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d20b      	bcs.n	8006ac4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff99 	bl	80069f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e004      	b.n	8006ace <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ace:	f000 fe8d 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000f60 	.word	0x20000f60
 8006ae0:	20000f74 	.word	0x20000f74

08006ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ae8:	4b03      	ldr	r3, [pc, #12]	@ (8006af8 <vTaskMissedYield+0x14>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000f70 	.word	0x20000f70

08006afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b04:	f000 f852 	bl	8006bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b08:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <prvIdleTask+0x28>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d9f9      	bls.n	8006b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <prvIdleTask+0x2c>)
 8006b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b20:	e7f0      	b.n	8006b04 <prvIdleTask+0x8>
 8006b22:	bf00      	nop
 8006b24:	20000a8c 	.word	0x20000a8c
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b32:	2300      	movs	r3, #0
 8006b34:	607b      	str	r3, [r7, #4]
 8006b36:	e00c      	b.n	8006b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <prvInitialiseTaskLists+0x60>)
 8006b44:	4413      	add	r3, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fcd6 	bl	80054f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b37      	cmp	r3, #55	@ 0x37
 8006b56:	d9ef      	bls.n	8006b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b58:	480d      	ldr	r0, [pc, #52]	@ (8006b90 <prvInitialiseTaskLists+0x64>)
 8006b5a:	f7fe fccd 	bl	80054f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b5e:	480d      	ldr	r0, [pc, #52]	@ (8006b94 <prvInitialiseTaskLists+0x68>)
 8006b60:	f7fe fcca 	bl	80054f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b64:	480c      	ldr	r0, [pc, #48]	@ (8006b98 <prvInitialiseTaskLists+0x6c>)
 8006b66:	f7fe fcc7 	bl	80054f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b6a:	480c      	ldr	r0, [pc, #48]	@ (8006b9c <prvInitialiseTaskLists+0x70>)
 8006b6c:	f7fe fcc4 	bl	80054f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b70:	480b      	ldr	r0, [pc, #44]	@ (8006ba0 <prvInitialiseTaskLists+0x74>)
 8006b72:	f7fe fcc1 	bl	80054f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <prvInitialiseTaskLists+0x78>)
 8006b78:	4a05      	ldr	r2, [pc, #20]	@ (8006b90 <prvInitialiseTaskLists+0x64>)
 8006b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <prvInitialiseTaskLists+0x7c>)
 8006b7e:	4a05      	ldr	r2, [pc, #20]	@ (8006b94 <prvInitialiseTaskLists+0x68>)
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000a8c 	.word	0x20000a8c
 8006b90:	20000eec 	.word	0x20000eec
 8006b94:	20000f00 	.word	0x20000f00
 8006b98:	20000f1c 	.word	0x20000f1c
 8006b9c:	20000f30 	.word	0x20000f30
 8006ba0:	20000f48 	.word	0x20000f48
 8006ba4:	20000f14 	.word	0x20000f14
 8006ba8:	20000f18 	.word	0x20000f18

08006bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb2:	e019      	b.n	8006be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bb4:	f000 fde8 	bl	8007788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb8:	4b10      	ldr	r3, [pc, #64]	@ (8006bfc <prvCheckTasksWaitingTermination+0x50>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fd21 	bl	800560c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <prvCheckTasksWaitingTermination+0x54>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006c00 <prvCheckTasksWaitingTermination+0x54>)
 8006bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <prvCheckTasksWaitingTermination+0x58>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	4a0a      	ldr	r2, [pc, #40]	@ (8006c04 <prvCheckTasksWaitingTermination+0x58>)
 8006bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bde:	f000 fe05 	bl	80077ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f810 	bl	8006c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006be8:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <prvCheckTasksWaitingTermination+0x58>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e1      	bne.n	8006bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000f30 	.word	0x20000f30
 8006c00:	20000f5c 	.word	0x20000f5c
 8006c04:	20000f44 	.word	0x20000f44

08006c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d108      	bne.n	8006c2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 ffa2 	bl	8007b68 <vPortFree>
				vPortFree( pxTCB );
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 ff9f 	bl	8007b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c2a:	e019      	b.n	8006c60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d103      	bne.n	8006c3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ff96 	bl	8007b68 <vPortFree>
	}
 8006c3c:	e010      	b.n	8006c60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d00b      	beq.n	8006c60 <prvDeleteTCB+0x58>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60fb      	str	r3, [r7, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	e7fd      	b.n	8006c5c <prvDeleteTCB+0x54>
	}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca0 <prvResetNextTaskUnblockTime+0x38>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c80:	e008      	b.n	8006c94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c82:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <prvResetNextTaskUnblockTime+0x38>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a04      	ldr	r2, [pc, #16]	@ (8006ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8006c92:	6013      	str	r3, [r2, #0]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000f14 	.word	0x20000f14
 8006ca4:	20000f7c 	.word	0x20000f7c

08006ca8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cae:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <xTaskGetSchedulerState+0x34>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	e008      	b.n	8006cce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cbc:	4b08      	ldr	r3, [pc, #32]	@ (8006ce0 <xTaskGetSchedulerState+0x38>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	e001      	b.n	8006cce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cce:	687b      	ldr	r3, [r7, #4]
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000f68 	.word	0x20000f68
 8006ce0:	20000f84 	.word	0x20000f84

08006ce4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d058      	beq.n	8006dac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006db8 <xTaskPriorityDisinherit+0xd4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d00b      	beq.n	8006d1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10b      	bne.n	8006d3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	60bb      	str	r3, [r7, #8]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d02c      	beq.n	8006dac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d128      	bne.n	8006dac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fc54 	bl	800560c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006dbc <xTaskPriorityDisinherit+0xd8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d903      	bls.n	8006d8c <xTaskPriorityDisinherit+0xa8>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	4a0c      	ldr	r2, [pc, #48]	@ (8006dbc <xTaskPriorityDisinherit+0xd8>)
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <xTaskPriorityDisinherit+0xdc>)
 8006d9a:	441a      	add	r2, r3
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fe fbd5 	bl	8005552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006da8:	2301      	movs	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dac:	697b      	ldr	r3, [r7, #20]
	}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000a88 	.word	0x20000a88
 8006dbc:	20000f64 	.word	0x20000f64
 8006dc0:	20000a8c 	.word	0x20000a8c

08006dc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dce:	4b21      	ldr	r3, [pc, #132]	@ (8006e54 <prvAddCurrentTaskToDelayedList+0x90>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd4:	4b20      	ldr	r3, [pc, #128]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fc16 	bl	800560c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d10a      	bne.n	8006dfe <prvAddCurrentTaskToDelayedList+0x3a>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dee:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4819      	ldr	r0, [pc, #100]	@ (8006e5c <prvAddCurrentTaskToDelayedList+0x98>)
 8006df8:	f7fe fbab 	bl	8005552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dfc:	e026      	b.n	8006e4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e06:	4b14      	ldr	r3, [pc, #80]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d209      	bcs.n	8006e2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e16:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fbb9 	bl	800559a <vListInsert>
}
 8006e28:	e010      	b.n	8006e4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fbaf 	bl	800559a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d202      	bcs.n	8006e4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e46:	4a08      	ldr	r2, [pc, #32]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6013      	str	r3, [r2, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000f60 	.word	0x20000f60
 8006e58:	20000a88 	.word	0x20000a88
 8006e5c:	20000f48 	.word	0x20000f48
 8006e60:	20000f18 	.word	0x20000f18
 8006e64:	20000f14 	.word	0x20000f14
 8006e68:	20000f7c 	.word	0x20000f7c

08006e6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e76:	f000 fb13 	bl	80074a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef0 <xTimerCreateTimerTask+0x84>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d021      	beq.n	8006ec6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e8a:	1d3a      	adds	r2, r7, #4
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fb15 	bl	80054c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	9202      	str	r2, [sp, #8]
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	460a      	mov	r2, r1
 8006eac:	4911      	ldr	r1, [pc, #68]	@ (8006ef4 <xTimerCreateTimerTask+0x88>)
 8006eae:	4812      	ldr	r0, [pc, #72]	@ (8006ef8 <xTimerCreateTimerTask+0x8c>)
 8006eb0:	f7ff f8d0 	bl	8006054 <xTaskCreateStatic>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	4a11      	ldr	r2, [pc, #68]	@ (8006efc <xTimerCreateTimerTask+0x90>)
 8006eb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006eba:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <xTimerCreateTimerTask+0x90>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10b      	bne.n	8006ee4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	613b      	str	r3, [r7, #16]
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ee4:	697b      	ldr	r3, [r7, #20]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000fb8 	.word	0x20000fb8
 8006ef4:	0800d3a8 	.word	0x0800d3a8
 8006ef8:	08007039 	.word	0x08007039
 8006efc:	20000fbc 	.word	0x20000fbc

08006f00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	@ 0x28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	623b      	str	r3, [r7, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	e7fd      	b.n	8006f2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f30:	4b19      	ldr	r3, [pc, #100]	@ (8006f98 <xTimerGenericCommand+0x98>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02a      	beq.n	8006f8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	dc18      	bgt.n	8006f7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f4a:	f7ff fead 	bl	8006ca8 <xTaskGetSchedulerState>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d109      	bne.n	8006f68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f54:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <xTimerGenericCommand+0x98>)
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	f107 0110 	add.w	r1, r7, #16
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f60:	f7fe fc88 	bl	8005874 <xQueueGenericSend>
 8006f64:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f66:	e012      	b.n	8006f8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f68:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <xTimerGenericCommand+0x98>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	f107 0110 	add.w	r1, r7, #16
 8006f70:	2300      	movs	r3, #0
 8006f72:	2200      	movs	r2, #0
 8006f74:	f7fe fc7e 	bl	8005874 <xQueueGenericSend>
 8006f78:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f7a:	e008      	b.n	8006f8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f7c:	4b06      	ldr	r3, [pc, #24]	@ (8006f98 <xTimerGenericCommand+0x98>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	f107 0110 	add.w	r1, r7, #16
 8006f84:	2300      	movs	r3, #0
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	f7fe fd76 	bl	8005a78 <xQueueGenericSendFromISR>
 8006f8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3728      	adds	r7, #40	@ 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000fb8 	.word	0x20000fb8

08006f9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b23      	ldr	r3, [pc, #140]	@ (8007034 <prvProcessExpiredTimer+0x98>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fb29 	bl	800560c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d023      	beq.n	8007010 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	18d1      	adds	r1, r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6978      	ldr	r0, [r7, #20]
 8006fd6:	f000 f8d5 	bl	8007184 <prvInsertTimerInActiveList>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d020      	beq.n	8007022 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	6978      	ldr	r0, [r7, #20]
 8006fec:	f7ff ff88 	bl	8006f00 <xTimerGenericCommand>
 8006ff0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d114      	bne.n	8007022 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	4798      	blx	r3
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000fb0 	.word	0x20000fb0

08007038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007040:	f107 0308 	add.w	r3, r7, #8
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f859 	bl	80070fc <prvGetNextExpireTime>
 800704a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4619      	mov	r1, r3
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f805 	bl	8007060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007056:	f000 f8d7 	bl	8007208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800705a:	bf00      	nop
 800705c:	e7f0      	b.n	8007040 <prvTimerTask+0x8>
	...

08007060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800706a:	f7ff fa37 	bl	80064dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800706e:	f107 0308 	add.w	r3, r7, #8
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f866 	bl	8007144 <prvSampleTimeNow>
 8007078:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d130      	bne.n	80070e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <prvProcessTimerOrBlockTask+0x3c>
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d806      	bhi.n	800709c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800708e:	f7ff fa33 	bl	80064f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff81 	bl	8006f9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800709a:	e024      	b.n	80070e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070a2:	4b13      	ldr	r3, [pc, #76]	@ (80070f0 <prvProcessTimerOrBlockTask+0x90>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <prvProcessTimerOrBlockTask+0x50>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <prvProcessTimerOrBlockTask+0x52>
 80070b0:	2300      	movs	r3, #0
 80070b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070b4:	4b0f      	ldr	r3, [pc, #60]	@ (80070f4 <prvProcessTimerOrBlockTask+0x94>)
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7fe ff93 	bl	8005fec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070c6:	f7ff fa17 	bl	80064f8 <xTaskResumeAll>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070d0:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <prvProcessTimerOrBlockTask+0x98>)
 80070d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	f3bf 8f6f 	isb	sy
}
 80070e0:	e001      	b.n	80070e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070e2:	f7ff fa09 	bl	80064f8 <xTaskResumeAll>
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000fb4 	.word	0x20000fb4
 80070f4:	20000fb8 	.word	0x20000fb8
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007104:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <prvGetNextExpireTime+0x44>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <prvGetNextExpireTime+0x16>
 800710e:	2201      	movs	r2, #1
 8007110:	e000      	b.n	8007114 <prvGetNextExpireTime+0x18>
 8007112:	2200      	movs	r2, #0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007120:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <prvGetNextExpireTime+0x44>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e001      	b.n	8007130 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007130:	68fb      	ldr	r3, [r7, #12]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000fb0 	.word	0x20000fb0

08007144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800714c:	f7ff fa72 	bl	8006634 <xTaskGetTickCount>
 8007150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007152:	4b0b      	ldr	r3, [pc, #44]	@ (8007180 <prvSampleTimeNow+0x3c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d205      	bcs.n	8007168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800715c:	f000 f93a 	bl	80073d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e002      	b.n	800716e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800716e:	4a04      	ldr	r2, [pc, #16]	@ (8007180 <prvSampleTimeNow+0x3c>)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000fc0 	.word	0x20000fc0

08007184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d812      	bhi.n	80071d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d302      	bcc.n	80071be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	e01b      	b.n	80071f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071be:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <prvInsertTimerInActiveList+0x7c>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7fe f9e6 	bl	800559a <vListInsert>
 80071ce:	e012      	b.n	80071f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d206      	bcs.n	80071e6 <prvInsertTimerInActiveList+0x62>
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	e007      	b.n	80071f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071e6:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <prvInsertTimerInActiveList+0x80>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe f9d2 	bl	800559a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071f6:	697b      	ldr	r3, [r7, #20]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000fb4 	.word	0x20000fb4
 8007204:	20000fb0 	.word	0x20000fb0

08007208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08e      	sub	sp, #56	@ 0x38
 800720c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800720e:	e0ce      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	da19      	bge.n	800724a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	3304      	adds	r3, #4
 800721a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	61fb      	str	r3, [r7, #28]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800723a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007240:	6850      	ldr	r0, [r2, #4]
 8007242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007244:	6892      	ldr	r2, [r2, #8]
 8007246:	4611      	mov	r1, r2
 8007248:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f2c0 80ae 	blt.w	80073ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	3304      	adds	r3, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe f9d2 	bl	800560c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007268:	463b      	mov	r3, r7
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff ff6a 	bl	8007144 <prvSampleTimeNow>
 8007270:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b09      	cmp	r3, #9
 8007276:	f200 8097 	bhi.w	80073a8 <prvProcessReceivedCommands+0x1a0>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <prvProcessReceivedCommands+0x78>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072a9 	.word	0x080072a9
 8007288:	080072a9 	.word	0x080072a9
 800728c:	0800731f 	.word	0x0800731f
 8007290:	08007333 	.word	0x08007333
 8007294:	0800737f 	.word	0x0800737f
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072a9 	.word	0x080072a9
 80072a0:	0800731f 	.word	0x0800731f
 80072a4:	08007333 	.word	0x08007333
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	18d1      	adds	r1, r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c8:	f7ff ff5c 	bl	8007184 <prvInsertTimerInActiveList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d06c      	beq.n	80073ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d061      	beq.n	80073ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	441a      	add	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072fa:	f7ff fe01 	bl	8006f00 <xTimerGenericCommand>
 80072fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d152      	bne.n	80073ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	61bb      	str	r3, [r7, #24]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	b2da      	uxtb	r2, r3
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007330:	e03d      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007340:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	18d1      	adds	r1, r2, r3
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007378:	f7ff ff04 	bl	8007184 <prvInsertTimerInActiveList>
					break;
 800737c:	e017      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800738c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800738e:	f000 fbeb 	bl	8007b68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007392:	e00c      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073a6:	e002      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80073a8:	bf00      	nop
 80073aa:	e000      	b.n	80073ae <prvProcessReceivedCommands+0x1a6>
					break;
 80073ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ae:	4b08      	ldr	r3, [pc, #32]	@ (80073d0 <prvProcessReceivedCommands+0x1c8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	1d39      	adds	r1, r7, #4
 80073b4:	2200      	movs	r2, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fbfc 	bl	8005bb4 <xQueueReceive>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f47f af26 	bne.w	8007210 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	3730      	adds	r7, #48	@ 0x30
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000fb8 	.word	0x20000fb8

080073d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073da:	e049      	b.n	8007470 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe f909 	bl	800560c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d02f      	beq.n	8007470 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4413      	add	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	429a      	cmp	r2, r3
 8007420:	d90e      	bls.n	8007440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800742e:	4b1a      	ldr	r3, [pc, #104]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3304      	adds	r3, #4
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7fe f8ae 	bl	800559a <vListInsert>
 800743e:	e017      	b.n	8007470 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007440:	2300      	movs	r3, #0
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	2300      	movs	r3, #0
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	2100      	movs	r1, #0
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fd58 	bl	8006f00 <xTimerGenericCommand>
 8007450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	603b      	str	r3, [r7, #0]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007470:	4b09      	ldr	r3, [pc, #36]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1b0      	bne.n	80073dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800747a:	4b07      	ldr	r3, [pc, #28]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <prvSwitchTimerLists+0xc8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a04      	ldr	r2, [pc, #16]	@ (8007498 <prvSwitchTimerLists+0xc4>)
 8007486:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007488:	4a04      	ldr	r2, [pc, #16]	@ (800749c <prvSwitchTimerLists+0xc8>)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6013      	str	r3, [r2, #0]
}
 800748e:	bf00      	nop
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000fb0 	.word	0x20000fb0
 800749c:	20000fb4 	.word	0x20000fb4

080074a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074a6:	f000 f96f 	bl	8007788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074aa:	4b15      	ldr	r3, [pc, #84]	@ (8007500 <prvCheckForValidListAndQueue+0x60>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d120      	bne.n	80074f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074b2:	4814      	ldr	r0, [pc, #80]	@ (8007504 <prvCheckForValidListAndQueue+0x64>)
 80074b4:	f7fe f820 	bl	80054f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074b8:	4813      	ldr	r0, [pc, #76]	@ (8007508 <prvCheckForValidListAndQueue+0x68>)
 80074ba:	f7fe f81d 	bl	80054f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074be:	4b13      	ldr	r3, [pc, #76]	@ (800750c <prvCheckForValidListAndQueue+0x6c>)
 80074c0:	4a10      	ldr	r2, [pc, #64]	@ (8007504 <prvCheckForValidListAndQueue+0x64>)
 80074c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074c4:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <prvCheckForValidListAndQueue+0x70>)
 80074c6:	4a10      	ldr	r2, [pc, #64]	@ (8007508 <prvCheckForValidListAndQueue+0x68>)
 80074c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074ca:	2300      	movs	r3, #0
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4b11      	ldr	r3, [pc, #68]	@ (8007514 <prvCheckForValidListAndQueue+0x74>)
 80074d0:	4a11      	ldr	r2, [pc, #68]	@ (8007518 <prvCheckForValidListAndQueue+0x78>)
 80074d2:	2110      	movs	r1, #16
 80074d4:	200a      	movs	r0, #10
 80074d6:	f7fe f92d 	bl	8005734 <xQueueGenericCreateStatic>
 80074da:	4603      	mov	r3, r0
 80074dc:	4a08      	ldr	r2, [pc, #32]	@ (8007500 <prvCheckForValidListAndQueue+0x60>)
 80074de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <prvCheckForValidListAndQueue+0x60>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <prvCheckForValidListAndQueue+0x60>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	490b      	ldr	r1, [pc, #44]	@ (800751c <prvCheckForValidListAndQueue+0x7c>)
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fd52 	bl	8005f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074f4:	f000 f97a 	bl	80077ec <vPortExitCritical>
}
 80074f8:	bf00      	nop
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000fb8 	.word	0x20000fb8
 8007504:	20000f88 	.word	0x20000f88
 8007508:	20000f9c 	.word	0x20000f9c
 800750c:	20000fb0 	.word	0x20000fb0
 8007510:	20000fb4 	.word	0x20000fb4
 8007514:	20001064 	.word	0x20001064
 8007518:	20000fc4 	.word	0x20000fc4
 800751c:	0800d3b0 	.word	0x0800d3b0

08007520 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3b04      	subs	r3, #4
 8007530:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3b04      	subs	r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3b04      	subs	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007550:	4a0c      	ldr	r2, [pc, #48]	@ (8007584 <pxPortInitialiseStack+0x64>)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3b14      	subs	r3, #20
 800755a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b04      	subs	r3, #4
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f06f 0202 	mvn.w	r2, #2
 800756e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3b20      	subs	r3, #32
 8007574:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	08007589 	.word	0x08007589

08007588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <prvTaskExitError+0x58>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d00b      	beq.n	80075b4 <prvTaskExitError+0x2c>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60fb      	str	r3, [r7, #12]
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <prvTaskExitError+0x28>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60bb      	str	r3, [r7, #8]
}
 80075c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075c8:	bf00      	nop
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0fc      	beq.n	80075ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000050 	.word	0x20000050
	...

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	4770      	bx	lr
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst2>:
 8007610:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007618:	4808      	ldr	r0, [pc, #32]	@ (800763c <prvPortStartFirstTask+0x24>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8814 	msr	CONTROL, r0
 800762a:	b662      	cpsie	i
 800762c:	b661      	cpsie	f
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	df00      	svc	0
 8007638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800763a:	bf00      	nop
 800763c:	e000ed08 	.word	0xe000ed08

08007640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007646:	4b47      	ldr	r3, [pc, #284]	@ (8007764 <xPortStartScheduler+0x124>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a47      	ldr	r2, [pc, #284]	@ (8007768 <xPortStartScheduler+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10b      	bne.n	8007668 <xPortStartScheduler+0x28>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	e7fd      	b.n	8007664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007668:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <xPortStartScheduler+0x124>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a3f      	ldr	r2, [pc, #252]	@ (800776c <xPortStartScheduler+0x12c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d10b      	bne.n	800768a <xPortStartScheduler+0x4a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60fb      	str	r3, [r7, #12]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800768a:	4b39      	ldr	r3, [pc, #228]	@ (8007770 <xPortStartScheduler+0x130>)
 800768c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	22ff      	movs	r2, #255	@ 0xff
 800769a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	4b31      	ldr	r3, [pc, #196]	@ (8007774 <xPortStartScheduler+0x134>)
 80076b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076b2:	4b31      	ldr	r3, [pc, #196]	@ (8007778 <xPortStartScheduler+0x138>)
 80076b4:	2207      	movs	r2, #7
 80076b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076b8:	e009      	b.n	80076ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80076ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <xPortStartScheduler+0x138>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007778 <xPortStartScheduler+0x138>)
 80076c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b80      	cmp	r3, #128	@ 0x80
 80076d8:	d0ef      	beq.n	80076ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076da:	4b27      	ldr	r3, [pc, #156]	@ (8007778 <xPortStartScheduler+0x138>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1c3 0307 	rsb	r3, r3, #7
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d00b      	beq.n	80076fe <xPortStartScheduler+0xbe>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60bb      	str	r3, [r7, #8]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <xPortStartScheduler+0x138>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	4a1c      	ldr	r2, [pc, #112]	@ (8007778 <xPortStartScheduler+0x138>)
 8007706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007708:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <xPortStartScheduler+0x138>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007710:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <xPortStartScheduler+0x138>)
 8007712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800771c:	4b17      	ldr	r3, [pc, #92]	@ (800777c <xPortStartScheduler+0x13c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a16      	ldr	r2, [pc, #88]	@ (800777c <xPortStartScheduler+0x13c>)
 8007722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007728:	4b14      	ldr	r3, [pc, #80]	@ (800777c <xPortStartScheduler+0x13c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a13      	ldr	r2, [pc, #76]	@ (800777c <xPortStartScheduler+0x13c>)
 800772e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007734:	f000 f8da 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007738:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <xPortStartScheduler+0x140>)
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800773e:	f000 f8f9 	bl	8007934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007742:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <xPortStartScheduler+0x144>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a0f      	ldr	r2, [pc, #60]	@ (8007784 <xPortStartScheduler+0x144>)
 8007748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800774c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800774e:	f7ff ff63 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007752:	f7ff f839 	bl	80067c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007756:	f7ff ff17 	bl	8007588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	e000ed00 	.word	0xe000ed00
 8007768:	410fc271 	.word	0x410fc271
 800776c:	410fc270 	.word	0x410fc270
 8007770:	e000e400 	.word	0xe000e400
 8007774:	200010b4 	.word	0x200010b4
 8007778:	200010b8 	.word	0x200010b8
 800777c:	e000ed20 	.word	0xe000ed20
 8007780:	20000050 	.word	0x20000050
 8007784:	e000ef34 	.word	0xe000ef34

08007788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077a2:	4b10      	ldr	r3, [pc, #64]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3301      	adds	r3, #1
 80077a8:	4a0e      	ldr	r2, [pc, #56]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077ac:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d110      	bne.n	80077d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <vPortEnterCritical+0x60>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	603b      	str	r3, [r7, #0]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <vPortEnterCritical+0x4a>
	}
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000050 	.word	0x20000050
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077f2:	4b12      	ldr	r3, [pc, #72]	@ (800783c <vPortExitCritical+0x50>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <vPortExitCritical+0x26>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	e7fd      	b.n	800780e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007812:	4b0a      	ldr	r3, [pc, #40]	@ (800783c <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3b01      	subs	r3, #1
 8007818:	4a08      	ldr	r2, [pc, #32]	@ (800783c <vPortExitCritical+0x50>)
 800781a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <vPortExitCritical+0x50>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <vPortExitCritical+0x44>
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000050 	.word	0x20000050

08007840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007840:	f3ef 8009 	mrs	r0, PSP
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	4b15      	ldr	r3, [pc, #84]	@ (80078a0 <pxCurrentTCBConst>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f01e 0f10 	tst.w	lr, #16
 8007850:	bf08      	it	eq
 8007852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007864:	f380 8811 	msr	BASEPRI, r0
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f7fe ffaa 	bl	80067c8 <vTaskSwitchContext>
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f380 8811 	msr	BASEPRI, r0
 800787c:	bc09      	pop	{r0, r3}
 800787e:	6819      	ldr	r1, [r3, #0]
 8007880:	6808      	ldr	r0, [r1, #0]
 8007882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007886:	f01e 0f10 	tst.w	lr, #16
 800788a:	bf08      	it	eq
 800788c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007890:	f380 8809 	msr	PSP, r0
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fec7 	bl	8006654 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <xPortSysTickHandler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <vPortSetupTimerInterrupt+0x3c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <vPortSetupTimerInterrupt+0x40>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a09      	ldr	r2, [pc, #36]	@ (8007930 <vPortSetupTimerInterrupt+0x44>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000e010 	.word	0xe000e010
 8007924:	e000e018 	.word	0xe000e018
 8007928:	20000044 	.word	0x20000044
 800792c:	10624dd3 	.word	0x10624dd3
 8007930:	e000e014 	.word	0xe000e014

08007934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007944 <vPortEnableVFP+0x10>
 8007938:	6801      	ldr	r1, [r0, #0]
 800793a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800793e:	6001      	str	r1, [r0, #0]
 8007940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007942:	bf00      	nop
 8007944:	e000ed88 	.word	0xe000ed88

08007948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d915      	bls.n	8007986 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800795a:	4a18      	ldr	r2, [pc, #96]	@ (80079bc <vPortValidateInterruptPriority+0x74>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007964:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <vPortValidateInterruptPriority+0x78>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	7afa      	ldrb	r2, [r7, #11]
 800796a:	429a      	cmp	r2, r3
 800796c:	d20b      	bcs.n	8007986 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007986:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <vPortValidateInterruptPriority+0x7c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800798e:	4b0e      	ldr	r3, [pc, #56]	@ (80079c8 <vPortValidateInterruptPriority+0x80>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d90b      	bls.n	80079ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	603b      	str	r3, [r7, #0]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vPortValidateInterruptPriority+0x62>
	}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	e000e3f0 	.word	0xe000e3f0
 80079c0:	200010b4 	.word	0x200010b4
 80079c4:	e000ed0c 	.word	0xe000ed0c
 80079c8:	200010b8 	.word	0x200010b8

080079cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	@ 0x28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079d8:	f7fe fd80 	bl	80064dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007b50 <pvPortMalloc+0x184>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079e4:	f000 f924 	bl	8007c30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b54 <pvPortMalloc+0x188>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f040 8095 	bne.w	8007b20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079fc:	2208      	movs	r2, #8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d015      	beq.n	8007a3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	3308      	adds	r3, #8
 8007a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <pvPortMalloc+0x6e>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	617b      	str	r3, [r7, #20]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d06f      	beq.n	8007b20 <pvPortMalloc+0x154>
 8007a40:	4b45      	ldr	r3, [pc, #276]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d86a      	bhi.n	8007b20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a4a:	4b44      	ldr	r3, [pc, #272]	@ (8007b5c <pvPortMalloc+0x190>)
 8007a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a4e:	4b43      	ldr	r3, [pc, #268]	@ (8007b5c <pvPortMalloc+0x190>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a54:	e004      	b.n	8007a60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <pvPortMalloc+0xa6>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f1      	bne.n	8007a56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <pvPortMalloc+0x184>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d051      	beq.n	8007b20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2208      	movs	r2, #8
 8007a82:	4413      	add	r3, r2
 8007a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	2308      	movs	r3, #8
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d920      	bls.n	8007ae0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ada:	69b8      	ldr	r0, [r7, #24]
 8007adc:	f000 f90a 	bl	8007cf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007aec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007aee:	4b1a      	ldr	r3, [pc, #104]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b60 <pvPortMalloc+0x194>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d203      	bcs.n	8007b02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007afa:	4b17      	ldr	r3, [pc, #92]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a18      	ldr	r2, [pc, #96]	@ (8007b60 <pvPortMalloc+0x194>)
 8007b00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <pvPortMalloc+0x188>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b16:	4b13      	ldr	r3, [pc, #76]	@ (8007b64 <pvPortMalloc+0x198>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	4a11      	ldr	r2, [pc, #68]	@ (8007b64 <pvPortMalloc+0x198>)
 8007b1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b20:	f7fe fcea 	bl	80064f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <pvPortMalloc+0x17a>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60fb      	str	r3, [r7, #12]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <pvPortMalloc+0x176>
	return pvReturn;
 8007b46:	69fb      	ldr	r3, [r7, #28]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3728      	adds	r7, #40	@ 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20004cc4 	.word	0x20004cc4
 8007b54:	20004cd8 	.word	0x20004cd8
 8007b58:	20004cc8 	.word	0x20004cc8
 8007b5c:	20004cbc 	.word	0x20004cbc
 8007b60:	20004ccc 	.word	0x20004ccc
 8007b64:	20004cd0 	.word	0x20004cd0

08007b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d04f      	beq.n	8007c1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4413      	add	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	4b25      	ldr	r3, [pc, #148]	@ (8007c24 <vPortFree+0xbc>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4013      	ands	r3, r2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <vPortFree+0x46>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60fb      	str	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <vPortFree+0x66>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60bb      	str	r3, [r7, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <vPortFree+0xbc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11a      	bne.n	8007c1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <vPortFree+0xbc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bf4:	f7fe fc72 	bl	80064dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <vPortFree+0xc0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	4a09      	ldr	r2, [pc, #36]	@ (8007c28 <vPortFree+0xc0>)
 8007c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f000 f874 	bl	8007cf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <vPortFree+0xc4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a06      	ldr	r2, [pc, #24]	@ (8007c2c <vPortFree+0xc4>)
 8007c14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c16:	f7fe fc6f 	bl	80064f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20004cd8 	.word	0x20004cd8
 8007c28:	20004cc8 	.word	0x20004cc8
 8007c2c:	20004cd4 	.word	0x20004cd4

08007c30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c3c:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <prvHeapInit+0xac>)
 8007c3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00c      	beq.n	8007c64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0307 	bic.w	r3, r3, #7
 8007c56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cdc <prvHeapInit+0xac>)
 8007c60:	4413      	add	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce0 <prvHeapInit+0xb0>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <prvHeapInit+0xb0>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c7c:	2208      	movs	r2, #8
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0307 	bic.w	r3, r3, #7
 8007c8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c92:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2200      	movs	r2, #0
 8007c98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	1ad2      	subs	r2, r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce8 <prvHeapInit+0xb8>)
 8007cbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4a09      	ldr	r2, [pc, #36]	@ (8007cec <prvHeapInit+0xbc>)
 8007cc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cc8:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <prvHeapInit+0xc0>)
 8007cca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	200010bc 	.word	0x200010bc
 8007ce0:	20004cbc 	.word	0x20004cbc
 8007ce4:	20004cc4 	.word	0x20004cc4
 8007ce8:	20004ccc 	.word	0x20004ccc
 8007cec:	20004cc8 	.word	0x20004cc8
 8007cf0:	20004cd8 	.word	0x20004cd8

08007cf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cfc:	4b28      	ldr	r3, [pc, #160]	@ (8007da0 <prvInsertBlockIntoFreeList+0xac>)
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e002      	b.n	8007d08 <prvInsertBlockIntoFreeList+0x14>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d8f7      	bhi.n	8007d02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d108      	bne.n	8007d36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	441a      	add	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d118      	bne.n	8007d7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b15      	ldr	r3, [pc, #84]	@ (8007da4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d00d      	beq.n	8007d72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	e008      	b.n	8007d84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e003      	b.n	8007d84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d002      	beq.n	8007d92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d92:	bf00      	nop
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20004cbc 	.word	0x20004cbc
 8007da4:	20004cc4 	.word	0x20004cc4

08007da8 <__cvt>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	ec57 6b10 	vmov	r6, r7, d0
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	460c      	mov	r4, r1
 8007db4:	4619      	mov	r1, r3
 8007db6:	463b      	mov	r3, r7
 8007db8:	bfbb      	ittet	lt
 8007dba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dbe:	461f      	movlt	r7, r3
 8007dc0:	2300      	movge	r3, #0
 8007dc2:	232d      	movlt	r3, #45	@ 0x2d
 8007dc4:	700b      	strb	r3, [r1, #0]
 8007dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007dcc:	4691      	mov	r9, r2
 8007dce:	f023 0820 	bic.w	r8, r3, #32
 8007dd2:	bfbc      	itt	lt
 8007dd4:	4632      	movlt	r2, r6
 8007dd6:	4616      	movlt	r6, r2
 8007dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ddc:	d005      	beq.n	8007dea <__cvt+0x42>
 8007dde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007de2:	d100      	bne.n	8007de6 <__cvt+0x3e>
 8007de4:	3401      	adds	r4, #1
 8007de6:	2102      	movs	r1, #2
 8007de8:	e000      	b.n	8007dec <__cvt+0x44>
 8007dea:	2103      	movs	r1, #3
 8007dec:	ab03      	add	r3, sp, #12
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	ab02      	add	r3, sp, #8
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	ec47 6b10 	vmov	d0, r6, r7
 8007df8:	4653      	mov	r3, sl
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	f001 f894 	bl	8008f28 <_dtoa_r>
 8007e00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e04:	4605      	mov	r5, r0
 8007e06:	d119      	bne.n	8007e3c <__cvt+0x94>
 8007e08:	f019 0f01 	tst.w	r9, #1
 8007e0c:	d00e      	beq.n	8007e2c <__cvt+0x84>
 8007e0e:	eb00 0904 	add.w	r9, r0, r4
 8007e12:	2200      	movs	r2, #0
 8007e14:	2300      	movs	r3, #0
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fe75 	bl	8000b08 <__aeabi_dcmpeq>
 8007e1e:	b108      	cbz	r0, 8007e24 <__cvt+0x7c>
 8007e20:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e24:	2230      	movs	r2, #48	@ 0x30
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	454b      	cmp	r3, r9
 8007e2a:	d31e      	bcc.n	8007e6a <__cvt+0xc2>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e30:	1b5b      	subs	r3, r3, r5
 8007e32:	4628      	mov	r0, r5
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	b004      	add	sp, #16
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e40:	eb00 0904 	add.w	r9, r0, r4
 8007e44:	d1e5      	bne.n	8007e12 <__cvt+0x6a>
 8007e46:	7803      	ldrb	r3, [r0, #0]
 8007e48:	2b30      	cmp	r3, #48	@ 0x30
 8007e4a:	d10a      	bne.n	8007e62 <__cvt+0xba>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8007e58:	b918      	cbnz	r0, 8007e62 <__cvt+0xba>
 8007e5a:	f1c4 0401 	rsb	r4, r4, #1
 8007e5e:	f8ca 4000 	str.w	r4, [sl]
 8007e62:	f8da 3000 	ldr.w	r3, [sl]
 8007e66:	4499      	add	r9, r3
 8007e68:	e7d3      	b.n	8007e12 <__cvt+0x6a>
 8007e6a:	1c59      	adds	r1, r3, #1
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e7d9      	b.n	8007e26 <__cvt+0x7e>

08007e72 <__exponent>:
 8007e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e74:	2900      	cmp	r1, #0
 8007e76:	bfba      	itte	lt
 8007e78:	4249      	neglt	r1, r1
 8007e7a:	232d      	movlt	r3, #45	@ 0x2d
 8007e7c:	232b      	movge	r3, #43	@ 0x2b
 8007e7e:	2909      	cmp	r1, #9
 8007e80:	7002      	strb	r2, [r0, #0]
 8007e82:	7043      	strb	r3, [r0, #1]
 8007e84:	dd29      	ble.n	8007eda <__exponent+0x68>
 8007e86:	f10d 0307 	add.w	r3, sp, #7
 8007e8a:	461d      	mov	r5, r3
 8007e8c:	270a      	movs	r7, #10
 8007e8e:	461a      	mov	r2, r3
 8007e90:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e94:	fb07 1416 	mls	r4, r7, r6, r1
 8007e98:	3430      	adds	r4, #48	@ 0x30
 8007e9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	2c63      	cmp	r4, #99	@ 0x63
 8007ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	dcf1      	bgt.n	8007e8e <__exponent+0x1c>
 8007eaa:	3130      	adds	r1, #48	@ 0x30
 8007eac:	1e94      	subs	r4, r2, #2
 8007eae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007eb2:	1c41      	adds	r1, r0, #1
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	42ab      	cmp	r3, r5
 8007eb8:	d30a      	bcc.n	8007ed0 <__exponent+0x5e>
 8007eba:	f10d 0309 	add.w	r3, sp, #9
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	42ac      	cmp	r4, r5
 8007ec2:	bf88      	it	hi
 8007ec4:	2300      	movhi	r3, #0
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	4403      	add	r3, r0
 8007eca:	1a18      	subs	r0, r3, r0
 8007ecc:	b003      	add	sp, #12
 8007ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ed4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ed8:	e7ed      	b.n	8007eb6 <__exponent+0x44>
 8007eda:	2330      	movs	r3, #48	@ 0x30
 8007edc:	3130      	adds	r1, #48	@ 0x30
 8007ede:	7083      	strb	r3, [r0, #2]
 8007ee0:	70c1      	strb	r1, [r0, #3]
 8007ee2:	1d03      	adds	r3, r0, #4
 8007ee4:	e7f1      	b.n	8007eca <__exponent+0x58>
	...

08007ee8 <_printf_float>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	b08d      	sub	sp, #52	@ 0x34
 8007eee:	460c      	mov	r4, r1
 8007ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	4605      	mov	r5, r0
 8007efa:	f000 ff01 	bl	8008d00 <_localeconv_r>
 8007efe:	6803      	ldr	r3, [r0, #0]
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 f9d4 	bl	80002b0 <strlen>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	9005      	str	r0, [sp, #20]
 8007f12:	3307      	adds	r3, #7
 8007f14:	f023 0307 	bic.w	r3, r3, #7
 8007f18:	f103 0208 	add.w	r2, r3, #8
 8007f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f20:	f8d4 b000 	ldr.w	fp, [r4]
 8007f24:	f8c8 2000 	str.w	r2, [r8]
 8007f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80081b0 <_printf_float+0x2c8>)
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295
 8007f44:	f7f8 fe12 	bl	8000b6c <__aeabi_dcmpun>
 8007f48:	bb70      	cbnz	r0, 8007fa8 <_printf_float+0xc0>
 8007f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f4e:	4b98      	ldr	r3, [pc, #608]	@ (80081b0 <_printf_float+0x2c8>)
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	f7f8 fdec 	bl	8000b30 <__aeabi_dcmple>
 8007f58:	bb30      	cbnz	r0, 8007fa8 <_printf_float+0xc0>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 fddb 	bl	8000b1c <__aeabi_dcmplt>
 8007f66:	b110      	cbz	r0, 8007f6e <_printf_float+0x86>
 8007f68:	232d      	movs	r3, #45	@ 0x2d
 8007f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f6e:	4a91      	ldr	r2, [pc, #580]	@ (80081b4 <_printf_float+0x2cc>)
 8007f70:	4b91      	ldr	r3, [pc, #580]	@ (80081b8 <_printf_float+0x2d0>)
 8007f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f76:	bf94      	ite	ls
 8007f78:	4690      	movls	r8, r2
 8007f7a:	4698      	movhi	r8, r3
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	f02b 0304 	bic.w	r3, fp, #4
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	f04f 0900 	mov.w	r9, #0
 8007f8a:	9700      	str	r7, [sp, #0]
 8007f8c:	4633      	mov	r3, r6
 8007f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f9d2 	bl	800833c <_printf_common>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f040 808d 	bne.w	80080b8 <_printf_float+0x1d0>
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	b00d      	add	sp, #52	@ 0x34
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fddc 	bl	8000b6c <__aeabi_dcmpun>
 8007fb4:	b140      	cbz	r0, 8007fc8 <_printf_float+0xe0>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfbc      	itt	lt
 8007fbc:	232d      	movlt	r3, #45	@ 0x2d
 8007fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80081bc <_printf_float+0x2d4>)
 8007fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80081c0 <_printf_float+0x2d8>)
 8007fc6:	e7d4      	b.n	8007f72 <_printf_float+0x8a>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fce:	9206      	str	r2, [sp, #24]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	d13b      	bne.n	800804c <_printf_float+0x164>
 8007fd4:	2306      	movs	r3, #6
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	6861      	ldr	r1, [r4, #4]
 8007fee:	ec49 8b10 	vmov	d0, r8, r9
 8007ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7ff fed6 	bl	8007da8 <__cvt>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008000:	2b47      	cmp	r3, #71	@ 0x47
 8008002:	4680      	mov	r8, r0
 8008004:	d129      	bne.n	800805a <_printf_float+0x172>
 8008006:	1cc8      	adds	r0, r1, #3
 8008008:	db02      	blt.n	8008010 <_printf_float+0x128>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	4299      	cmp	r1, r3
 800800e:	dd41      	ble.n	8008094 <_printf_float+0x1ac>
 8008010:	f1aa 0a02 	sub.w	sl, sl, #2
 8008014:	fa5f fa8a 	uxtb.w	sl, sl
 8008018:	3901      	subs	r1, #1
 800801a:	4652      	mov	r2, sl
 800801c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008020:	9109      	str	r1, [sp, #36]	@ 0x24
 8008022:	f7ff ff26 	bl	8007e72 <__exponent>
 8008026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008028:	1813      	adds	r3, r2, r0
 800802a:	2a01      	cmp	r2, #1
 800802c:	4681      	mov	r9, r0
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	dc02      	bgt.n	8008038 <_printf_float+0x150>
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	07d2      	lsls	r2, r2, #31
 8008036:	d501      	bpl.n	800803c <_printf_float+0x154>
 8008038:	3301      	adds	r3, #1
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0a2      	beq.n	8007f8a <_printf_float+0xa2>
 8008044:	232d      	movs	r3, #45	@ 0x2d
 8008046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804a:	e79e      	b.n	8007f8a <_printf_float+0xa2>
 800804c:	9a06      	ldr	r2, [sp, #24]
 800804e:	2a47      	cmp	r2, #71	@ 0x47
 8008050:	d1c2      	bne.n	8007fd8 <_printf_float+0xf0>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1c0      	bne.n	8007fd8 <_printf_float+0xf0>
 8008056:	2301      	movs	r3, #1
 8008058:	e7bd      	b.n	8007fd6 <_printf_float+0xee>
 800805a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800805e:	d9db      	bls.n	8008018 <_printf_float+0x130>
 8008060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008064:	d118      	bne.n	8008098 <_printf_float+0x1b0>
 8008066:	2900      	cmp	r1, #0
 8008068:	6863      	ldr	r3, [r4, #4]
 800806a:	dd0b      	ble.n	8008084 <_printf_float+0x19c>
 800806c:	6121      	str	r1, [r4, #16]
 800806e:	b913      	cbnz	r3, 8008076 <_printf_float+0x18e>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	07d0      	lsls	r0, r2, #31
 8008074:	d502      	bpl.n	800807c <_printf_float+0x194>
 8008076:	3301      	adds	r3, #1
 8008078:	440b      	add	r3, r1
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800807e:	f04f 0900 	mov.w	r9, #0
 8008082:	e7db      	b.n	800803c <_printf_float+0x154>
 8008084:	b913      	cbnz	r3, 800808c <_printf_float+0x1a4>
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	07d2      	lsls	r2, r2, #31
 800808a:	d501      	bpl.n	8008090 <_printf_float+0x1a8>
 800808c:	3302      	adds	r3, #2
 800808e:	e7f4      	b.n	800807a <_printf_float+0x192>
 8008090:	2301      	movs	r3, #1
 8008092:	e7f2      	b.n	800807a <_printf_float+0x192>
 8008094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809a:	4299      	cmp	r1, r3
 800809c:	db05      	blt.n	80080aa <_printf_float+0x1c2>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6121      	str	r1, [r4, #16]
 80080a2:	07d8      	lsls	r0, r3, #31
 80080a4:	d5ea      	bpl.n	800807c <_printf_float+0x194>
 80080a6:	1c4b      	adds	r3, r1, #1
 80080a8:	e7e7      	b.n	800807a <_printf_float+0x192>
 80080aa:	2900      	cmp	r1, #0
 80080ac:	bfd4      	ite	le
 80080ae:	f1c1 0202 	rsble	r2, r1, #2
 80080b2:	2201      	movgt	r2, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	e7e0      	b.n	800807a <_printf_float+0x192>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	055a      	lsls	r2, r3, #21
 80080bc:	d407      	bmi.n	80080ce <_printf_float+0x1e6>
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	4642      	mov	r2, r8
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	d12b      	bne.n	8008124 <_printf_float+0x23c>
 80080cc:	e767      	b.n	8007f9e <_printf_float+0xb6>
 80080ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080d2:	f240 80dd 	bls.w	8008290 <_printf_float+0x3a8>
 80080d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080da:	2200      	movs	r2, #0
 80080dc:	2300      	movs	r3, #0
 80080de:	f7f8 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d033      	beq.n	800814e <_printf_float+0x266>
 80080e6:	4a37      	ldr	r2, [pc, #220]	@ (80081c4 <_printf_float+0x2dc>)
 80080e8:	2301      	movs	r3, #1
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f af54 	beq.w	8007f9e <_printf_float+0xb6>
 80080f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080fa:	4543      	cmp	r3, r8
 80080fc:	db02      	blt.n	8008104 <_printf_float+0x21c>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	07d8      	lsls	r0, r3, #31
 8008102:	d50f      	bpl.n	8008124 <_printf_float+0x23c>
 8008104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af45 	beq.w	8007f9e <_printf_float+0xb6>
 8008114:	f04f 0900 	mov.w	r9, #0
 8008118:	f108 38ff 	add.w	r8, r8, #4294967295
 800811c:	f104 0a1a 	add.w	sl, r4, #26
 8008120:	45c8      	cmp	r8, r9
 8008122:	dc09      	bgt.n	8008138 <_printf_float+0x250>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	079b      	lsls	r3, r3, #30
 8008128:	f100 8103 	bmi.w	8008332 <_printf_float+0x44a>
 800812c:	68e0      	ldr	r0, [r4, #12]
 800812e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008130:	4298      	cmp	r0, r3
 8008132:	bfb8      	it	lt
 8008134:	4618      	movlt	r0, r3
 8008136:	e734      	b.n	8007fa2 <_printf_float+0xba>
 8008138:	2301      	movs	r3, #1
 800813a:	4652      	mov	r2, sl
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f af2b 	beq.w	8007f9e <_printf_float+0xb6>
 8008148:	f109 0901 	add.w	r9, r9, #1
 800814c:	e7e8      	b.n	8008120 <_printf_float+0x238>
 800814e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc39      	bgt.n	80081c8 <_printf_float+0x2e0>
 8008154:	4a1b      	ldr	r2, [pc, #108]	@ (80081c4 <_printf_float+0x2dc>)
 8008156:	2301      	movs	r3, #1
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f af1d 	beq.w	8007f9e <_printf_float+0xb6>
 8008164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008168:	ea59 0303 	orrs.w	r3, r9, r3
 800816c:	d102      	bne.n	8008174 <_printf_float+0x28c>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	07d9      	lsls	r1, r3, #31
 8008172:	d5d7      	bpl.n	8008124 <_printf_float+0x23c>
 8008174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af0d 	beq.w	8007f9e <_printf_float+0xb6>
 8008184:	f04f 0a00 	mov.w	sl, #0
 8008188:	f104 0b1a 	add.w	fp, r4, #26
 800818c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818e:	425b      	negs	r3, r3
 8008190:	4553      	cmp	r3, sl
 8008192:	dc01      	bgt.n	8008198 <_printf_float+0x2b0>
 8008194:	464b      	mov	r3, r9
 8008196:	e793      	b.n	80080c0 <_printf_float+0x1d8>
 8008198:	2301      	movs	r3, #1
 800819a:	465a      	mov	r2, fp
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f aefb 	beq.w	8007f9e <_printf_float+0xb6>
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	e7ee      	b.n	800818c <_printf_float+0x2a4>
 80081ae:	bf00      	nop
 80081b0:	7fefffff 	.word	0x7fefffff
 80081b4:	0800d43c 	.word	0x0800d43c
 80081b8:	0800d440 	.word	0x0800d440
 80081bc:	0800d444 	.word	0x0800d444
 80081c0:	0800d448 	.word	0x0800d448
 80081c4:	0800d44c 	.word	0x0800d44c
 80081c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081ce:	4553      	cmp	r3, sl
 80081d0:	bfa8      	it	ge
 80081d2:	4653      	movge	r3, sl
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	4699      	mov	r9, r3
 80081d8:	dc36      	bgt.n	8008248 <_printf_float+0x360>
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e2:	f104 021a 	add.w	r2, r4, #26
 80081e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081e8:	9306      	str	r3, [sp, #24]
 80081ea:	eba3 0309 	sub.w	r3, r3, r9
 80081ee:	455b      	cmp	r3, fp
 80081f0:	dc31      	bgt.n	8008256 <_printf_float+0x36e>
 80081f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f4:	459a      	cmp	sl, r3
 80081f6:	dc3a      	bgt.n	800826e <_printf_float+0x386>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	07da      	lsls	r2, r3, #31
 80081fc:	d437      	bmi.n	800826e <_printf_float+0x386>
 80081fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008200:	ebaa 0903 	sub.w	r9, sl, r3
 8008204:	9b06      	ldr	r3, [sp, #24]
 8008206:	ebaa 0303 	sub.w	r3, sl, r3
 800820a:	4599      	cmp	r9, r3
 800820c:	bfa8      	it	ge
 800820e:	4699      	movge	r9, r3
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	dc33      	bgt.n	800827e <_printf_float+0x396>
 8008216:	f04f 0800 	mov.w	r8, #0
 800821a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800821e:	f104 0b1a 	add.w	fp, r4, #26
 8008222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008224:	ebaa 0303 	sub.w	r3, sl, r3
 8008228:	eba3 0309 	sub.w	r3, r3, r9
 800822c:	4543      	cmp	r3, r8
 800822e:	f77f af79 	ble.w	8008124 <_printf_float+0x23c>
 8008232:	2301      	movs	r3, #1
 8008234:	465a      	mov	r2, fp
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f aeae 	beq.w	8007f9e <_printf_float+0xb6>
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	e7ec      	b.n	8008222 <_printf_float+0x33a>
 8008248:	4642      	mov	r2, r8
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	d1c2      	bne.n	80081da <_printf_float+0x2f2>
 8008254:	e6a3      	b.n	8007f9e <_printf_float+0xb6>
 8008256:	2301      	movs	r3, #1
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	9206      	str	r2, [sp, #24]
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae9c 	beq.w	8007f9e <_printf_float+0xb6>
 8008266:	9a06      	ldr	r2, [sp, #24]
 8008268:	f10b 0b01 	add.w	fp, fp, #1
 800826c:	e7bb      	b.n	80081e6 <_printf_float+0x2fe>
 800826e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	d1c0      	bne.n	80081fe <_printf_float+0x316>
 800827c:	e68f      	b.n	8007f9e <_printf_float+0xb6>
 800827e:	9a06      	ldr	r2, [sp, #24]
 8008280:	464b      	mov	r3, r9
 8008282:	4442      	add	r2, r8
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	d1c3      	bne.n	8008216 <_printf_float+0x32e>
 800828e:	e686      	b.n	8007f9e <_printf_float+0xb6>
 8008290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008294:	f1ba 0f01 	cmp.w	sl, #1
 8008298:	dc01      	bgt.n	800829e <_printf_float+0x3b6>
 800829a:	07db      	lsls	r3, r3, #31
 800829c:	d536      	bpl.n	800830c <_printf_float+0x424>
 800829e:	2301      	movs	r3, #1
 80082a0:	4642      	mov	r2, r8
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f ae78 	beq.w	8007f9e <_printf_float+0xb6>
 80082ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f ae70 	beq.w	8007f9e <_printf_float+0xb6>
 80082be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ca:	f7f8 fc1d 	bl	8000b08 <__aeabi_dcmpeq>
 80082ce:	b9c0      	cbnz	r0, 8008302 <_printf_float+0x41a>
 80082d0:	4653      	mov	r3, sl
 80082d2:	f108 0201 	add.w	r2, r8, #1
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	d10c      	bne.n	80082fa <_printf_float+0x412>
 80082e0:	e65d      	b.n	8007f9e <_printf_float+0xb6>
 80082e2:	2301      	movs	r3, #1
 80082e4:	465a      	mov	r2, fp
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f ae56 	beq.w	8007f9e <_printf_float+0xb6>
 80082f2:	f108 0801 	add.w	r8, r8, #1
 80082f6:	45d0      	cmp	r8, sl
 80082f8:	dbf3      	blt.n	80082e2 <_printf_float+0x3fa>
 80082fa:	464b      	mov	r3, r9
 80082fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008300:	e6df      	b.n	80080c2 <_printf_float+0x1da>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 0b1a 	add.w	fp, r4, #26
 800830a:	e7f4      	b.n	80082f6 <_printf_float+0x40e>
 800830c:	2301      	movs	r3, #1
 800830e:	4642      	mov	r2, r8
 8008310:	e7e1      	b.n	80082d6 <_printf_float+0x3ee>
 8008312:	2301      	movs	r3, #1
 8008314:	464a      	mov	r2, r9
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae3e 	beq.w	8007f9e <_printf_float+0xb6>
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	4543      	cmp	r3, r8
 800832e:	dcf0      	bgt.n	8008312 <_printf_float+0x42a>
 8008330:	e6fc      	b.n	800812c <_printf_float+0x244>
 8008332:	f04f 0800 	mov.w	r8, #0
 8008336:	f104 0919 	add.w	r9, r4, #25
 800833a:	e7f4      	b.n	8008326 <_printf_float+0x43e>

0800833c <_printf_common>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	4616      	mov	r6, r2
 8008342:	4698      	mov	r8, r3
 8008344:	688a      	ldr	r2, [r1, #8]
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800834c:	4293      	cmp	r3, r2
 800834e:	bfb8      	it	lt
 8008350:	4613      	movlt	r3, r2
 8008352:	6033      	str	r3, [r6, #0]
 8008354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008358:	4607      	mov	r7, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b10a      	cbz	r2, 8008362 <_printf_common+0x26>
 800835e:	3301      	adds	r3, #1
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	0699      	lsls	r1, r3, #26
 8008366:	bf42      	ittt	mi
 8008368:	6833      	ldrmi	r3, [r6, #0]
 800836a:	3302      	addmi	r3, #2
 800836c:	6033      	strmi	r3, [r6, #0]
 800836e:	6825      	ldr	r5, [r4, #0]
 8008370:	f015 0506 	ands.w	r5, r5, #6
 8008374:	d106      	bne.n	8008384 <_printf_common+0x48>
 8008376:	f104 0a19 	add.w	sl, r4, #25
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	6832      	ldr	r2, [r6, #0]
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc26      	bgt.n	80083d2 <_printf_common+0x96>
 8008384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	3b00      	subs	r3, #0
 800838c:	bf18      	it	ne
 800838e:	2301      	movne	r3, #1
 8008390:	0692      	lsls	r2, r2, #26
 8008392:	d42b      	bmi.n	80083ec <_printf_common+0xb0>
 8008394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008398:	4641      	mov	r1, r8
 800839a:	4638      	mov	r0, r7
 800839c:	47c8      	blx	r9
 800839e:	3001      	adds	r0, #1
 80083a0:	d01e      	beq.n	80083e0 <_printf_common+0xa4>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	f003 0306 	and.w	r3, r3, #6
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	bf02      	ittt	eq
 80083ae:	68e5      	ldreq	r5, [r4, #12]
 80083b0:	6833      	ldreq	r3, [r6, #0]
 80083b2:	1aed      	subeq	r5, r5, r3
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	bf0c      	ite	eq
 80083b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083bc:	2500      	movne	r5, #0
 80083be:	4293      	cmp	r3, r2
 80083c0:	bfc4      	itt	gt
 80083c2:	1a9b      	subgt	r3, r3, r2
 80083c4:	18ed      	addgt	r5, r5, r3
 80083c6:	2600      	movs	r6, #0
 80083c8:	341a      	adds	r4, #26
 80083ca:	42b5      	cmp	r5, r6
 80083cc:	d11a      	bne.n	8008404 <_printf_common+0xc8>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e008      	b.n	80083e4 <_printf_common+0xa8>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4641      	mov	r1, r8
 80083d8:	4638      	mov	r0, r7
 80083da:	47c8      	blx	r9
 80083dc:	3001      	adds	r0, #1
 80083de:	d103      	bne.n	80083e8 <_printf_common+0xac>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e8:	3501      	adds	r5, #1
 80083ea:	e7c6      	b.n	800837a <_printf_common+0x3e>
 80083ec:	18e1      	adds	r1, r4, r3
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	2030      	movs	r0, #48	@ 0x30
 80083f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083f6:	4422      	add	r2, r4
 80083f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008400:	3302      	adds	r3, #2
 8008402:	e7c7      	b.n	8008394 <_printf_common+0x58>
 8008404:	2301      	movs	r3, #1
 8008406:	4622      	mov	r2, r4
 8008408:	4641      	mov	r1, r8
 800840a:	4638      	mov	r0, r7
 800840c:	47c8      	blx	r9
 800840e:	3001      	adds	r0, #1
 8008410:	d0e6      	beq.n	80083e0 <_printf_common+0xa4>
 8008412:	3601      	adds	r6, #1
 8008414:	e7d9      	b.n	80083ca <_printf_common+0x8e>
	...

08008418 <_printf_i>:
 8008418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	7e0f      	ldrb	r7, [r1, #24]
 800841e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008420:	2f78      	cmp	r7, #120	@ 0x78
 8008422:	4691      	mov	r9, r2
 8008424:	4680      	mov	r8, r0
 8008426:	460c      	mov	r4, r1
 8008428:	469a      	mov	sl, r3
 800842a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800842e:	d807      	bhi.n	8008440 <_printf_i+0x28>
 8008430:	2f62      	cmp	r7, #98	@ 0x62
 8008432:	d80a      	bhi.n	800844a <_printf_i+0x32>
 8008434:	2f00      	cmp	r7, #0
 8008436:	f000 80d2 	beq.w	80085de <_printf_i+0x1c6>
 800843a:	2f58      	cmp	r7, #88	@ 0x58
 800843c:	f000 80b9 	beq.w	80085b2 <_printf_i+0x19a>
 8008440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008448:	e03a      	b.n	80084c0 <_printf_i+0xa8>
 800844a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800844e:	2b15      	cmp	r3, #21
 8008450:	d8f6      	bhi.n	8008440 <_printf_i+0x28>
 8008452:	a101      	add	r1, pc, #4	@ (adr r1, 8008458 <_printf_i+0x40>)
 8008454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084c5 	.word	0x080084c5
 8008460:	08008441 	.word	0x08008441
 8008464:	08008441 	.word	0x08008441
 8008468:	08008441 	.word	0x08008441
 800846c:	08008441 	.word	0x08008441
 8008470:	080084c5 	.word	0x080084c5
 8008474:	08008441 	.word	0x08008441
 8008478:	08008441 	.word	0x08008441
 800847c:	08008441 	.word	0x08008441
 8008480:	08008441 	.word	0x08008441
 8008484:	080085c5 	.word	0x080085c5
 8008488:	080084ef 	.word	0x080084ef
 800848c:	0800857f 	.word	0x0800857f
 8008490:	08008441 	.word	0x08008441
 8008494:	08008441 	.word	0x08008441
 8008498:	080085e7 	.word	0x080085e7
 800849c:	08008441 	.word	0x08008441
 80084a0:	080084ef 	.word	0x080084ef
 80084a4:	08008441 	.word	0x08008441
 80084a8:	08008441 	.word	0x08008441
 80084ac:	08008587 	.word	0x08008587
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	1d1a      	adds	r2, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6032      	str	r2, [r6, #0]
 80084b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084c0:	2301      	movs	r3, #1
 80084c2:	e09d      	b.n	8008600 <_printf_i+0x1e8>
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	6820      	ldr	r0, [r4, #0]
 80084c8:	1d19      	adds	r1, r3, #4
 80084ca:	6031      	str	r1, [r6, #0]
 80084cc:	0606      	lsls	r6, r0, #24
 80084ce:	d501      	bpl.n	80084d4 <_printf_i+0xbc>
 80084d0:	681d      	ldr	r5, [r3, #0]
 80084d2:	e003      	b.n	80084dc <_printf_i+0xc4>
 80084d4:	0645      	lsls	r5, r0, #25
 80084d6:	d5fb      	bpl.n	80084d0 <_printf_i+0xb8>
 80084d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084dc:	2d00      	cmp	r5, #0
 80084de:	da03      	bge.n	80084e8 <_printf_i+0xd0>
 80084e0:	232d      	movs	r3, #45	@ 0x2d
 80084e2:	426d      	negs	r5, r5
 80084e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e8:	4859      	ldr	r0, [pc, #356]	@ (8008650 <_printf_i+0x238>)
 80084ea:	230a      	movs	r3, #10
 80084ec:	e011      	b.n	8008512 <_printf_i+0xfa>
 80084ee:	6821      	ldr	r1, [r4, #0]
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	0608      	lsls	r0, r1, #24
 80084f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084f8:	d402      	bmi.n	8008500 <_printf_i+0xe8>
 80084fa:	0649      	lsls	r1, r1, #25
 80084fc:	bf48      	it	mi
 80084fe:	b2ad      	uxthmi	r5, r5
 8008500:	2f6f      	cmp	r7, #111	@ 0x6f
 8008502:	4853      	ldr	r0, [pc, #332]	@ (8008650 <_printf_i+0x238>)
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	bf14      	ite	ne
 8008508:	230a      	movne	r3, #10
 800850a:	2308      	moveq	r3, #8
 800850c:	2100      	movs	r1, #0
 800850e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008512:	6866      	ldr	r6, [r4, #4]
 8008514:	60a6      	str	r6, [r4, #8]
 8008516:	2e00      	cmp	r6, #0
 8008518:	bfa2      	ittt	ge
 800851a:	6821      	ldrge	r1, [r4, #0]
 800851c:	f021 0104 	bicge.w	r1, r1, #4
 8008520:	6021      	strge	r1, [r4, #0]
 8008522:	b90d      	cbnz	r5, 8008528 <_printf_i+0x110>
 8008524:	2e00      	cmp	r6, #0
 8008526:	d04b      	beq.n	80085c0 <_printf_i+0x1a8>
 8008528:	4616      	mov	r6, r2
 800852a:	fbb5 f1f3 	udiv	r1, r5, r3
 800852e:	fb03 5711 	mls	r7, r3, r1, r5
 8008532:	5dc7      	ldrb	r7, [r0, r7]
 8008534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008538:	462f      	mov	r7, r5
 800853a:	42bb      	cmp	r3, r7
 800853c:	460d      	mov	r5, r1
 800853e:	d9f4      	bls.n	800852a <_printf_i+0x112>
 8008540:	2b08      	cmp	r3, #8
 8008542:	d10b      	bne.n	800855c <_printf_i+0x144>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	07df      	lsls	r7, r3, #31
 8008548:	d508      	bpl.n	800855c <_printf_i+0x144>
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	4299      	cmp	r1, r3
 8008550:	bfde      	ittt	le
 8008552:	2330      	movle	r3, #48	@ 0x30
 8008554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800855c:	1b92      	subs	r2, r2, r6
 800855e:	6122      	str	r2, [r4, #16]
 8008560:	f8cd a000 	str.w	sl, [sp]
 8008564:	464b      	mov	r3, r9
 8008566:	aa03      	add	r2, sp, #12
 8008568:	4621      	mov	r1, r4
 800856a:	4640      	mov	r0, r8
 800856c:	f7ff fee6 	bl	800833c <_printf_common>
 8008570:	3001      	adds	r0, #1
 8008572:	d14a      	bne.n	800860a <_printf_i+0x1f2>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	b004      	add	sp, #16
 800857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	f043 0320 	orr.w	r3, r3, #32
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	4833      	ldr	r0, [pc, #204]	@ (8008654 <_printf_i+0x23c>)
 8008588:	2778      	movs	r7, #120	@ 0x78
 800858a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	6831      	ldr	r1, [r6, #0]
 8008592:	061f      	lsls	r7, r3, #24
 8008594:	f851 5b04 	ldr.w	r5, [r1], #4
 8008598:	d402      	bmi.n	80085a0 <_printf_i+0x188>
 800859a:	065f      	lsls	r7, r3, #25
 800859c:	bf48      	it	mi
 800859e:	b2ad      	uxthmi	r5, r5
 80085a0:	6031      	str	r1, [r6, #0]
 80085a2:	07d9      	lsls	r1, r3, #31
 80085a4:	bf44      	itt	mi
 80085a6:	f043 0320 	orrmi.w	r3, r3, #32
 80085aa:	6023      	strmi	r3, [r4, #0]
 80085ac:	b11d      	cbz	r5, 80085b6 <_printf_i+0x19e>
 80085ae:	2310      	movs	r3, #16
 80085b0:	e7ac      	b.n	800850c <_printf_i+0xf4>
 80085b2:	4827      	ldr	r0, [pc, #156]	@ (8008650 <_printf_i+0x238>)
 80085b4:	e7e9      	b.n	800858a <_printf_i+0x172>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f023 0320 	bic.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	e7f6      	b.n	80085ae <_printf_i+0x196>
 80085c0:	4616      	mov	r6, r2
 80085c2:	e7bd      	b.n	8008540 <_printf_i+0x128>
 80085c4:	6833      	ldr	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	1d18      	adds	r0, r3, #4
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	062e      	lsls	r6, r5, #24
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0x1c0>
 80085d4:	6019      	str	r1, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0x1c6>
 80085d8:	0668      	lsls	r0, r5, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0x1bc>
 80085dc:	8019      	strh	r1, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	4616      	mov	r6, r2
 80085e4:	e7bc      	b.n	8008560 <_printf_i+0x148>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	6032      	str	r2, [r6, #0]
 80085ec:	681e      	ldr	r6, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7f7 fe0c 	bl	8000210 <memchr>
 80085f8:	b108      	cbz	r0, 80085fe <_printf_i+0x1e6>
 80085fa:	1b80      	subs	r0, r0, r6
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008608:	e7aa      	b.n	8008560 <_printf_i+0x148>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d0ad      	beq.n	8008574 <_printf_i+0x15c>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	079b      	lsls	r3, r3, #30
 800861c:	d413      	bmi.n	8008646 <_printf_i+0x22e>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e7a6      	b.n	8008578 <_printf_i+0x160>
 800862a:	2301      	movs	r3, #1
 800862c:	4632      	mov	r2, r6
 800862e:	4649      	mov	r1, r9
 8008630:	4640      	mov	r0, r8
 8008632:	47d0      	blx	sl
 8008634:	3001      	adds	r0, #1
 8008636:	d09d      	beq.n	8008574 <_printf_i+0x15c>
 8008638:	3501      	adds	r5, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	42ab      	cmp	r3, r5
 8008642:	dcf2      	bgt.n	800862a <_printf_i+0x212>
 8008644:	e7eb      	b.n	800861e <_printf_i+0x206>
 8008646:	2500      	movs	r5, #0
 8008648:	f104 0619 	add.w	r6, r4, #25
 800864c:	e7f5      	b.n	800863a <_printf_i+0x222>
 800864e:	bf00      	nop
 8008650:	0800d44e 	.word	0x0800d44e
 8008654:	0800d45f 	.word	0x0800d45f

08008658 <_scanf_float>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	b087      	sub	sp, #28
 800865e:	4617      	mov	r7, r2
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	688b      	ldr	r3, [r1, #8]
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800866a:	bf81      	itttt	hi
 800866c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008670:	eb03 0b05 	addhi.w	fp, r3, r5
 8008674:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008678:	608b      	strhi	r3, [r1, #8]
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	460a      	mov	r2, r1
 800867e:	f04f 0500 	mov.w	r5, #0
 8008682:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008686:	f842 3b1c 	str.w	r3, [r2], #28
 800868a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800868e:	4680      	mov	r8, r0
 8008690:	460c      	mov	r4, r1
 8008692:	bf98      	it	ls
 8008694:	f04f 0b00 	movls.w	fp, #0
 8008698:	9201      	str	r2, [sp, #4]
 800869a:	4616      	mov	r6, r2
 800869c:	46aa      	mov	sl, r5
 800869e:	46a9      	mov	r9, r5
 80086a0:	9502      	str	r5, [sp, #8]
 80086a2:	68a2      	ldr	r2, [r4, #8]
 80086a4:	b152      	cbz	r2, 80086bc <_scanf_float+0x64>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80086ac:	d864      	bhi.n	8008778 <_scanf_float+0x120>
 80086ae:	2b40      	cmp	r3, #64	@ 0x40
 80086b0:	d83c      	bhi.n	800872c <_scanf_float+0xd4>
 80086b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086b6:	b2c8      	uxtb	r0, r1
 80086b8:	280e      	cmp	r0, #14
 80086ba:	d93a      	bls.n	8008732 <_scanf_float+0xda>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	d003      	beq.n	80086ca <_scanf_float+0x72>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ce:	f1ba 0f01 	cmp.w	sl, #1
 80086d2:	f200 8117 	bhi.w	8008904 <_scanf_float+0x2ac>
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	429e      	cmp	r6, r3
 80086da:	f200 8108 	bhi.w	80088ee <_scanf_float+0x296>
 80086de:	2001      	movs	r0, #1
 80086e0:	b007      	add	sp, #28
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80086ea:	2a0d      	cmp	r2, #13
 80086ec:	d8e6      	bhi.n	80086bc <_scanf_float+0x64>
 80086ee:	a101      	add	r1, pc, #4	@ (adr r1, 80086f4 <_scanf_float+0x9c>)
 80086f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086f4:	0800883b 	.word	0x0800883b
 80086f8:	080086bd 	.word	0x080086bd
 80086fc:	080086bd 	.word	0x080086bd
 8008700:	080086bd 	.word	0x080086bd
 8008704:	0800889b 	.word	0x0800889b
 8008708:	08008873 	.word	0x08008873
 800870c:	080086bd 	.word	0x080086bd
 8008710:	080086bd 	.word	0x080086bd
 8008714:	08008849 	.word	0x08008849
 8008718:	080086bd 	.word	0x080086bd
 800871c:	080086bd 	.word	0x080086bd
 8008720:	080086bd 	.word	0x080086bd
 8008724:	080086bd 	.word	0x080086bd
 8008728:	08008801 	.word	0x08008801
 800872c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008730:	e7db      	b.n	80086ea <_scanf_float+0x92>
 8008732:	290e      	cmp	r1, #14
 8008734:	d8c2      	bhi.n	80086bc <_scanf_float+0x64>
 8008736:	a001      	add	r0, pc, #4	@ (adr r0, 800873c <_scanf_float+0xe4>)
 8008738:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800873c:	080087f1 	.word	0x080087f1
 8008740:	080086bd 	.word	0x080086bd
 8008744:	080087f1 	.word	0x080087f1
 8008748:	08008887 	.word	0x08008887
 800874c:	080086bd 	.word	0x080086bd
 8008750:	08008799 	.word	0x08008799
 8008754:	080087d7 	.word	0x080087d7
 8008758:	080087d7 	.word	0x080087d7
 800875c:	080087d7 	.word	0x080087d7
 8008760:	080087d7 	.word	0x080087d7
 8008764:	080087d7 	.word	0x080087d7
 8008768:	080087d7 	.word	0x080087d7
 800876c:	080087d7 	.word	0x080087d7
 8008770:	080087d7 	.word	0x080087d7
 8008774:	080087d7 	.word	0x080087d7
 8008778:	2b6e      	cmp	r3, #110	@ 0x6e
 800877a:	d809      	bhi.n	8008790 <_scanf_float+0x138>
 800877c:	2b60      	cmp	r3, #96	@ 0x60
 800877e:	d8b2      	bhi.n	80086e6 <_scanf_float+0x8e>
 8008780:	2b54      	cmp	r3, #84	@ 0x54
 8008782:	d07b      	beq.n	800887c <_scanf_float+0x224>
 8008784:	2b59      	cmp	r3, #89	@ 0x59
 8008786:	d199      	bne.n	80086bc <_scanf_float+0x64>
 8008788:	2d07      	cmp	r5, #7
 800878a:	d197      	bne.n	80086bc <_scanf_float+0x64>
 800878c:	2508      	movs	r5, #8
 800878e:	e02c      	b.n	80087ea <_scanf_float+0x192>
 8008790:	2b74      	cmp	r3, #116	@ 0x74
 8008792:	d073      	beq.n	800887c <_scanf_float+0x224>
 8008794:	2b79      	cmp	r3, #121	@ 0x79
 8008796:	e7f6      	b.n	8008786 <_scanf_float+0x12e>
 8008798:	6821      	ldr	r1, [r4, #0]
 800879a:	05c8      	lsls	r0, r1, #23
 800879c:	d51b      	bpl.n	80087d6 <_scanf_float+0x17e>
 800879e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087a2:	6021      	str	r1, [r4, #0]
 80087a4:	f109 0901 	add.w	r9, r9, #1
 80087a8:	f1bb 0f00 	cmp.w	fp, #0
 80087ac:	d003      	beq.n	80087b6 <_scanf_float+0x15e>
 80087ae:	3201      	adds	r2, #1
 80087b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087b4:	60a2      	str	r2, [r4, #8]
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	3301      	adds	r3, #1
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
 80087ca:	f340 8087 	ble.w	80088dc <_scanf_float+0x284>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	e765      	b.n	80086a2 <_scanf_float+0x4a>
 80087d6:	eb1a 0105 	adds.w	r1, sl, r5
 80087da:	f47f af6f 	bne.w	80086bc <_scanf_float+0x64>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	460d      	mov	r5, r1
 80087e8:	468a      	mov	sl, r1
 80087ea:	f806 3b01 	strb.w	r3, [r6], #1
 80087ee:	e7e2      	b.n	80087b6 <_scanf_float+0x15e>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	0610      	lsls	r0, r2, #24
 80087f4:	f57f af62 	bpl.w	80086bc <_scanf_float+0x64>
 80087f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	e7f4      	b.n	80087ea <_scanf_float+0x192>
 8008800:	f1ba 0f00 	cmp.w	sl, #0
 8008804:	d10e      	bne.n	8008824 <_scanf_float+0x1cc>
 8008806:	f1b9 0f00 	cmp.w	r9, #0
 800880a:	d10e      	bne.n	800882a <_scanf_float+0x1d2>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008812:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008816:	d108      	bne.n	800882a <_scanf_float+0x1d2>
 8008818:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	f04f 0a01 	mov.w	sl, #1
 8008822:	e7e2      	b.n	80087ea <_scanf_float+0x192>
 8008824:	f1ba 0f02 	cmp.w	sl, #2
 8008828:	d055      	beq.n	80088d6 <_scanf_float+0x27e>
 800882a:	2d01      	cmp	r5, #1
 800882c:	d002      	beq.n	8008834 <_scanf_float+0x1dc>
 800882e:	2d04      	cmp	r5, #4
 8008830:	f47f af44 	bne.w	80086bc <_scanf_float+0x64>
 8008834:	3501      	adds	r5, #1
 8008836:	b2ed      	uxtb	r5, r5
 8008838:	e7d7      	b.n	80087ea <_scanf_float+0x192>
 800883a:	f1ba 0f01 	cmp.w	sl, #1
 800883e:	f47f af3d 	bne.w	80086bc <_scanf_float+0x64>
 8008842:	f04f 0a02 	mov.w	sl, #2
 8008846:	e7d0      	b.n	80087ea <_scanf_float+0x192>
 8008848:	b97d      	cbnz	r5, 800886a <_scanf_float+0x212>
 800884a:	f1b9 0f00 	cmp.w	r9, #0
 800884e:	f47f af38 	bne.w	80086c2 <_scanf_float+0x6a>
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008858:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800885c:	f040 8108 	bne.w	8008a70 <_scanf_float+0x418>
 8008860:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	2501      	movs	r5, #1
 8008868:	e7bf      	b.n	80087ea <_scanf_float+0x192>
 800886a:	2d03      	cmp	r5, #3
 800886c:	d0e2      	beq.n	8008834 <_scanf_float+0x1dc>
 800886e:	2d05      	cmp	r5, #5
 8008870:	e7de      	b.n	8008830 <_scanf_float+0x1d8>
 8008872:	2d02      	cmp	r5, #2
 8008874:	f47f af22 	bne.w	80086bc <_scanf_float+0x64>
 8008878:	2503      	movs	r5, #3
 800887a:	e7b6      	b.n	80087ea <_scanf_float+0x192>
 800887c:	2d06      	cmp	r5, #6
 800887e:	f47f af1d 	bne.w	80086bc <_scanf_float+0x64>
 8008882:	2507      	movs	r5, #7
 8008884:	e7b1      	b.n	80087ea <_scanf_float+0x192>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	0591      	lsls	r1, r2, #22
 800888a:	f57f af17 	bpl.w	80086bc <_scanf_float+0x64>
 800888e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008892:	6022      	str	r2, [r4, #0]
 8008894:	f8cd 9008 	str.w	r9, [sp, #8]
 8008898:	e7a7      	b.n	80087ea <_scanf_float+0x192>
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088a4:	d006      	beq.n	80088b4 <_scanf_float+0x25c>
 80088a6:	0550      	lsls	r0, r2, #21
 80088a8:	f57f af08 	bpl.w	80086bc <_scanf_float+0x64>
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	f000 80de 	beq.w	8008a70 <_scanf_float+0x418>
 80088b4:	0591      	lsls	r1, r2, #22
 80088b6:	bf58      	it	pl
 80088b8:	9902      	ldrpl	r1, [sp, #8]
 80088ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088be:	bf58      	it	pl
 80088c0:	eba9 0101 	subpl.w	r1, r9, r1
 80088c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088c8:	bf58      	it	pl
 80088ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	f04f 0900 	mov.w	r9, #0
 80088d4:	e789      	b.n	80087ea <_scanf_float+0x192>
 80088d6:	f04f 0a03 	mov.w	sl, #3
 80088da:	e786      	b.n	80087ea <_scanf_float+0x192>
 80088dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088e0:	4639      	mov	r1, r7
 80088e2:	4640      	mov	r0, r8
 80088e4:	4798      	blx	r3
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f aedb 	beq.w	80086a2 <_scanf_float+0x4a>
 80088ec:	e6e6      	b.n	80086bc <_scanf_float+0x64>
 80088ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088f6:	463a      	mov	r2, r7
 80088f8:	4640      	mov	r0, r8
 80088fa:	4798      	blx	r3
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	3b01      	subs	r3, #1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	e6e8      	b.n	80086d6 <_scanf_float+0x7e>
 8008904:	1e6b      	subs	r3, r5, #1
 8008906:	2b06      	cmp	r3, #6
 8008908:	d824      	bhi.n	8008954 <_scanf_float+0x2fc>
 800890a:	2d02      	cmp	r5, #2
 800890c:	d836      	bhi.n	800897c <_scanf_float+0x324>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	429e      	cmp	r6, r3
 8008912:	f67f aee4 	bls.w	80086de <_scanf_float+0x86>
 8008916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800891e:	463a      	mov	r2, r7
 8008920:	4640      	mov	r0, r8
 8008922:	4798      	blx	r3
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	3b01      	subs	r3, #1
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	e7f0      	b.n	800890e <_scanf_float+0x2b6>
 800892c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008930:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008934:	463a      	mov	r2, r7
 8008936:	4640      	mov	r0, r8
 8008938:	4798      	blx	r3
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	6123      	str	r3, [r4, #16]
 8008940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008944:	fa5f fa8a 	uxtb.w	sl, sl
 8008948:	f1ba 0f02 	cmp.w	sl, #2
 800894c:	d1ee      	bne.n	800892c <_scanf_float+0x2d4>
 800894e:	3d03      	subs	r5, #3
 8008950:	b2ed      	uxtb	r5, r5
 8008952:	1b76      	subs	r6, r6, r5
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	05da      	lsls	r2, r3, #23
 8008958:	d530      	bpl.n	80089bc <_scanf_float+0x364>
 800895a:	055b      	lsls	r3, r3, #21
 800895c:	d511      	bpl.n	8008982 <_scanf_float+0x32a>
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	429e      	cmp	r6, r3
 8008962:	f67f aebc 	bls.w	80086de <_scanf_float+0x86>
 8008966:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800896a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800896e:	463a      	mov	r2, r7
 8008970:	4640      	mov	r0, r8
 8008972:	4798      	blx	r3
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	3b01      	subs	r3, #1
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	e7f0      	b.n	800895e <_scanf_float+0x306>
 800897c:	46aa      	mov	sl, r5
 800897e:	46b3      	mov	fp, r6
 8008980:	e7de      	b.n	8008940 <_scanf_float+0x2e8>
 8008982:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	2965      	cmp	r1, #101	@ 0x65
 800898a:	f103 33ff 	add.w	r3, r3, #4294967295
 800898e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	d00c      	beq.n	80089b0 <_scanf_float+0x358>
 8008996:	2945      	cmp	r1, #69	@ 0x45
 8008998:	d00a      	beq.n	80089b0 <_scanf_float+0x358>
 800899a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800899e:	463a      	mov	r2, r7
 80089a0:	4640      	mov	r0, r8
 80089a2:	4798      	blx	r3
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	1eb5      	subs	r5, r6, #2
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089b4:	463a      	mov	r2, r7
 80089b6:	4640      	mov	r0, r8
 80089b8:	4798      	blx	r3
 80089ba:	462e      	mov	r6, r5
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	f012 0210 	ands.w	r2, r2, #16
 80089c2:	d001      	beq.n	80089c8 <_scanf_float+0x370>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e68b      	b.n	80086e0 <_scanf_float+0x88>
 80089c8:	7032      	strb	r2, [r6, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d4:	d11c      	bne.n	8008a10 <_scanf_float+0x3b8>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	454b      	cmp	r3, r9
 80089da:	eba3 0209 	sub.w	r2, r3, r9
 80089de:	d123      	bne.n	8008a28 <_scanf_float+0x3d0>
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	4640      	mov	r0, r8
 80089e6:	f002 fc17 	bl	800b218 <_strtod_r>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f011 0f02 	tst.w	r1, #2
 80089f4:	ec57 6b10 	vmov	r6, r7, d0
 80089f8:	f103 0204 	add.w	r2, r3, #4
 80089fc:	d01f      	beq.n	8008a3e <_scanf_float+0x3e6>
 80089fe:	9903      	ldr	r1, [sp, #12]
 8008a00:	600a      	str	r2, [r1, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	e9c3 6700 	strd	r6, r7, [r3]
 8008a08:	68e3      	ldr	r3, [r4, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60e3      	str	r3, [r4, #12]
 8008a0e:	e7d9      	b.n	80089c4 <_scanf_float+0x36c>
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0e4      	beq.n	80089e0 <_scanf_float+0x388>
 8008a16:	9905      	ldr	r1, [sp, #20]
 8008a18:	230a      	movs	r3, #10
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	f002 fc7b 	bl	800b318 <_strtol_r>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	9e05      	ldr	r6, [sp, #20]
 8008a26:	1ac2      	subs	r2, r0, r3
 8008a28:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a2c:	429e      	cmp	r6, r3
 8008a2e:	bf28      	it	cs
 8008a30:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a34:	4910      	ldr	r1, [pc, #64]	@ (8008a78 <_scanf_float+0x420>)
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f8f6 	bl	8008c28 <siprintf>
 8008a3c:	e7d0      	b.n	80089e0 <_scanf_float+0x388>
 8008a3e:	f011 0f04 	tst.w	r1, #4
 8008a42:	9903      	ldr	r1, [sp, #12]
 8008a44:	600a      	str	r2, [r1, #0]
 8008a46:	d1dc      	bne.n	8008a02 <_scanf_float+0x3aa>
 8008a48:	681d      	ldr	r5, [r3, #0]
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4639      	mov	r1, r7
 8008a52:	f7f8 f88b 	bl	8000b6c <__aeabi_dcmpun>
 8008a56:	b128      	cbz	r0, 8008a64 <_scanf_float+0x40c>
 8008a58:	4808      	ldr	r0, [pc, #32]	@ (8008a7c <_scanf_float+0x424>)
 8008a5a:	f000 f9d7 	bl	8008e0c <nanf>
 8008a5e:	ed85 0a00 	vstr	s0, [r5]
 8008a62:	e7d1      	b.n	8008a08 <_scanf_float+0x3b0>
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f8 f8de 	bl	8000c28 <__aeabi_d2f>
 8008a6c:	6028      	str	r0, [r5, #0]
 8008a6e:	e7cb      	b.n	8008a08 <_scanf_float+0x3b0>
 8008a70:	f04f 0900 	mov.w	r9, #0
 8008a74:	e629      	b.n	80086ca <_scanf_float+0x72>
 8008a76:	bf00      	nop
 8008a78:	0800d470 	.word	0x0800d470
 8008a7c:	0800d805 	.word	0x0800d805

08008a80 <std>:
 8008a80:	2300      	movs	r3, #0
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8e:	6083      	str	r3, [r0, #8]
 8008a90:	8181      	strh	r1, [r0, #12]
 8008a92:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a94:	81c2      	strh	r2, [r0, #14]
 8008a96:	6183      	str	r3, [r0, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	305c      	adds	r0, #92	@ 0x5c
 8008a9e:	f000 f926 	bl	8008cee <memset>
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <std+0x58>)
 8008aa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x5c>)
 8008aa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae0 <std+0x60>)
 8008aac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <std+0x64>)
 8008ab0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae8 <std+0x68>)
 8008ab4:	6224      	str	r4, [r4, #32]
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d006      	beq.n	8008ac8 <std+0x48>
 8008aba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008abe:	4294      	cmp	r4, r2
 8008ac0:	d002      	beq.n	8008ac8 <std+0x48>
 8008ac2:	33d0      	adds	r3, #208	@ 0xd0
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d105      	bne.n	8008ad4 <std+0x54>
 8008ac8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	f000 b98a 	b.w	8008de8 <__retarget_lock_init_recursive>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08008c69 	.word	0x08008c69
 8008adc:	08008c8b 	.word	0x08008c8b
 8008ae0:	08008cc3 	.word	0x08008cc3
 8008ae4:	08008ce7 	.word	0x08008ce7
 8008ae8:	20004cdc 	.word	0x20004cdc

08008aec <stdio_exit_handler>:
 8008aec:	4a02      	ldr	r2, [pc, #8]	@ (8008af8 <stdio_exit_handler+0xc>)
 8008aee:	4903      	ldr	r1, [pc, #12]	@ (8008afc <stdio_exit_handler+0x10>)
 8008af0:	4803      	ldr	r0, [pc, #12]	@ (8008b00 <stdio_exit_handler+0x14>)
 8008af2:	f000 b869 	b.w	8008bc8 <_fwalk_sglue>
 8008af6:	bf00      	nop
 8008af8:	20000054 	.word	0x20000054
 8008afc:	0800b959 	.word	0x0800b959
 8008b00:	20000064 	.word	0x20000064

08008b04 <cleanup_stdio>:
 8008b04:	6841      	ldr	r1, [r0, #4]
 8008b06:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <cleanup_stdio+0x34>)
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d001      	beq.n	8008b14 <cleanup_stdio+0x10>
 8008b10:	f002 ff22 	bl	800b958 <_fflush_r>
 8008b14:	68a1      	ldr	r1, [r4, #8]
 8008b16:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <cleanup_stdio+0x38>)
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	d002      	beq.n	8008b22 <cleanup_stdio+0x1e>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f002 ff1b 	bl	800b958 <_fflush_r>
 8008b22:	68e1      	ldr	r1, [r4, #12]
 8008b24:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <cleanup_stdio+0x3c>)
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d004      	beq.n	8008b34 <cleanup_stdio+0x30>
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b30:	f002 bf12 	b.w	800b958 <_fflush_r>
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	bf00      	nop
 8008b38:	20004cdc 	.word	0x20004cdc
 8008b3c:	20004d44 	.word	0x20004d44
 8008b40:	20004dac 	.word	0x20004dac

08008b44 <global_stdio_init.part.0>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <global_stdio_init.part.0+0x30>)
 8008b48:	4c0b      	ldr	r4, [pc, #44]	@ (8008b78 <global_stdio_init.part.0+0x34>)
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b7c <global_stdio_init.part.0+0x38>)
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	2200      	movs	r2, #0
 8008b52:	2104      	movs	r1, #4
 8008b54:	f7ff ff94 	bl	8008a80 <std>
 8008b58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	2109      	movs	r1, #9
 8008b60:	f7ff ff8e 	bl	8008a80 <std>
 8008b64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b68:	2202      	movs	r2, #2
 8008b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6e:	2112      	movs	r1, #18
 8008b70:	f7ff bf86 	b.w	8008a80 <std>
 8008b74:	20004e14 	.word	0x20004e14
 8008b78:	20004cdc 	.word	0x20004cdc
 8008b7c:	08008aed 	.word	0x08008aed

08008b80 <__sfp_lock_acquire>:
 8008b80:	4801      	ldr	r0, [pc, #4]	@ (8008b88 <__sfp_lock_acquire+0x8>)
 8008b82:	f000 b932 	b.w	8008dea <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	20004e1d 	.word	0x20004e1d

08008b8c <__sfp_lock_release>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	@ (8008b94 <__sfp_lock_release+0x8>)
 8008b8e:	f000 b92d 	b.w	8008dec <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	20004e1d 	.word	0x20004e1d

08008b98 <__sinit>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	f7ff fff0 	bl	8008b80 <__sfp_lock_acquire>
 8008ba0:	6a23      	ldr	r3, [r4, #32]
 8008ba2:	b11b      	cbz	r3, 8008bac <__sinit+0x14>
 8008ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba8:	f7ff bff0 	b.w	8008b8c <__sfp_lock_release>
 8008bac:	4b04      	ldr	r3, [pc, #16]	@ (8008bc0 <__sinit+0x28>)
 8008bae:	6223      	str	r3, [r4, #32]
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <__sinit+0x2c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f5      	bne.n	8008ba4 <__sinit+0xc>
 8008bb8:	f7ff ffc4 	bl	8008b44 <global_stdio_init.part.0>
 8008bbc:	e7f2      	b.n	8008ba4 <__sinit+0xc>
 8008bbe:	bf00      	nop
 8008bc0:	08008b05 	.word	0x08008b05
 8008bc4:	20004e14 	.word	0x20004e14

08008bc8 <_fwalk_sglue>:
 8008bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	4607      	mov	r7, r0
 8008bce:	4688      	mov	r8, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8008bdc:	d505      	bpl.n	8008bea <_fwalk_sglue+0x22>
 8008bde:	6824      	ldr	r4, [r4, #0]
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d1f7      	bne.n	8008bd4 <_fwalk_sglue+0xc>
 8008be4:	4630      	mov	r0, r6
 8008be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d907      	bls.n	8008c00 <_fwalk_sglue+0x38>
 8008bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	d003      	beq.n	8008c00 <_fwalk_sglue+0x38>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	4306      	orrs	r6, r0
 8008c00:	3568      	adds	r5, #104	@ 0x68
 8008c02:	e7e9      	b.n	8008bd8 <_fwalk_sglue+0x10>

08008c04 <iprintf>:
 8008c04:	b40f      	push	{r0, r1, r2, r3}
 8008c06:	b507      	push	{r0, r1, r2, lr}
 8008c08:	4906      	ldr	r1, [pc, #24]	@ (8008c24 <iprintf+0x20>)
 8008c0a:	ab04      	add	r3, sp, #16
 8008c0c:	6808      	ldr	r0, [r1, #0]
 8008c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c12:	6881      	ldr	r1, [r0, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	f002 fd03 	bl	800b620 <_vfiprintf_r>
 8008c1a:	b003      	add	sp, #12
 8008c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c20:	b004      	add	sp, #16
 8008c22:	4770      	bx	lr
 8008c24:	20000060 	.word	0x20000060

08008c28 <siprintf>:
 8008c28:	b40e      	push	{r1, r2, r3}
 8008c2a:	b500      	push	{lr}
 8008c2c:	b09c      	sub	sp, #112	@ 0x70
 8008c2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c30:	9002      	str	r0, [sp, #8]
 8008c32:	9006      	str	r0, [sp, #24]
 8008c34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c38:	4809      	ldr	r0, [pc, #36]	@ (8008c60 <siprintf+0x38>)
 8008c3a:	9107      	str	r1, [sp, #28]
 8008c3c:	9104      	str	r1, [sp, #16]
 8008c3e:	4909      	ldr	r1, [pc, #36]	@ (8008c64 <siprintf+0x3c>)
 8008c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c44:	9105      	str	r1, [sp, #20]
 8008c46:	6800      	ldr	r0, [r0, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	a902      	add	r1, sp, #8
 8008c4c:	f002 fbc2 	bl	800b3d4 <_svfiprintf_r>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	b01c      	add	sp, #112	@ 0x70
 8008c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c5c:	b003      	add	sp, #12
 8008c5e:	4770      	bx	lr
 8008c60:	20000060 	.word	0x20000060
 8008c64:	ffff0208 	.word	0xffff0208

08008c68 <__sread>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	f000 f86c 	bl	8008d4c <_read_r>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	bfab      	itete	ge
 8008c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c7c:	181b      	addge	r3, r3, r0
 8008c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c82:	bfac      	ite	ge
 8008c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c86:	81a3      	strhlt	r3, [r4, #12]
 8008c88:	bd10      	pop	{r4, pc}

08008c8a <__swrite>:
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	461f      	mov	r7, r3
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	05db      	lsls	r3, r3, #23
 8008c94:	4605      	mov	r5, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	4616      	mov	r6, r2
 8008c9a:	d505      	bpl.n	8008ca8 <__swrite+0x1e>
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f000 f840 	bl	8008d28 <_lseek_r>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	f000 b857 	b.w	8008d70 <_write_r>

08008cc2 <__sseek>:
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cca:	f000 f82d 	bl	8008d28 <_lseek_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	bf15      	itete	ne
 8008cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cde:	81a3      	strheq	r3, [r4, #12]
 8008ce0:	bf18      	it	ne
 8008ce2:	81a3      	strhne	r3, [r4, #12]
 8008ce4:	bd10      	pop	{r4, pc}

08008ce6 <__sclose>:
 8008ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cea:	f000 b80d 	b.w	8008d08 <_close_r>

08008cee <memset>:
 8008cee:	4402      	add	r2, r0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d100      	bne.n	8008cf8 <memset+0xa>
 8008cf6:	4770      	bx	lr
 8008cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfc:	e7f9      	b.n	8008cf2 <memset+0x4>
	...

08008d00 <_localeconv_r>:
 8008d00:	4800      	ldr	r0, [pc, #0]	@ (8008d04 <_localeconv_r+0x4>)
 8008d02:	4770      	bx	lr
 8008d04:	200001a0 	.word	0x200001a0

08008d08 <_close_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d06      	ldr	r5, [pc, #24]	@ (8008d24 <_close_r+0x1c>)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	602b      	str	r3, [r5, #0]
 8008d14:	f7f9 f858 	bl	8001dc8 <_close>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_close_r+0x1a>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_close_r+0x1a>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	20004e18 	.word	0x20004e18

08008d28 <_lseek_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	@ (8008d48 <_lseek_r+0x20>)
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	4608      	mov	r0, r1
 8008d30:	4611      	mov	r1, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	602a      	str	r2, [r5, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7f9 f86d 	bl	8001e16 <_lseek>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_lseek_r+0x1e>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_lseek_r+0x1e>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20004e18 	.word	0x20004e18

08008d4c <_read_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	@ (8008d6c <_read_r+0x20>)
 8008d50:	4604      	mov	r4, r0
 8008d52:	4608      	mov	r0, r1
 8008d54:	4611      	mov	r1, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7f8 fffb 	bl	8001d56 <_read>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_read_r+0x1e>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_read_r+0x1e>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20004e18 	.word	0x20004e18

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	@ (8008d90 <_write_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f9 f806 	bl	8001d90 <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20004e18 	.word	0x20004e18

08008d94 <__errno>:
 8008d94:	4b01      	ldr	r3, [pc, #4]	@ (8008d9c <__errno+0x8>)
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000060 	.word	0x20000060

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4d0d      	ldr	r5, [pc, #52]	@ (8008dd8 <__libc_init_array+0x38>)
 8008da4:	4c0d      	ldr	r4, [pc, #52]	@ (8008ddc <__libc_init_array+0x3c>)
 8008da6:	1b64      	subs	r4, r4, r5
 8008da8:	10a4      	asrs	r4, r4, #2
 8008daa:	2600      	movs	r6, #0
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	4d0b      	ldr	r5, [pc, #44]	@ (8008de0 <__libc_init_array+0x40>)
 8008db2:	4c0c      	ldr	r4, [pc, #48]	@ (8008de4 <__libc_init_array+0x44>)
 8008db4:	f004 fad2 	bl	800d35c <_init>
 8008db8:	1b64      	subs	r4, r4, r5
 8008dba:	10a4      	asrs	r4, r4, #2
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc8:	4798      	blx	r3
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd2:	4798      	blx	r3
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	0800d8a0 	.word	0x0800d8a0
 8008ddc:	0800d8a0 	.word	0x0800d8a0
 8008de0:	0800d8a0 	.word	0x0800d8a0
 8008de4:	0800d8a4 	.word	0x0800d8a4

08008de8 <__retarget_lock_init_recursive>:
 8008de8:	4770      	bx	lr

08008dea <__retarget_lock_acquire_recursive>:
 8008dea:	4770      	bx	lr

08008dec <__retarget_lock_release_recursive>:
 8008dec:	4770      	bx	lr

08008dee <memcpy>:
 8008dee:	440a      	add	r2, r1
 8008df0:	4291      	cmp	r1, r2
 8008df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df6:	d100      	bne.n	8008dfa <memcpy+0xc>
 8008df8:	4770      	bx	lr
 8008dfa:	b510      	push	{r4, lr}
 8008dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e04:	4291      	cmp	r1, r2
 8008e06:	d1f9      	bne.n	8008dfc <memcpy+0xe>
 8008e08:	bd10      	pop	{r4, pc}
	...

08008e0c <nanf>:
 8008e0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e14 <nanf+0x8>
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	7fc00000 	.word	0x7fc00000

08008e18 <quorem>:
 8008e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	6903      	ldr	r3, [r0, #16]
 8008e1e:	690c      	ldr	r4, [r1, #16]
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	4607      	mov	r7, r0
 8008e24:	db7e      	blt.n	8008f24 <quorem+0x10c>
 8008e26:	3c01      	subs	r4, #1
 8008e28:	f101 0814 	add.w	r8, r1, #20
 8008e2c:	00a3      	lsls	r3, r4, #2
 8008e2e:	f100 0514 	add.w	r5, r0, #20
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e42:	3301      	adds	r3, #1
 8008e44:	429a      	cmp	r2, r3
 8008e46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e4e:	d32e      	bcc.n	8008eae <quorem+0x96>
 8008e50:	f04f 0a00 	mov.w	sl, #0
 8008e54:	46c4      	mov	ip, r8
 8008e56:	46ae      	mov	lr, r5
 8008e58:	46d3      	mov	fp, sl
 8008e5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e5e:	b298      	uxth	r0, r3
 8008e60:	fb06 a000 	mla	r0, r6, r0, sl
 8008e64:	0c02      	lsrs	r2, r0, #16
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	fb06 2303 	mla	r3, r6, r3, r2
 8008e6c:	f8de 2000 	ldr.w	r2, [lr]
 8008e70:	b280      	uxth	r0, r0
 8008e72:	b292      	uxth	r2, r2
 8008e74:	1a12      	subs	r2, r2, r0
 8008e76:	445a      	add	r2, fp
 8008e78:	f8de 0000 	ldr.w	r0, [lr]
 8008e7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e90:	45e1      	cmp	r9, ip
 8008e92:	f84e 2b04 	str.w	r2, [lr], #4
 8008e96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e9a:	d2de      	bcs.n	8008e5a <quorem+0x42>
 8008e9c:	9b00      	ldr	r3, [sp, #0]
 8008e9e:	58eb      	ldr	r3, [r5, r3]
 8008ea0:	b92b      	cbnz	r3, 8008eae <quorem+0x96>
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	429d      	cmp	r5, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	d32f      	bcc.n	8008f0c <quorem+0xf4>
 8008eac:	613c      	str	r4, [r7, #16]
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f001 f9c2 	bl	800a238 <__mcmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	db25      	blt.n	8008f04 <quorem+0xec>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ec0:	f8d1 c000 	ldr.w	ip, [r1]
 8008ec4:	fa1f fe82 	uxth.w	lr, r2
 8008ec8:	fa1f f38c 	uxth.w	r3, ip
 8008ecc:	eba3 030e 	sub.w	r3, r3, lr
 8008ed0:	4403      	add	r3, r0
 8008ed2:	0c12      	lsrs	r2, r2, #16
 8008ed4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ed8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ee2:	45c1      	cmp	r9, r8
 8008ee4:	f841 3b04 	str.w	r3, [r1], #4
 8008ee8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008eec:	d2e6      	bcs.n	8008ebc <quorem+0xa4>
 8008eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ef6:	b922      	cbnz	r2, 8008f02 <quorem+0xea>
 8008ef8:	3b04      	subs	r3, #4
 8008efa:	429d      	cmp	r5, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	d30b      	bcc.n	8008f18 <quorem+0x100>
 8008f00:	613c      	str	r4, [r7, #16]
 8008f02:	3601      	adds	r6, #1
 8008f04:	4630      	mov	r0, r6
 8008f06:	b003      	add	sp, #12
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	3b04      	subs	r3, #4
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	d1cb      	bne.n	8008eac <quorem+0x94>
 8008f14:	3c01      	subs	r4, #1
 8008f16:	e7c6      	b.n	8008ea6 <quorem+0x8e>
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	d1ef      	bne.n	8008f00 <quorem+0xe8>
 8008f20:	3c01      	subs	r4, #1
 8008f22:	e7ea      	b.n	8008efa <quorem+0xe2>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7ee      	b.n	8008f06 <quorem+0xee>

08008f28 <_dtoa_r>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	69c7      	ldr	r7, [r0, #28]
 8008f2e:	b099      	sub	sp, #100	@ 0x64
 8008f30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f34:	ec55 4b10 	vmov	r4, r5, d0
 8008f38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f3c:	4683      	mov	fp, r0
 8008f3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f42:	b97f      	cbnz	r7, 8008f64 <_dtoa_r+0x3c>
 8008f44:	2010      	movs	r0, #16
 8008f46:	f000 fdfd 	bl	8009b44 <malloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f50:	b920      	cbnz	r0, 8008f5c <_dtoa_r+0x34>
 8008f52:	4ba7      	ldr	r3, [pc, #668]	@ (80091f0 <_dtoa_r+0x2c8>)
 8008f54:	21ef      	movs	r1, #239	@ 0xef
 8008f56:	48a7      	ldr	r0, [pc, #668]	@ (80091f4 <_dtoa_r+0x2cc>)
 8008f58:	f002 fdfe 	bl	800bb58 <__assert_func>
 8008f5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f60:	6007      	str	r7, [r0, #0]
 8008f62:	60c7      	str	r7, [r0, #12]
 8008f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f68:	6819      	ldr	r1, [r3, #0]
 8008f6a:	b159      	cbz	r1, 8008f84 <_dtoa_r+0x5c>
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	604a      	str	r2, [r1, #4]
 8008f70:	2301      	movs	r3, #1
 8008f72:	4093      	lsls	r3, r2
 8008f74:	608b      	str	r3, [r1, #8]
 8008f76:	4658      	mov	r0, fp
 8008f78:	f000 feda 	bl	8009d30 <_Bfree>
 8008f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	1e2b      	subs	r3, r5, #0
 8008f86:	bfb9      	ittee	lt
 8008f88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f8c:	9303      	strlt	r3, [sp, #12]
 8008f8e:	2300      	movge	r3, #0
 8008f90:	6033      	strge	r3, [r6, #0]
 8008f92:	9f03      	ldr	r7, [sp, #12]
 8008f94:	4b98      	ldr	r3, [pc, #608]	@ (80091f8 <_dtoa_r+0x2d0>)
 8008f96:	bfbc      	itt	lt
 8008f98:	2201      	movlt	r2, #1
 8008f9a:	6032      	strlt	r2, [r6, #0]
 8008f9c:	43bb      	bics	r3, r7
 8008f9e:	d112      	bne.n	8008fc6 <_dtoa_r+0x9e>
 8008fa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fac:	4323      	orrs	r3, r4
 8008fae:	f000 854d 	beq.w	8009a4c <_dtoa_r+0xb24>
 8008fb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800920c <_dtoa_r+0x2e4>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 854f 	beq.w	8009a5c <_dtoa_r+0xb34>
 8008fbe:	f10a 0303 	add.w	r3, sl, #3
 8008fc2:	f000 bd49 	b.w	8009a58 <_dtoa_r+0xb30>
 8008fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	ec51 0b17 	vmov	r0, r1, d7
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008fd6:	f7f7 fd97 	bl	8000b08 <__aeabi_dcmpeq>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	b158      	cbz	r0, 8008ff6 <_dtoa_r+0xce>
 8008fde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fe6:	b113      	cbz	r3, 8008fee <_dtoa_r+0xc6>
 8008fe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fea:	4b84      	ldr	r3, [pc, #528]	@ (80091fc <_dtoa_r+0x2d4>)
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009210 <_dtoa_r+0x2e8>
 8008ff2:	f000 bd33 	b.w	8009a5c <_dtoa_r+0xb34>
 8008ff6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ffa:	aa16      	add	r2, sp, #88	@ 0x58
 8008ffc:	a917      	add	r1, sp, #92	@ 0x5c
 8008ffe:	4658      	mov	r0, fp
 8009000:	f001 fa3a 	bl	800a478 <__d2b>
 8009004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009008:	4681      	mov	r9, r0
 800900a:	2e00      	cmp	r6, #0
 800900c:	d077      	beq.n	80090fe <_dtoa_r+0x1d6>
 800900e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009010:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800901c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009028:	4619      	mov	r1, r3
 800902a:	2200      	movs	r2, #0
 800902c:	4b74      	ldr	r3, [pc, #464]	@ (8009200 <_dtoa_r+0x2d8>)
 800902e:	f7f7 f94b 	bl	80002c8 <__aeabi_dsub>
 8009032:	a369      	add	r3, pc, #420	@ (adr r3, 80091d8 <_dtoa_r+0x2b0>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7f7 fafe 	bl	8000638 <__aeabi_dmul>
 800903c:	a368      	add	r3, pc, #416	@ (adr r3, 80091e0 <_dtoa_r+0x2b8>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 f943 	bl	80002cc <__adddf3>
 8009046:	4604      	mov	r4, r0
 8009048:	4630      	mov	r0, r6
 800904a:	460d      	mov	r5, r1
 800904c:	f7f7 fa8a 	bl	8000564 <__aeabi_i2d>
 8009050:	a365      	add	r3, pc, #404	@ (adr r3, 80091e8 <_dtoa_r+0x2c0>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 faef 	bl	8000638 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4620      	mov	r0, r4
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 f933 	bl	80002cc <__adddf3>
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	f7f7 fd95 	bl	8000b98 <__aeabi_d2iz>
 800906e:	2200      	movs	r2, #0
 8009070:	4607      	mov	r7, r0
 8009072:	2300      	movs	r3, #0
 8009074:	4620      	mov	r0, r4
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 fd50 	bl	8000b1c <__aeabi_dcmplt>
 800907c:	b140      	cbz	r0, 8009090 <_dtoa_r+0x168>
 800907e:	4638      	mov	r0, r7
 8009080:	f7f7 fa70 	bl	8000564 <__aeabi_i2d>
 8009084:	4622      	mov	r2, r4
 8009086:	462b      	mov	r3, r5
 8009088:	f7f7 fd3e 	bl	8000b08 <__aeabi_dcmpeq>
 800908c:	b900      	cbnz	r0, 8009090 <_dtoa_r+0x168>
 800908e:	3f01      	subs	r7, #1
 8009090:	2f16      	cmp	r7, #22
 8009092:	d851      	bhi.n	8009138 <_dtoa_r+0x210>
 8009094:	4b5b      	ldr	r3, [pc, #364]	@ (8009204 <_dtoa_r+0x2dc>)
 8009096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090a2:	f7f7 fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d048      	beq.n	800913c <_dtoa_r+0x214>
 80090aa:	3f01      	subs	r7, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80090b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090b2:	1b9b      	subs	r3, r3, r6
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	bf44      	itt	mi
 80090b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80090bc:	2300      	movmi	r3, #0
 80090be:	9208      	str	r2, [sp, #32]
 80090c0:	bf54      	ite	pl
 80090c2:	f04f 0800 	movpl.w	r8, #0
 80090c6:	9308      	strmi	r3, [sp, #32]
 80090c8:	2f00      	cmp	r7, #0
 80090ca:	db39      	blt.n	8009140 <_dtoa_r+0x218>
 80090cc:	9b08      	ldr	r3, [sp, #32]
 80090ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80090d0:	443b      	add	r3, r7
 80090d2:	9308      	str	r3, [sp, #32]
 80090d4:	2300      	movs	r3, #0
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d864      	bhi.n	80091a8 <_dtoa_r+0x280>
 80090de:	2b05      	cmp	r3, #5
 80090e0:	bfc4      	itt	gt
 80090e2:	3b04      	subgt	r3, #4
 80090e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80090e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e8:	f1a3 0302 	sub.w	r3, r3, #2
 80090ec:	bfcc      	ite	gt
 80090ee:	2400      	movgt	r4, #0
 80090f0:	2401      	movle	r4, #1
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d863      	bhi.n	80091be <_dtoa_r+0x296>
 80090f6:	e8df f003 	tbb	[pc, r3]
 80090fa:	372a      	.short	0x372a
 80090fc:	5535      	.short	0x5535
 80090fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009102:	441e      	add	r6, r3
 8009104:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009108:	2b20      	cmp	r3, #32
 800910a:	bfc1      	itttt	gt
 800910c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009110:	409f      	lslgt	r7, r3
 8009112:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009116:	fa24 f303 	lsrgt.w	r3, r4, r3
 800911a:	bfd6      	itet	le
 800911c:	f1c3 0320 	rsble	r3, r3, #32
 8009120:	ea47 0003 	orrgt.w	r0, r7, r3
 8009124:	fa04 f003 	lslle.w	r0, r4, r3
 8009128:	f7f7 fa0c 	bl	8000544 <__aeabi_ui2d>
 800912c:	2201      	movs	r2, #1
 800912e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009132:	3e01      	subs	r6, #1
 8009134:	9214      	str	r2, [sp, #80]	@ 0x50
 8009136:	e777      	b.n	8009028 <_dtoa_r+0x100>
 8009138:	2301      	movs	r3, #1
 800913a:	e7b8      	b.n	80090ae <_dtoa_r+0x186>
 800913c:	9012      	str	r0, [sp, #72]	@ 0x48
 800913e:	e7b7      	b.n	80090b0 <_dtoa_r+0x188>
 8009140:	427b      	negs	r3, r7
 8009142:	930a      	str	r3, [sp, #40]	@ 0x28
 8009144:	2300      	movs	r3, #0
 8009146:	eba8 0807 	sub.w	r8, r8, r7
 800914a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800914c:	e7c4      	b.n	80090d8 <_dtoa_r+0x1b0>
 800914e:	2300      	movs	r3, #0
 8009150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc35      	bgt.n	80091c4 <_dtoa_r+0x29c>
 8009158:	2301      	movs	r3, #1
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	9307      	str	r3, [sp, #28]
 800915e:	461a      	mov	r2, r3
 8009160:	920e      	str	r2, [sp, #56]	@ 0x38
 8009162:	e00b      	b.n	800917c <_dtoa_r+0x254>
 8009164:	2301      	movs	r3, #1
 8009166:	e7f3      	b.n	8009150 <_dtoa_r+0x228>
 8009168:	2300      	movs	r3, #0
 800916a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800916c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800916e:	18fb      	adds	r3, r7, r3
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	2b01      	cmp	r3, #1
 8009176:	9307      	str	r3, [sp, #28]
 8009178:	bfb8      	it	lt
 800917a:	2301      	movlt	r3, #1
 800917c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009180:	2100      	movs	r1, #0
 8009182:	2204      	movs	r2, #4
 8009184:	f102 0514 	add.w	r5, r2, #20
 8009188:	429d      	cmp	r5, r3
 800918a:	d91f      	bls.n	80091cc <_dtoa_r+0x2a4>
 800918c:	6041      	str	r1, [r0, #4]
 800918e:	4658      	mov	r0, fp
 8009190:	f000 fd8e 	bl	8009cb0 <_Balloc>
 8009194:	4682      	mov	sl, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	d13c      	bne.n	8009214 <_dtoa_r+0x2ec>
 800919a:	4b1b      	ldr	r3, [pc, #108]	@ (8009208 <_dtoa_r+0x2e0>)
 800919c:	4602      	mov	r2, r0
 800919e:	f240 11af 	movw	r1, #431	@ 0x1af
 80091a2:	e6d8      	b.n	8008f56 <_dtoa_r+0x2e>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e7e0      	b.n	800916a <_dtoa_r+0x242>
 80091a8:	2401      	movs	r4, #1
 80091aa:	2300      	movs	r3, #0
 80091ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	9307      	str	r3, [sp, #28]
 80091b8:	2200      	movs	r2, #0
 80091ba:	2312      	movs	r3, #18
 80091bc:	e7d0      	b.n	8009160 <_dtoa_r+0x238>
 80091be:	2301      	movs	r3, #1
 80091c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091c2:	e7f5      	b.n	80091b0 <_dtoa_r+0x288>
 80091c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	e7d7      	b.n	800917c <_dtoa_r+0x254>
 80091cc:	3101      	adds	r1, #1
 80091ce:	0052      	lsls	r2, r2, #1
 80091d0:	e7d8      	b.n	8009184 <_dtoa_r+0x25c>
 80091d2:	bf00      	nop
 80091d4:	f3af 8000 	nop.w
 80091d8:	636f4361 	.word	0x636f4361
 80091dc:	3fd287a7 	.word	0x3fd287a7
 80091e0:	8b60c8b3 	.word	0x8b60c8b3
 80091e4:	3fc68a28 	.word	0x3fc68a28
 80091e8:	509f79fb 	.word	0x509f79fb
 80091ec:	3fd34413 	.word	0x3fd34413
 80091f0:	0800d482 	.word	0x0800d482
 80091f4:	0800d499 	.word	0x0800d499
 80091f8:	7ff00000 	.word	0x7ff00000
 80091fc:	0800d44d 	.word	0x0800d44d
 8009200:	3ff80000 	.word	0x3ff80000
 8009204:	0800d590 	.word	0x0800d590
 8009208:	0800d4f1 	.word	0x0800d4f1
 800920c:	0800d47e 	.word	0x0800d47e
 8009210:	0800d44c 	.word	0x0800d44c
 8009214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009218:	6018      	str	r0, [r3, #0]
 800921a:	9b07      	ldr	r3, [sp, #28]
 800921c:	2b0e      	cmp	r3, #14
 800921e:	f200 80a4 	bhi.w	800936a <_dtoa_r+0x442>
 8009222:	2c00      	cmp	r4, #0
 8009224:	f000 80a1 	beq.w	800936a <_dtoa_r+0x442>
 8009228:	2f00      	cmp	r7, #0
 800922a:	dd33      	ble.n	8009294 <_dtoa_r+0x36c>
 800922c:	4bad      	ldr	r3, [pc, #692]	@ (80094e4 <_dtoa_r+0x5bc>)
 800922e:	f007 020f 	and.w	r2, r7, #15
 8009232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009236:	ed93 7b00 	vldr	d7, [r3]
 800923a:	05f8      	lsls	r0, r7, #23
 800923c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009240:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009244:	d516      	bpl.n	8009274 <_dtoa_r+0x34c>
 8009246:	4ba8      	ldr	r3, [pc, #672]	@ (80094e8 <_dtoa_r+0x5c0>)
 8009248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800924c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009250:	f7f7 fb1c 	bl	800088c <__aeabi_ddiv>
 8009254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009258:	f004 040f 	and.w	r4, r4, #15
 800925c:	2603      	movs	r6, #3
 800925e:	4da2      	ldr	r5, [pc, #648]	@ (80094e8 <_dtoa_r+0x5c0>)
 8009260:	b954      	cbnz	r4, 8009278 <_dtoa_r+0x350>
 8009262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800926a:	f7f7 fb0f 	bl	800088c <__aeabi_ddiv>
 800926e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009272:	e028      	b.n	80092c6 <_dtoa_r+0x39e>
 8009274:	2602      	movs	r6, #2
 8009276:	e7f2      	b.n	800925e <_dtoa_r+0x336>
 8009278:	07e1      	lsls	r1, r4, #31
 800927a:	d508      	bpl.n	800928e <_dtoa_r+0x366>
 800927c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009280:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009284:	f7f7 f9d8 	bl	8000638 <__aeabi_dmul>
 8009288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800928c:	3601      	adds	r6, #1
 800928e:	1064      	asrs	r4, r4, #1
 8009290:	3508      	adds	r5, #8
 8009292:	e7e5      	b.n	8009260 <_dtoa_r+0x338>
 8009294:	f000 80d2 	beq.w	800943c <_dtoa_r+0x514>
 8009298:	427c      	negs	r4, r7
 800929a:	4b92      	ldr	r3, [pc, #584]	@ (80094e4 <_dtoa_r+0x5bc>)
 800929c:	4d92      	ldr	r5, [pc, #584]	@ (80094e8 <_dtoa_r+0x5c0>)
 800929e:	f004 020f 	and.w	r2, r4, #15
 80092a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ae:	f7f7 f9c3 	bl	8000638 <__aeabi_dmul>
 80092b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b6:	1124      	asrs	r4, r4, #4
 80092b8:	2300      	movs	r3, #0
 80092ba:	2602      	movs	r6, #2
 80092bc:	2c00      	cmp	r4, #0
 80092be:	f040 80b2 	bne.w	8009426 <_dtoa_r+0x4fe>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1d3      	bne.n	800926e <_dtoa_r+0x346>
 80092c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80b7 	beq.w	8009440 <_dtoa_r+0x518>
 80092d2:	4b86      	ldr	r3, [pc, #536]	@ (80094ec <_dtoa_r+0x5c4>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	4620      	mov	r0, r4
 80092d8:	4629      	mov	r1, r5
 80092da:	f7f7 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f000 80ae 	beq.w	8009440 <_dtoa_r+0x518>
 80092e4:	9b07      	ldr	r3, [sp, #28]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 80aa 	beq.w	8009440 <_dtoa_r+0x518>
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd37      	ble.n	8009362 <_dtoa_r+0x43a>
 80092f2:	1e7b      	subs	r3, r7, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	4620      	mov	r0, r4
 80092f8:	4b7d      	ldr	r3, [pc, #500]	@ (80094f0 <_dtoa_r+0x5c8>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 f99b 	bl	8000638 <__aeabi_dmul>
 8009302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009306:	9c00      	ldr	r4, [sp, #0]
 8009308:	3601      	adds	r6, #1
 800930a:	4630      	mov	r0, r6
 800930c:	f7f7 f92a 	bl	8000564 <__aeabi_i2d>
 8009310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009314:	f7f7 f990 	bl	8000638 <__aeabi_dmul>
 8009318:	4b76      	ldr	r3, [pc, #472]	@ (80094f4 <_dtoa_r+0x5cc>)
 800931a:	2200      	movs	r2, #0
 800931c:	f7f6 ffd6 	bl	80002cc <__adddf3>
 8009320:	4605      	mov	r5, r0
 8009322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009326:	2c00      	cmp	r4, #0
 8009328:	f040 808d 	bne.w	8009446 <_dtoa_r+0x51e>
 800932c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009330:	4b71      	ldr	r3, [pc, #452]	@ (80094f8 <_dtoa_r+0x5d0>)
 8009332:	2200      	movs	r2, #0
 8009334:	f7f6 ffc8 	bl	80002c8 <__aeabi_dsub>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009340:	462a      	mov	r2, r5
 8009342:	4633      	mov	r3, r6
 8009344:	f7f7 fc08 	bl	8000b58 <__aeabi_dcmpgt>
 8009348:	2800      	cmp	r0, #0
 800934a:	f040 828b 	bne.w	8009864 <_dtoa_r+0x93c>
 800934e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009352:	462a      	mov	r2, r5
 8009354:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009358:	f7f7 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 8128 	bne.w	80095b2 <_dtoa_r+0x68a>
 8009362:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009366:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800936a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f2c0 815a 	blt.w	8009626 <_dtoa_r+0x6fe>
 8009372:	2f0e      	cmp	r7, #14
 8009374:	f300 8157 	bgt.w	8009626 <_dtoa_r+0x6fe>
 8009378:	4b5a      	ldr	r3, [pc, #360]	@ (80094e4 <_dtoa_r+0x5bc>)
 800937a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800937e:	ed93 7b00 	vldr	d7, [r3]
 8009382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	ed8d 7b00 	vstr	d7, [sp]
 800938a:	da03      	bge.n	8009394 <_dtoa_r+0x46c>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f340 8101 	ble.w	8009596 <_dtoa_r+0x66e>
 8009394:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009398:	4656      	mov	r6, sl
 800939a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 fa73 	bl	800088c <__aeabi_ddiv>
 80093a6:	f7f7 fbf7 	bl	8000b98 <__aeabi_d2iz>
 80093aa:	4680      	mov	r8, r0
 80093ac:	f7f7 f8da 	bl	8000564 <__aeabi_i2d>
 80093b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b4:	f7f7 f940 	bl	8000638 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093c4:	f7f6 ff80 	bl	80002c8 <__aeabi_dsub>
 80093c8:	f806 4b01 	strb.w	r4, [r6], #1
 80093cc:	9d07      	ldr	r5, [sp, #28]
 80093ce:	eba6 040a 	sub.w	r4, r6, sl
 80093d2:	42a5      	cmp	r5, r4
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	f040 8117 	bne.w	800960a <_dtoa_r+0x6e2>
 80093dc:	f7f6 ff76 	bl	80002cc <__adddf3>
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	f7f7 fbb6 	bl	8000b58 <__aeabi_dcmpgt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f040 80f9 	bne.w	80095e4 <_dtoa_r+0x6bc>
 80093f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f7 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 80093fe:	b118      	cbz	r0, 8009408 <_dtoa_r+0x4e0>
 8009400:	f018 0f01 	tst.w	r8, #1
 8009404:	f040 80ee 	bne.w	80095e4 <_dtoa_r+0x6bc>
 8009408:	4649      	mov	r1, r9
 800940a:	4658      	mov	r0, fp
 800940c:	f000 fc90 	bl	8009d30 <_Bfree>
 8009410:	2300      	movs	r3, #0
 8009412:	7033      	strb	r3, [r6, #0]
 8009414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009416:	3701      	adds	r7, #1
 8009418:	601f      	str	r7, [r3, #0]
 800941a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 831d 	beq.w	8009a5c <_dtoa_r+0xb34>
 8009422:	601e      	str	r6, [r3, #0]
 8009424:	e31a      	b.n	8009a5c <_dtoa_r+0xb34>
 8009426:	07e2      	lsls	r2, r4, #31
 8009428:	d505      	bpl.n	8009436 <_dtoa_r+0x50e>
 800942a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	3601      	adds	r6, #1
 8009434:	2301      	movs	r3, #1
 8009436:	1064      	asrs	r4, r4, #1
 8009438:	3508      	adds	r5, #8
 800943a:	e73f      	b.n	80092bc <_dtoa_r+0x394>
 800943c:	2602      	movs	r6, #2
 800943e:	e742      	b.n	80092c6 <_dtoa_r+0x39e>
 8009440:	9c07      	ldr	r4, [sp, #28]
 8009442:	9704      	str	r7, [sp, #16]
 8009444:	e761      	b.n	800930a <_dtoa_r+0x3e2>
 8009446:	4b27      	ldr	r3, [pc, #156]	@ (80094e4 <_dtoa_r+0x5bc>)
 8009448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800944a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800944e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009452:	4454      	add	r4, sl
 8009454:	2900      	cmp	r1, #0
 8009456:	d053      	beq.n	8009500 <_dtoa_r+0x5d8>
 8009458:	4928      	ldr	r1, [pc, #160]	@ (80094fc <_dtoa_r+0x5d4>)
 800945a:	2000      	movs	r0, #0
 800945c:	f7f7 fa16 	bl	800088c <__aeabi_ddiv>
 8009460:	4633      	mov	r3, r6
 8009462:	462a      	mov	r2, r5
 8009464:	f7f6 ff30 	bl	80002c8 <__aeabi_dsub>
 8009468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800946c:	4656      	mov	r6, sl
 800946e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009472:	f7f7 fb91 	bl	8000b98 <__aeabi_d2iz>
 8009476:	4605      	mov	r5, r0
 8009478:	f7f7 f874 	bl	8000564 <__aeabi_i2d>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009484:	f7f6 ff20 	bl	80002c8 <__aeabi_dsub>
 8009488:	3530      	adds	r5, #48	@ 0x30
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009492:	f806 5b01 	strb.w	r5, [r6], #1
 8009496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800949a:	f7f7 fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d171      	bne.n	8009586 <_dtoa_r+0x65e>
 80094a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094a6:	4911      	ldr	r1, [pc, #68]	@ (80094ec <_dtoa_r+0x5c4>)
 80094a8:	2000      	movs	r0, #0
 80094aa:	f7f6 ff0d 	bl	80002c8 <__aeabi_dsub>
 80094ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094b2:	f7f7 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f040 8095 	bne.w	80095e6 <_dtoa_r+0x6be>
 80094bc:	42a6      	cmp	r6, r4
 80094be:	f43f af50 	beq.w	8009362 <_dtoa_r+0x43a>
 80094c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094c6:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <_dtoa_r+0x5c8>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	f7f7 f8b5 	bl	8000638 <__aeabi_dmul>
 80094ce:	4b08      	ldr	r3, [pc, #32]	@ (80094f0 <_dtoa_r+0x5c8>)
 80094d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094d4:	2200      	movs	r2, #0
 80094d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094da:	f7f7 f8ad 	bl	8000638 <__aeabi_dmul>
 80094de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e2:	e7c4      	b.n	800946e <_dtoa_r+0x546>
 80094e4:	0800d590 	.word	0x0800d590
 80094e8:	0800d568 	.word	0x0800d568
 80094ec:	3ff00000 	.word	0x3ff00000
 80094f0:	40240000 	.word	0x40240000
 80094f4:	401c0000 	.word	0x401c0000
 80094f8:	40140000 	.word	0x40140000
 80094fc:	3fe00000 	.word	0x3fe00000
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	f7f7 f898 	bl	8000638 <__aeabi_dmul>
 8009508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800950c:	9415      	str	r4, [sp, #84]	@ 0x54
 800950e:	4656      	mov	r6, sl
 8009510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009514:	f7f7 fb40 	bl	8000b98 <__aeabi_d2iz>
 8009518:	4605      	mov	r5, r0
 800951a:	f7f7 f823 	bl	8000564 <__aeabi_i2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009526:	f7f6 fecf 	bl	80002c8 <__aeabi_dsub>
 800952a:	3530      	adds	r5, #48	@ 0x30
 800952c:	f806 5b01 	strb.w	r5, [r6], #1
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	42a6      	cmp	r6, r4
 8009536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800953a:	f04f 0200 	mov.w	r2, #0
 800953e:	d124      	bne.n	800958a <_dtoa_r+0x662>
 8009540:	4bac      	ldr	r3, [pc, #688]	@ (80097f4 <_dtoa_r+0x8cc>)
 8009542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009546:	f7f6 fec1 	bl	80002cc <__adddf3>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009552:	f7f7 fb01 	bl	8000b58 <__aeabi_dcmpgt>
 8009556:	2800      	cmp	r0, #0
 8009558:	d145      	bne.n	80095e6 <_dtoa_r+0x6be>
 800955a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800955e:	49a5      	ldr	r1, [pc, #660]	@ (80097f4 <_dtoa_r+0x8cc>)
 8009560:	2000      	movs	r0, #0
 8009562:	f7f6 feb1 	bl	80002c8 <__aeabi_dsub>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800956e:	f7f7 fad5 	bl	8000b1c <__aeabi_dcmplt>
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f aef5 	beq.w	8009362 <_dtoa_r+0x43a>
 8009578:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800957a:	1e73      	subs	r3, r6, #1
 800957c:	9315      	str	r3, [sp, #84]	@ 0x54
 800957e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009582:	2b30      	cmp	r3, #48	@ 0x30
 8009584:	d0f8      	beq.n	8009578 <_dtoa_r+0x650>
 8009586:	9f04      	ldr	r7, [sp, #16]
 8009588:	e73e      	b.n	8009408 <_dtoa_r+0x4e0>
 800958a:	4b9b      	ldr	r3, [pc, #620]	@ (80097f8 <_dtoa_r+0x8d0>)
 800958c:	f7f7 f854 	bl	8000638 <__aeabi_dmul>
 8009590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009594:	e7bc      	b.n	8009510 <_dtoa_r+0x5e8>
 8009596:	d10c      	bne.n	80095b2 <_dtoa_r+0x68a>
 8009598:	4b98      	ldr	r3, [pc, #608]	@ (80097fc <_dtoa_r+0x8d4>)
 800959a:	2200      	movs	r2, #0
 800959c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095a0:	f7f7 f84a 	bl	8000638 <__aeabi_dmul>
 80095a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a8:	f7f7 facc 	bl	8000b44 <__aeabi_dcmpge>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f000 8157 	beq.w	8009860 <_dtoa_r+0x938>
 80095b2:	2400      	movs	r4, #0
 80095b4:	4625      	mov	r5, r4
 80095b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b8:	43db      	mvns	r3, r3
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	4656      	mov	r6, sl
 80095be:	2700      	movs	r7, #0
 80095c0:	4621      	mov	r1, r4
 80095c2:	4658      	mov	r0, fp
 80095c4:	f000 fbb4 	bl	8009d30 <_Bfree>
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	d0dc      	beq.n	8009586 <_dtoa_r+0x65e>
 80095cc:	b12f      	cbz	r7, 80095da <_dtoa_r+0x6b2>
 80095ce:	42af      	cmp	r7, r5
 80095d0:	d003      	beq.n	80095da <_dtoa_r+0x6b2>
 80095d2:	4639      	mov	r1, r7
 80095d4:	4658      	mov	r0, fp
 80095d6:	f000 fbab 	bl	8009d30 <_Bfree>
 80095da:	4629      	mov	r1, r5
 80095dc:	4658      	mov	r0, fp
 80095de:	f000 fba7 	bl	8009d30 <_Bfree>
 80095e2:	e7d0      	b.n	8009586 <_dtoa_r+0x65e>
 80095e4:	9704      	str	r7, [sp, #16]
 80095e6:	4633      	mov	r3, r6
 80095e8:	461e      	mov	r6, r3
 80095ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ee:	2a39      	cmp	r2, #57	@ 0x39
 80095f0:	d107      	bne.n	8009602 <_dtoa_r+0x6da>
 80095f2:	459a      	cmp	sl, r3
 80095f4:	d1f8      	bne.n	80095e8 <_dtoa_r+0x6c0>
 80095f6:	9a04      	ldr	r2, [sp, #16]
 80095f8:	3201      	adds	r2, #1
 80095fa:	9204      	str	r2, [sp, #16]
 80095fc:	2230      	movs	r2, #48	@ 0x30
 80095fe:	f88a 2000 	strb.w	r2, [sl]
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	3201      	adds	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	e7bd      	b.n	8009586 <_dtoa_r+0x65e>
 800960a:	4b7b      	ldr	r3, [pc, #492]	@ (80097f8 <_dtoa_r+0x8d0>)
 800960c:	2200      	movs	r2, #0
 800960e:	f7f7 f813 	bl	8000638 <__aeabi_dmul>
 8009612:	2200      	movs	r2, #0
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	460d      	mov	r5, r1
 800961a:	f7f7 fa75 	bl	8000b08 <__aeabi_dcmpeq>
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aebb 	beq.w	800939a <_dtoa_r+0x472>
 8009624:	e6f0      	b.n	8009408 <_dtoa_r+0x4e0>
 8009626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009628:	2a00      	cmp	r2, #0
 800962a:	f000 80db 	beq.w	80097e4 <_dtoa_r+0x8bc>
 800962e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009630:	2a01      	cmp	r2, #1
 8009632:	f300 80bf 	bgt.w	80097b4 <_dtoa_r+0x88c>
 8009636:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009638:	2a00      	cmp	r2, #0
 800963a:	f000 80b7 	beq.w	80097ac <_dtoa_r+0x884>
 800963e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009642:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009644:	4646      	mov	r6, r8
 8009646:	9a08      	ldr	r2, [sp, #32]
 8009648:	2101      	movs	r1, #1
 800964a:	441a      	add	r2, r3
 800964c:	4658      	mov	r0, fp
 800964e:	4498      	add	r8, r3
 8009650:	9208      	str	r2, [sp, #32]
 8009652:	f000 fc6b 	bl	8009f2c <__i2b>
 8009656:	4605      	mov	r5, r0
 8009658:	b15e      	cbz	r6, 8009672 <_dtoa_r+0x74a>
 800965a:	9b08      	ldr	r3, [sp, #32]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd08      	ble.n	8009672 <_dtoa_r+0x74a>
 8009660:	42b3      	cmp	r3, r6
 8009662:	9a08      	ldr	r2, [sp, #32]
 8009664:	bfa8      	it	ge
 8009666:	4633      	movge	r3, r6
 8009668:	eba8 0803 	sub.w	r8, r8, r3
 800966c:	1af6      	subs	r6, r6, r3
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	9308      	str	r3, [sp, #32]
 8009672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009674:	b1f3      	cbz	r3, 80096b4 <_dtoa_r+0x78c>
 8009676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80b7 	beq.w	80097ec <_dtoa_r+0x8c4>
 800967e:	b18c      	cbz	r4, 80096a4 <_dtoa_r+0x77c>
 8009680:	4629      	mov	r1, r5
 8009682:	4622      	mov	r2, r4
 8009684:	4658      	mov	r0, fp
 8009686:	f000 fd11 	bl	800a0ac <__pow5mult>
 800968a:	464a      	mov	r2, r9
 800968c:	4601      	mov	r1, r0
 800968e:	4605      	mov	r5, r0
 8009690:	4658      	mov	r0, fp
 8009692:	f000 fc61 	bl	8009f58 <__multiply>
 8009696:	4649      	mov	r1, r9
 8009698:	9004      	str	r0, [sp, #16]
 800969a:	4658      	mov	r0, fp
 800969c:	f000 fb48 	bl	8009d30 <_Bfree>
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	4699      	mov	r9, r3
 80096a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a6:	1b1a      	subs	r2, r3, r4
 80096a8:	d004      	beq.n	80096b4 <_dtoa_r+0x78c>
 80096aa:	4649      	mov	r1, r9
 80096ac:	4658      	mov	r0, fp
 80096ae:	f000 fcfd 	bl	800a0ac <__pow5mult>
 80096b2:	4681      	mov	r9, r0
 80096b4:	2101      	movs	r1, #1
 80096b6:	4658      	mov	r0, fp
 80096b8:	f000 fc38 	bl	8009f2c <__i2b>
 80096bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096be:	4604      	mov	r4, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 81cf 	beq.w	8009a64 <_dtoa_r+0xb3c>
 80096c6:	461a      	mov	r2, r3
 80096c8:	4601      	mov	r1, r0
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 fcee 	bl	800a0ac <__pow5mult>
 80096d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	4604      	mov	r4, r0
 80096d6:	f300 8095 	bgt.w	8009804 <_dtoa_r+0x8dc>
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 8087 	bne.w	80097f0 <_dtoa_r+0x8c8>
 80096e2:	9b03      	ldr	r3, [sp, #12]
 80096e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f040 8089 	bne.w	8009800 <_dtoa_r+0x8d8>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096f4:	0d1b      	lsrs	r3, r3, #20
 80096f6:	051b      	lsls	r3, r3, #20
 80096f8:	b12b      	cbz	r3, 8009706 <_dtoa_r+0x7de>
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	3301      	adds	r3, #1
 80096fe:	9308      	str	r3, [sp, #32]
 8009700:	f108 0801 	add.w	r8, r8, #1
 8009704:	2301      	movs	r3, #1
 8009706:	930a      	str	r3, [sp, #40]	@ 0x28
 8009708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 81b0 	beq.w	8009a70 <_dtoa_r+0xb48>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009716:	6918      	ldr	r0, [r3, #16]
 8009718:	f000 fbbc 	bl	8009e94 <__hi0bits>
 800971c:	f1c0 0020 	rsb	r0, r0, #32
 8009720:	9b08      	ldr	r3, [sp, #32]
 8009722:	4418      	add	r0, r3
 8009724:	f010 001f 	ands.w	r0, r0, #31
 8009728:	d077      	beq.n	800981a <_dtoa_r+0x8f2>
 800972a:	f1c0 0320 	rsb	r3, r0, #32
 800972e:	2b04      	cmp	r3, #4
 8009730:	dd6b      	ble.n	800980a <_dtoa_r+0x8e2>
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	f1c0 001c 	rsb	r0, r0, #28
 8009738:	4403      	add	r3, r0
 800973a:	4480      	add	r8, r0
 800973c:	4406      	add	r6, r0
 800973e:	9308      	str	r3, [sp, #32]
 8009740:	f1b8 0f00 	cmp.w	r8, #0
 8009744:	dd05      	ble.n	8009752 <_dtoa_r+0x82a>
 8009746:	4649      	mov	r1, r9
 8009748:	4642      	mov	r2, r8
 800974a:	4658      	mov	r0, fp
 800974c:	f000 fd08 	bl	800a160 <__lshift>
 8009750:	4681      	mov	r9, r0
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd05      	ble.n	8009764 <_dtoa_r+0x83c>
 8009758:	4621      	mov	r1, r4
 800975a:	461a      	mov	r2, r3
 800975c:	4658      	mov	r0, fp
 800975e:	f000 fcff 	bl	800a160 <__lshift>
 8009762:	4604      	mov	r4, r0
 8009764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009766:	2b00      	cmp	r3, #0
 8009768:	d059      	beq.n	800981e <_dtoa_r+0x8f6>
 800976a:	4621      	mov	r1, r4
 800976c:	4648      	mov	r0, r9
 800976e:	f000 fd63 	bl	800a238 <__mcmp>
 8009772:	2800      	cmp	r0, #0
 8009774:	da53      	bge.n	800981e <_dtoa_r+0x8f6>
 8009776:	1e7b      	subs	r3, r7, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	4649      	mov	r1, r9
 800977c:	2300      	movs	r3, #0
 800977e:	220a      	movs	r2, #10
 8009780:	4658      	mov	r0, fp
 8009782:	f000 faf7 	bl	8009d74 <__multadd>
 8009786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009788:	4681      	mov	r9, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 8172 	beq.w	8009a74 <_dtoa_r+0xb4c>
 8009790:	2300      	movs	r3, #0
 8009792:	4629      	mov	r1, r5
 8009794:	220a      	movs	r2, #10
 8009796:	4658      	mov	r0, fp
 8009798:	f000 faec 	bl	8009d74 <__multadd>
 800979c:	9b00      	ldr	r3, [sp, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	4605      	mov	r5, r0
 80097a2:	dc67      	bgt.n	8009874 <_dtoa_r+0x94c>
 80097a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	dc41      	bgt.n	800982e <_dtoa_r+0x906>
 80097aa:	e063      	b.n	8009874 <_dtoa_r+0x94c>
 80097ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097b2:	e746      	b.n	8009642 <_dtoa_r+0x71a>
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	1e5c      	subs	r4, r3, #1
 80097b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	bfbf      	itttt	lt
 80097be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80097c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80097c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80097c4:	1ae3      	sublt	r3, r4, r3
 80097c6:	bfb4      	ite	lt
 80097c8:	18d2      	addlt	r2, r2, r3
 80097ca:	1b1c      	subge	r4, r3, r4
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	bfbc      	itt	lt
 80097d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80097d2:	2400      	movlt	r4, #0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfb5      	itete	lt
 80097d8:	eba8 0603 	sublt.w	r6, r8, r3
 80097dc:	9b07      	ldrge	r3, [sp, #28]
 80097de:	2300      	movlt	r3, #0
 80097e0:	4646      	movge	r6, r8
 80097e2:	e730      	b.n	8009646 <_dtoa_r+0x71e>
 80097e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80097e8:	4646      	mov	r6, r8
 80097ea:	e735      	b.n	8009658 <_dtoa_r+0x730>
 80097ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097ee:	e75c      	b.n	80096aa <_dtoa_r+0x782>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e788      	b.n	8009706 <_dtoa_r+0x7de>
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	40240000 	.word	0x40240000
 80097fc:	40140000 	.word	0x40140000
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	e780      	b.n	8009706 <_dtoa_r+0x7de>
 8009804:	2300      	movs	r3, #0
 8009806:	930a      	str	r3, [sp, #40]	@ 0x28
 8009808:	e782      	b.n	8009710 <_dtoa_r+0x7e8>
 800980a:	d099      	beq.n	8009740 <_dtoa_r+0x818>
 800980c:	9a08      	ldr	r2, [sp, #32]
 800980e:	331c      	adds	r3, #28
 8009810:	441a      	add	r2, r3
 8009812:	4498      	add	r8, r3
 8009814:	441e      	add	r6, r3
 8009816:	9208      	str	r2, [sp, #32]
 8009818:	e792      	b.n	8009740 <_dtoa_r+0x818>
 800981a:	4603      	mov	r3, r0
 800981c:	e7f6      	b.n	800980c <_dtoa_r+0x8e4>
 800981e:	9b07      	ldr	r3, [sp, #28]
 8009820:	9704      	str	r7, [sp, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dc20      	bgt.n	8009868 <_dtoa_r+0x940>
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982a:	2b02      	cmp	r3, #2
 800982c:	dd1e      	ble.n	800986c <_dtoa_r+0x944>
 800982e:	9b00      	ldr	r3, [sp, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f47f aec0 	bne.w	80095b6 <_dtoa_r+0x68e>
 8009836:	4621      	mov	r1, r4
 8009838:	2205      	movs	r2, #5
 800983a:	4658      	mov	r0, fp
 800983c:	f000 fa9a 	bl	8009d74 <__multadd>
 8009840:	4601      	mov	r1, r0
 8009842:	4604      	mov	r4, r0
 8009844:	4648      	mov	r0, r9
 8009846:	f000 fcf7 	bl	800a238 <__mcmp>
 800984a:	2800      	cmp	r0, #0
 800984c:	f77f aeb3 	ble.w	80095b6 <_dtoa_r+0x68e>
 8009850:	4656      	mov	r6, sl
 8009852:	2331      	movs	r3, #49	@ 0x31
 8009854:	f806 3b01 	strb.w	r3, [r6], #1
 8009858:	9b04      	ldr	r3, [sp, #16]
 800985a:	3301      	adds	r3, #1
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	e6ae      	b.n	80095be <_dtoa_r+0x696>
 8009860:	9c07      	ldr	r4, [sp, #28]
 8009862:	9704      	str	r7, [sp, #16]
 8009864:	4625      	mov	r5, r4
 8009866:	e7f3      	b.n	8009850 <_dtoa_r+0x928>
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 8104 	beq.w	8009a7c <_dtoa_r+0xb54>
 8009874:	2e00      	cmp	r6, #0
 8009876:	dd05      	ble.n	8009884 <_dtoa_r+0x95c>
 8009878:	4629      	mov	r1, r5
 800987a:	4632      	mov	r2, r6
 800987c:	4658      	mov	r0, fp
 800987e:	f000 fc6f 	bl	800a160 <__lshift>
 8009882:	4605      	mov	r5, r0
 8009884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d05a      	beq.n	8009940 <_dtoa_r+0xa18>
 800988a:	6869      	ldr	r1, [r5, #4]
 800988c:	4658      	mov	r0, fp
 800988e:	f000 fa0f 	bl	8009cb0 <_Balloc>
 8009892:	4606      	mov	r6, r0
 8009894:	b928      	cbnz	r0, 80098a2 <_dtoa_r+0x97a>
 8009896:	4b84      	ldr	r3, [pc, #528]	@ (8009aa8 <_dtoa_r+0xb80>)
 8009898:	4602      	mov	r2, r0
 800989a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800989e:	f7ff bb5a 	b.w	8008f56 <_dtoa_r+0x2e>
 80098a2:	692a      	ldr	r2, [r5, #16]
 80098a4:	3202      	adds	r2, #2
 80098a6:	0092      	lsls	r2, r2, #2
 80098a8:	f105 010c 	add.w	r1, r5, #12
 80098ac:	300c      	adds	r0, #12
 80098ae:	f7ff fa9e 	bl	8008dee <memcpy>
 80098b2:	2201      	movs	r2, #1
 80098b4:	4631      	mov	r1, r6
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 fc52 	bl	800a160 <__lshift>
 80098bc:	f10a 0301 	add.w	r3, sl, #1
 80098c0:	9307      	str	r3, [sp, #28]
 80098c2:	9b00      	ldr	r3, [sp, #0]
 80098c4:	4453      	add	r3, sl
 80098c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	462f      	mov	r7, r5
 80098d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80098d2:	4605      	mov	r5, r0
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	4621      	mov	r1, r4
 80098d8:	3b01      	subs	r3, #1
 80098da:	4648      	mov	r0, r9
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	f7ff fa9b 	bl	8008e18 <quorem>
 80098e2:	4639      	mov	r1, r7
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098ea:	4648      	mov	r0, r9
 80098ec:	f000 fca4 	bl	800a238 <__mcmp>
 80098f0:	462a      	mov	r2, r5
 80098f2:	9008      	str	r0, [sp, #32]
 80098f4:	4621      	mov	r1, r4
 80098f6:	4658      	mov	r0, fp
 80098f8:	f000 fcba 	bl	800a270 <__mdiff>
 80098fc:	68c2      	ldr	r2, [r0, #12]
 80098fe:	4606      	mov	r6, r0
 8009900:	bb02      	cbnz	r2, 8009944 <_dtoa_r+0xa1c>
 8009902:	4601      	mov	r1, r0
 8009904:	4648      	mov	r0, r9
 8009906:	f000 fc97 	bl	800a238 <__mcmp>
 800990a:	4602      	mov	r2, r0
 800990c:	4631      	mov	r1, r6
 800990e:	4658      	mov	r0, fp
 8009910:	920e      	str	r2, [sp, #56]	@ 0x38
 8009912:	f000 fa0d 	bl	8009d30 <_Bfree>
 8009916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800991a:	9e07      	ldr	r6, [sp, #28]
 800991c:	ea43 0102 	orr.w	r1, r3, r2
 8009920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009922:	4319      	orrs	r1, r3
 8009924:	d110      	bne.n	8009948 <_dtoa_r+0xa20>
 8009926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800992a:	d029      	beq.n	8009980 <_dtoa_r+0xa58>
 800992c:	9b08      	ldr	r3, [sp, #32]
 800992e:	2b00      	cmp	r3, #0
 8009930:	dd02      	ble.n	8009938 <_dtoa_r+0xa10>
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009938:	9b00      	ldr	r3, [sp, #0]
 800993a:	f883 8000 	strb.w	r8, [r3]
 800993e:	e63f      	b.n	80095c0 <_dtoa_r+0x698>
 8009940:	4628      	mov	r0, r5
 8009942:	e7bb      	b.n	80098bc <_dtoa_r+0x994>
 8009944:	2201      	movs	r2, #1
 8009946:	e7e1      	b.n	800990c <_dtoa_r+0x9e4>
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	2b00      	cmp	r3, #0
 800994c:	db04      	blt.n	8009958 <_dtoa_r+0xa30>
 800994e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009950:	430b      	orrs	r3, r1
 8009952:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009954:	430b      	orrs	r3, r1
 8009956:	d120      	bne.n	800999a <_dtoa_r+0xa72>
 8009958:	2a00      	cmp	r2, #0
 800995a:	dded      	ble.n	8009938 <_dtoa_r+0xa10>
 800995c:	4649      	mov	r1, r9
 800995e:	2201      	movs	r2, #1
 8009960:	4658      	mov	r0, fp
 8009962:	f000 fbfd 	bl	800a160 <__lshift>
 8009966:	4621      	mov	r1, r4
 8009968:	4681      	mov	r9, r0
 800996a:	f000 fc65 	bl	800a238 <__mcmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	dc03      	bgt.n	800997a <_dtoa_r+0xa52>
 8009972:	d1e1      	bne.n	8009938 <_dtoa_r+0xa10>
 8009974:	f018 0f01 	tst.w	r8, #1
 8009978:	d0de      	beq.n	8009938 <_dtoa_r+0xa10>
 800997a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800997e:	d1d8      	bne.n	8009932 <_dtoa_r+0xa0a>
 8009980:	9a00      	ldr	r2, [sp, #0]
 8009982:	2339      	movs	r3, #57	@ 0x39
 8009984:	7013      	strb	r3, [r2, #0]
 8009986:	4633      	mov	r3, r6
 8009988:	461e      	mov	r6, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009990:	2a39      	cmp	r2, #57	@ 0x39
 8009992:	d052      	beq.n	8009a3a <_dtoa_r+0xb12>
 8009994:	3201      	adds	r2, #1
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	e612      	b.n	80095c0 <_dtoa_r+0x698>
 800999a:	2a00      	cmp	r2, #0
 800999c:	dd07      	ble.n	80099ae <_dtoa_r+0xa86>
 800999e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099a2:	d0ed      	beq.n	8009980 <_dtoa_r+0xa58>
 80099a4:	9a00      	ldr	r2, [sp, #0]
 80099a6:	f108 0301 	add.w	r3, r8, #1
 80099aa:	7013      	strb	r3, [r2, #0]
 80099ac:	e608      	b.n	80095c0 <_dtoa_r+0x698>
 80099ae:	9b07      	ldr	r3, [sp, #28]
 80099b0:	9a07      	ldr	r2, [sp, #28]
 80099b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80099b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d028      	beq.n	8009a0e <_dtoa_r+0xae6>
 80099bc:	4649      	mov	r1, r9
 80099be:	2300      	movs	r3, #0
 80099c0:	220a      	movs	r2, #10
 80099c2:	4658      	mov	r0, fp
 80099c4:	f000 f9d6 	bl	8009d74 <__multadd>
 80099c8:	42af      	cmp	r7, r5
 80099ca:	4681      	mov	r9, r0
 80099cc:	f04f 0300 	mov.w	r3, #0
 80099d0:	f04f 020a 	mov.w	r2, #10
 80099d4:	4639      	mov	r1, r7
 80099d6:	4658      	mov	r0, fp
 80099d8:	d107      	bne.n	80099ea <_dtoa_r+0xac2>
 80099da:	f000 f9cb 	bl	8009d74 <__multadd>
 80099de:	4607      	mov	r7, r0
 80099e0:	4605      	mov	r5, r0
 80099e2:	9b07      	ldr	r3, [sp, #28]
 80099e4:	3301      	adds	r3, #1
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	e774      	b.n	80098d4 <_dtoa_r+0x9ac>
 80099ea:	f000 f9c3 	bl	8009d74 <__multadd>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4607      	mov	r7, r0
 80099f2:	2300      	movs	r3, #0
 80099f4:	220a      	movs	r2, #10
 80099f6:	4658      	mov	r0, fp
 80099f8:	f000 f9bc 	bl	8009d74 <__multadd>
 80099fc:	4605      	mov	r5, r0
 80099fe:	e7f0      	b.n	80099e2 <_dtoa_r+0xaba>
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bfcc      	ite	gt
 8009a06:	461e      	movgt	r6, r3
 8009a08:	2601      	movle	r6, #1
 8009a0a:	4456      	add	r6, sl
 8009a0c:	2700      	movs	r7, #0
 8009a0e:	4649      	mov	r1, r9
 8009a10:	2201      	movs	r2, #1
 8009a12:	4658      	mov	r0, fp
 8009a14:	f000 fba4 	bl	800a160 <__lshift>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4681      	mov	r9, r0
 8009a1c:	f000 fc0c 	bl	800a238 <__mcmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	dcb0      	bgt.n	8009986 <_dtoa_r+0xa5e>
 8009a24:	d102      	bne.n	8009a2c <_dtoa_r+0xb04>
 8009a26:	f018 0f01 	tst.w	r8, #1
 8009a2a:	d1ac      	bne.n	8009986 <_dtoa_r+0xa5e>
 8009a2c:	4633      	mov	r3, r6
 8009a2e:	461e      	mov	r6, r3
 8009a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a34:	2a30      	cmp	r2, #48	@ 0x30
 8009a36:	d0fa      	beq.n	8009a2e <_dtoa_r+0xb06>
 8009a38:	e5c2      	b.n	80095c0 <_dtoa_r+0x698>
 8009a3a:	459a      	cmp	sl, r3
 8009a3c:	d1a4      	bne.n	8009988 <_dtoa_r+0xa60>
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	3301      	adds	r3, #1
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	2331      	movs	r3, #49	@ 0x31
 8009a46:	f88a 3000 	strb.w	r3, [sl]
 8009a4a:	e5b9      	b.n	80095c0 <_dtoa_r+0x698>
 8009a4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009aac <_dtoa_r+0xb84>
 8009a52:	b11b      	cbz	r3, 8009a5c <_dtoa_r+0xb34>
 8009a54:	f10a 0308 	add.w	r3, sl, #8
 8009a58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	b019      	add	sp, #100	@ 0x64
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	f77f ae37 	ble.w	80096da <_dtoa_r+0x7b2>
 8009a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a70:	2001      	movs	r0, #1
 8009a72:	e655      	b.n	8009720 <_dtoa_r+0x7f8>
 8009a74:	9b00      	ldr	r3, [sp, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f77f aed6 	ble.w	8009828 <_dtoa_r+0x900>
 8009a7c:	4656      	mov	r6, sl
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4648      	mov	r0, r9
 8009a82:	f7ff f9c9 	bl	8008e18 <quorem>
 8009a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	eba6 020a 	sub.w	r2, r6, sl
 8009a94:	4293      	cmp	r3, r2
 8009a96:	ddb3      	ble.n	8009a00 <_dtoa_r+0xad8>
 8009a98:	4649      	mov	r1, r9
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	f000 f968 	bl	8009d74 <__multadd>
 8009aa4:	4681      	mov	r9, r0
 8009aa6:	e7ea      	b.n	8009a7e <_dtoa_r+0xb56>
 8009aa8:	0800d4f1 	.word	0x0800d4f1
 8009aac:	0800d475 	.word	0x0800d475

08009ab0 <_free_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d041      	beq.n	8009b3c <_free_r+0x8c>
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f0c      	subs	r4, r1, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	18e4      	addlt	r4, r4, r3
 8009ac4:	f000 f8e8 	bl	8009c98 <__malloc_lock>
 8009ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b40 <_free_r+0x90>)
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x2c>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad8:	f000 b8e4 	b.w	8009ca4 <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x42>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1809      	addeq	r1, r1, r0
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x1e>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x4c>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x42>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1850      	adds	r0, r2, r1
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x6c>
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	4401      	add	r1, r0
 8009b08:	1850      	adds	r0, r2, r1
 8009b0a:	4283      	cmp	r3, r0
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x22>
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6053      	str	r3, [r2, #4]
 8009b16:	4408      	add	r0, r1
 8009b18:	6010      	str	r0, [r2, #0]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x22>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x74>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x22>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	1821      	adds	r1, r4, r0
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf04      	itt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	bf04      	itt	eq
 8009b34:	1809      	addeq	r1, r1, r0
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	6054      	str	r4, [r2, #4]
 8009b3a:	e7ca      	b.n	8009ad2 <_free_r+0x22>
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
 8009b3e:	bf00      	nop
 8009b40:	20004e24 	.word	0x20004e24

08009b44 <malloc>:
 8009b44:	4b02      	ldr	r3, [pc, #8]	@ (8009b50 <malloc+0xc>)
 8009b46:	4601      	mov	r1, r0
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f000 b825 	b.w	8009b98 <_malloc_r>
 8009b4e:	bf00      	nop
 8009b50:	20000060 	.word	0x20000060

08009b54 <sbrk_aligned>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4e0f      	ldr	r6, [pc, #60]	@ (8009b94 <sbrk_aligned+0x40>)
 8009b58:	460c      	mov	r4, r1
 8009b5a:	6831      	ldr	r1, [r6, #0]
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	b911      	cbnz	r1, 8009b66 <sbrk_aligned+0x12>
 8009b60:	f001 ffe2 	bl	800bb28 <_sbrk_r>
 8009b64:	6030      	str	r0, [r6, #0]
 8009b66:	4621      	mov	r1, r4
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f001 ffdd 	bl	800bb28 <_sbrk_r>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	d103      	bne.n	8009b7a <sbrk_aligned+0x26>
 8009b72:	f04f 34ff 	mov.w	r4, #4294967295
 8009b76:	4620      	mov	r0, r4
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	1cc4      	adds	r4, r0, #3
 8009b7c:	f024 0403 	bic.w	r4, r4, #3
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d0f8      	beq.n	8009b76 <sbrk_aligned+0x22>
 8009b84:	1a21      	subs	r1, r4, r0
 8009b86:	4628      	mov	r0, r5
 8009b88:	f001 ffce 	bl	800bb28 <_sbrk_r>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d1f2      	bne.n	8009b76 <sbrk_aligned+0x22>
 8009b90:	e7ef      	b.n	8009b72 <sbrk_aligned+0x1e>
 8009b92:	bf00      	nop
 8009b94:	20004e20 	.word	0x20004e20

08009b98 <_malloc_r>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	1ccd      	adds	r5, r1, #3
 8009b9e:	f025 0503 	bic.w	r5, r5, #3
 8009ba2:	3508      	adds	r5, #8
 8009ba4:	2d0c      	cmp	r5, #12
 8009ba6:	bf38      	it	cc
 8009ba8:	250c      	movcc	r5, #12
 8009baa:	2d00      	cmp	r5, #0
 8009bac:	4606      	mov	r6, r0
 8009bae:	db01      	blt.n	8009bb4 <_malloc_r+0x1c>
 8009bb0:	42a9      	cmp	r1, r5
 8009bb2:	d904      	bls.n	8009bbe <_malloc_r+0x26>
 8009bb4:	230c      	movs	r3, #12
 8009bb6:	6033      	str	r3, [r6, #0]
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c94 <_malloc_r+0xfc>
 8009bc2:	f000 f869 	bl	8009c98 <__malloc_lock>
 8009bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bca:	461c      	mov	r4, r3
 8009bcc:	bb44      	cbnz	r4, 8009c20 <_malloc_r+0x88>
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ffbf 	bl	8009b54 <sbrk_aligned>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	4604      	mov	r4, r0
 8009bda:	d158      	bne.n	8009c8e <_malloc_r+0xf6>
 8009bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8009be0:	4627      	mov	r7, r4
 8009be2:	2f00      	cmp	r7, #0
 8009be4:	d143      	bne.n	8009c6e <_malloc_r+0xd6>
 8009be6:	2c00      	cmp	r4, #0
 8009be8:	d04b      	beq.n	8009c82 <_malloc_r+0xea>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	4639      	mov	r1, r7
 8009bee:	4630      	mov	r0, r6
 8009bf0:	eb04 0903 	add.w	r9, r4, r3
 8009bf4:	f001 ff98 	bl	800bb28 <_sbrk_r>
 8009bf8:	4581      	cmp	r9, r0
 8009bfa:	d142      	bne.n	8009c82 <_malloc_r+0xea>
 8009bfc:	6821      	ldr	r1, [r4, #0]
 8009bfe:	1a6d      	subs	r5, r5, r1
 8009c00:	4629      	mov	r1, r5
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ffa6 	bl	8009b54 <sbrk_aligned>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d03a      	beq.n	8009c82 <_malloc_r+0xea>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	442b      	add	r3, r5
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	f8d8 3000 	ldr.w	r3, [r8]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	bb62      	cbnz	r2, 8009c74 <_malloc_r+0xdc>
 8009c1a:	f8c8 7000 	str.w	r7, [r8]
 8009c1e:	e00f      	b.n	8009c40 <_malloc_r+0xa8>
 8009c20:	6822      	ldr	r2, [r4, #0]
 8009c22:	1b52      	subs	r2, r2, r5
 8009c24:	d420      	bmi.n	8009c68 <_malloc_r+0xd0>
 8009c26:	2a0b      	cmp	r2, #11
 8009c28:	d917      	bls.n	8009c5a <_malloc_r+0xc2>
 8009c2a:	1961      	adds	r1, r4, r5
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	6025      	str	r5, [r4, #0]
 8009c30:	bf18      	it	ne
 8009c32:	6059      	strne	r1, [r3, #4]
 8009c34:	6863      	ldr	r3, [r4, #4]
 8009c36:	bf08      	it	eq
 8009c38:	f8c8 1000 	streq.w	r1, [r8]
 8009c3c:	5162      	str	r2, [r4, r5]
 8009c3e:	604b      	str	r3, [r1, #4]
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 f82f 	bl	8009ca4 <__malloc_unlock>
 8009c46:	f104 000b 	add.w	r0, r4, #11
 8009c4a:	1d23      	adds	r3, r4, #4
 8009c4c:	f020 0007 	bic.w	r0, r0, #7
 8009c50:	1ac2      	subs	r2, r0, r3
 8009c52:	bf1c      	itt	ne
 8009c54:	1a1b      	subne	r3, r3, r0
 8009c56:	50a3      	strne	r3, [r4, r2]
 8009c58:	e7af      	b.n	8009bba <_malloc_r+0x22>
 8009c5a:	6862      	ldr	r2, [r4, #4]
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	bf0c      	ite	eq
 8009c60:	f8c8 2000 	streq.w	r2, [r8]
 8009c64:	605a      	strne	r2, [r3, #4]
 8009c66:	e7eb      	b.n	8009c40 <_malloc_r+0xa8>
 8009c68:	4623      	mov	r3, r4
 8009c6a:	6864      	ldr	r4, [r4, #4]
 8009c6c:	e7ae      	b.n	8009bcc <_malloc_r+0x34>
 8009c6e:	463c      	mov	r4, r7
 8009c70:	687f      	ldr	r7, [r7, #4]
 8009c72:	e7b6      	b.n	8009be2 <_malloc_r+0x4a>
 8009c74:	461a      	mov	r2, r3
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d1fb      	bne.n	8009c74 <_malloc_r+0xdc>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6053      	str	r3, [r2, #4]
 8009c80:	e7de      	b.n	8009c40 <_malloc_r+0xa8>
 8009c82:	230c      	movs	r3, #12
 8009c84:	6033      	str	r3, [r6, #0]
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 f80c 	bl	8009ca4 <__malloc_unlock>
 8009c8c:	e794      	b.n	8009bb8 <_malloc_r+0x20>
 8009c8e:	6005      	str	r5, [r0, #0]
 8009c90:	e7d6      	b.n	8009c40 <_malloc_r+0xa8>
 8009c92:	bf00      	nop
 8009c94:	20004e24 	.word	0x20004e24

08009c98 <__malloc_lock>:
 8009c98:	4801      	ldr	r0, [pc, #4]	@ (8009ca0 <__malloc_lock+0x8>)
 8009c9a:	f7ff b8a6 	b.w	8008dea <__retarget_lock_acquire_recursive>
 8009c9e:	bf00      	nop
 8009ca0:	20004e1c 	.word	0x20004e1c

08009ca4 <__malloc_unlock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	@ (8009cac <__malloc_unlock+0x8>)
 8009ca6:	f7ff b8a1 	b.w	8008dec <__retarget_lock_release_recursive>
 8009caa:	bf00      	nop
 8009cac:	20004e1c 	.word	0x20004e1c

08009cb0 <_Balloc>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	69c6      	ldr	r6, [r0, #28]
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	b976      	cbnz	r6, 8009cd8 <_Balloc+0x28>
 8009cba:	2010      	movs	r0, #16
 8009cbc:	f7ff ff42 	bl	8009b44 <malloc>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	61e0      	str	r0, [r4, #28]
 8009cc4:	b920      	cbnz	r0, 8009cd0 <_Balloc+0x20>
 8009cc6:	4b18      	ldr	r3, [pc, #96]	@ (8009d28 <_Balloc+0x78>)
 8009cc8:	4818      	ldr	r0, [pc, #96]	@ (8009d2c <_Balloc+0x7c>)
 8009cca:	216b      	movs	r1, #107	@ 0x6b
 8009ccc:	f001 ff44 	bl	800bb58 <__assert_func>
 8009cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cd4:	6006      	str	r6, [r0, #0]
 8009cd6:	60c6      	str	r6, [r0, #12]
 8009cd8:	69e6      	ldr	r6, [r4, #28]
 8009cda:	68f3      	ldr	r3, [r6, #12]
 8009cdc:	b183      	cbz	r3, 8009d00 <_Balloc+0x50>
 8009cde:	69e3      	ldr	r3, [r4, #28]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ce6:	b9b8      	cbnz	r0, 8009d18 <_Balloc+0x68>
 8009ce8:	2101      	movs	r1, #1
 8009cea:	fa01 f605 	lsl.w	r6, r1, r5
 8009cee:	1d72      	adds	r2, r6, #5
 8009cf0:	0092      	lsls	r2, r2, #2
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f001 ff4e 	bl	800bb94 <_calloc_r>
 8009cf8:	b160      	cbz	r0, 8009d14 <_Balloc+0x64>
 8009cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cfe:	e00e      	b.n	8009d1e <_Balloc+0x6e>
 8009d00:	2221      	movs	r2, #33	@ 0x21
 8009d02:	2104      	movs	r1, #4
 8009d04:	4620      	mov	r0, r4
 8009d06:	f001 ff45 	bl	800bb94 <_calloc_r>
 8009d0a:	69e3      	ldr	r3, [r4, #28]
 8009d0c:	60f0      	str	r0, [r6, #12]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e4      	bne.n	8009cde <_Balloc+0x2e>
 8009d14:	2000      	movs	r0, #0
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	6802      	ldr	r2, [r0, #0]
 8009d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d24:	e7f7      	b.n	8009d16 <_Balloc+0x66>
 8009d26:	bf00      	nop
 8009d28:	0800d482 	.word	0x0800d482
 8009d2c:	0800d502 	.word	0x0800d502

08009d30 <_Bfree>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	69c6      	ldr	r6, [r0, #28]
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	b976      	cbnz	r6, 8009d58 <_Bfree+0x28>
 8009d3a:	2010      	movs	r0, #16
 8009d3c:	f7ff ff02 	bl	8009b44 <malloc>
 8009d40:	4602      	mov	r2, r0
 8009d42:	61e8      	str	r0, [r5, #28]
 8009d44:	b920      	cbnz	r0, 8009d50 <_Bfree+0x20>
 8009d46:	4b09      	ldr	r3, [pc, #36]	@ (8009d6c <_Bfree+0x3c>)
 8009d48:	4809      	ldr	r0, [pc, #36]	@ (8009d70 <_Bfree+0x40>)
 8009d4a:	218f      	movs	r1, #143	@ 0x8f
 8009d4c:	f001 ff04 	bl	800bb58 <__assert_func>
 8009d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d54:	6006      	str	r6, [r0, #0]
 8009d56:	60c6      	str	r6, [r0, #12]
 8009d58:	b13c      	cbz	r4, 8009d6a <_Bfree+0x3a>
 8009d5a:	69eb      	ldr	r3, [r5, #28]
 8009d5c:	6862      	ldr	r2, [r4, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d64:	6021      	str	r1, [r4, #0]
 8009d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	0800d482 	.word	0x0800d482
 8009d70:	0800d502 	.word	0x0800d502

08009d74 <__multadd>:
 8009d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d78:	690d      	ldr	r5, [r1, #16]
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	461e      	mov	r6, r3
 8009d80:	f101 0c14 	add.w	ip, r1, #20
 8009d84:	2000      	movs	r0, #0
 8009d86:	f8dc 3000 	ldr.w	r3, [ip]
 8009d8a:	b299      	uxth	r1, r3
 8009d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d90:	0c1e      	lsrs	r6, r3, #16
 8009d92:	0c0b      	lsrs	r3, r1, #16
 8009d94:	fb02 3306 	mla	r3, r2, r6, r3
 8009d98:	b289      	uxth	r1, r1
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009da0:	4285      	cmp	r5, r0
 8009da2:	f84c 1b04 	str.w	r1, [ip], #4
 8009da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009daa:	dcec      	bgt.n	8009d86 <__multadd+0x12>
 8009dac:	b30e      	cbz	r6, 8009df2 <__multadd+0x7e>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	dc19      	bgt.n	8009de8 <__multadd+0x74>
 8009db4:	6861      	ldr	r1, [r4, #4]
 8009db6:	4638      	mov	r0, r7
 8009db8:	3101      	adds	r1, #1
 8009dba:	f7ff ff79 	bl	8009cb0 <_Balloc>
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	b928      	cbnz	r0, 8009dce <__multadd+0x5a>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <__multadd+0x84>)
 8009dc6:	480d      	ldr	r0, [pc, #52]	@ (8009dfc <__multadd+0x88>)
 8009dc8:	21ba      	movs	r1, #186	@ 0xba
 8009dca:	f001 fec5 	bl	800bb58 <__assert_func>
 8009dce:	6922      	ldr	r2, [r4, #16]
 8009dd0:	3202      	adds	r2, #2
 8009dd2:	f104 010c 	add.w	r1, r4, #12
 8009dd6:	0092      	lsls	r2, r2, #2
 8009dd8:	300c      	adds	r0, #12
 8009dda:	f7ff f808 	bl	8008dee <memcpy>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ffa5 	bl	8009d30 <_Bfree>
 8009de6:	4644      	mov	r4, r8
 8009de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dec:	3501      	adds	r5, #1
 8009dee:	615e      	str	r6, [r3, #20]
 8009df0:	6125      	str	r5, [r4, #16]
 8009df2:	4620      	mov	r0, r4
 8009df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df8:	0800d4f1 	.word	0x0800d4f1
 8009dfc:	0800d502 	.word	0x0800d502

08009e00 <__s2b>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	460c      	mov	r4, r1
 8009e06:	4615      	mov	r5, r2
 8009e08:	461f      	mov	r7, r3
 8009e0a:	2209      	movs	r2, #9
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	4606      	mov	r6, r0
 8009e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e14:	2100      	movs	r1, #0
 8009e16:	2201      	movs	r2, #1
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	db09      	blt.n	8009e30 <__s2b+0x30>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff ff47 	bl	8009cb0 <_Balloc>
 8009e22:	b940      	cbnz	r0, 8009e36 <__s2b+0x36>
 8009e24:	4602      	mov	r2, r0
 8009e26:	4b19      	ldr	r3, [pc, #100]	@ (8009e8c <__s2b+0x8c>)
 8009e28:	4819      	ldr	r0, [pc, #100]	@ (8009e90 <__s2b+0x90>)
 8009e2a:	21d3      	movs	r1, #211	@ 0xd3
 8009e2c:	f001 fe94 	bl	800bb58 <__assert_func>
 8009e30:	0052      	lsls	r2, r2, #1
 8009e32:	3101      	adds	r1, #1
 8009e34:	e7f0      	b.n	8009e18 <__s2b+0x18>
 8009e36:	9b08      	ldr	r3, [sp, #32]
 8009e38:	6143      	str	r3, [r0, #20]
 8009e3a:	2d09      	cmp	r5, #9
 8009e3c:	f04f 0301 	mov.w	r3, #1
 8009e40:	6103      	str	r3, [r0, #16]
 8009e42:	dd16      	ble.n	8009e72 <__s2b+0x72>
 8009e44:	f104 0909 	add.w	r9, r4, #9
 8009e48:	46c8      	mov	r8, r9
 8009e4a:	442c      	add	r4, r5
 8009e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e50:	4601      	mov	r1, r0
 8009e52:	3b30      	subs	r3, #48	@ 0x30
 8009e54:	220a      	movs	r2, #10
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff ff8c 	bl	8009d74 <__multadd>
 8009e5c:	45a0      	cmp	r8, r4
 8009e5e:	d1f5      	bne.n	8009e4c <__s2b+0x4c>
 8009e60:	f1a5 0408 	sub.w	r4, r5, #8
 8009e64:	444c      	add	r4, r9
 8009e66:	1b2d      	subs	r5, r5, r4
 8009e68:	1963      	adds	r3, r4, r5
 8009e6a:	42bb      	cmp	r3, r7
 8009e6c:	db04      	blt.n	8009e78 <__s2b+0x78>
 8009e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e72:	340a      	adds	r4, #10
 8009e74:	2509      	movs	r5, #9
 8009e76:	e7f6      	b.n	8009e66 <__s2b+0x66>
 8009e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	3b30      	subs	r3, #48	@ 0x30
 8009e80:	220a      	movs	r2, #10
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff76 	bl	8009d74 <__multadd>
 8009e88:	e7ee      	b.n	8009e68 <__s2b+0x68>
 8009e8a:	bf00      	nop
 8009e8c:	0800d4f1 	.word	0x0800d4f1
 8009e90:	0800d502 	.word	0x0800d502

08009e94 <__hi0bits>:
 8009e94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e98:	4603      	mov	r3, r0
 8009e9a:	bf36      	itet	cc
 8009e9c:	0403      	lslcc	r3, r0, #16
 8009e9e:	2000      	movcs	r0, #0
 8009ea0:	2010      	movcc	r0, #16
 8009ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ea6:	bf3c      	itt	cc
 8009ea8:	021b      	lslcc	r3, r3, #8
 8009eaa:	3008      	addcc	r0, #8
 8009eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eb0:	bf3c      	itt	cc
 8009eb2:	011b      	lslcc	r3, r3, #4
 8009eb4:	3004      	addcc	r0, #4
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eba:	bf3c      	itt	cc
 8009ebc:	009b      	lslcc	r3, r3, #2
 8009ebe:	3002      	addcc	r0, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	db05      	blt.n	8009ed0 <__hi0bits+0x3c>
 8009ec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ec8:	f100 0001 	add.w	r0, r0, #1
 8009ecc:	bf08      	it	eq
 8009ece:	2020      	moveq	r0, #32
 8009ed0:	4770      	bx	lr

08009ed2 <__lo0bits>:
 8009ed2:	6803      	ldr	r3, [r0, #0]
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	f013 0007 	ands.w	r0, r3, #7
 8009eda:	d00b      	beq.n	8009ef4 <__lo0bits+0x22>
 8009edc:	07d9      	lsls	r1, r3, #31
 8009ede:	d421      	bmi.n	8009f24 <__lo0bits+0x52>
 8009ee0:	0798      	lsls	r0, r3, #30
 8009ee2:	bf49      	itett	mi
 8009ee4:	085b      	lsrmi	r3, r3, #1
 8009ee6:	089b      	lsrpl	r3, r3, #2
 8009ee8:	2001      	movmi	r0, #1
 8009eea:	6013      	strmi	r3, [r2, #0]
 8009eec:	bf5c      	itt	pl
 8009eee:	6013      	strpl	r3, [r2, #0]
 8009ef0:	2002      	movpl	r0, #2
 8009ef2:	4770      	bx	lr
 8009ef4:	b299      	uxth	r1, r3
 8009ef6:	b909      	cbnz	r1, 8009efc <__lo0bits+0x2a>
 8009ef8:	0c1b      	lsrs	r3, r3, #16
 8009efa:	2010      	movs	r0, #16
 8009efc:	b2d9      	uxtb	r1, r3
 8009efe:	b909      	cbnz	r1, 8009f04 <__lo0bits+0x32>
 8009f00:	3008      	adds	r0, #8
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	0719      	lsls	r1, r3, #28
 8009f06:	bf04      	itt	eq
 8009f08:	091b      	lsreq	r3, r3, #4
 8009f0a:	3004      	addeq	r0, #4
 8009f0c:	0799      	lsls	r1, r3, #30
 8009f0e:	bf04      	itt	eq
 8009f10:	089b      	lsreq	r3, r3, #2
 8009f12:	3002      	addeq	r0, #2
 8009f14:	07d9      	lsls	r1, r3, #31
 8009f16:	d403      	bmi.n	8009f20 <__lo0bits+0x4e>
 8009f18:	085b      	lsrs	r3, r3, #1
 8009f1a:	f100 0001 	add.w	r0, r0, #1
 8009f1e:	d003      	beq.n	8009f28 <__lo0bits+0x56>
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	4770      	bx	lr
 8009f24:	2000      	movs	r0, #0
 8009f26:	4770      	bx	lr
 8009f28:	2020      	movs	r0, #32
 8009f2a:	4770      	bx	lr

08009f2c <__i2b>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	460c      	mov	r4, r1
 8009f30:	2101      	movs	r1, #1
 8009f32:	f7ff febd 	bl	8009cb0 <_Balloc>
 8009f36:	4602      	mov	r2, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__i2b+0x1a>
 8009f3a:	4b05      	ldr	r3, [pc, #20]	@ (8009f50 <__i2b+0x24>)
 8009f3c:	4805      	ldr	r0, [pc, #20]	@ (8009f54 <__i2b+0x28>)
 8009f3e:	f240 1145 	movw	r1, #325	@ 0x145
 8009f42:	f001 fe09 	bl	800bb58 <__assert_func>
 8009f46:	2301      	movs	r3, #1
 8009f48:	6144      	str	r4, [r0, #20]
 8009f4a:	6103      	str	r3, [r0, #16]
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800d4f1 	.word	0x0800d4f1
 8009f54:	0800d502 	.word	0x0800d502

08009f58 <__multiply>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	690a      	ldr	r2, [r1, #16]
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	bfa8      	it	ge
 8009f66:	4623      	movge	r3, r4
 8009f68:	460f      	mov	r7, r1
 8009f6a:	bfa4      	itt	ge
 8009f6c:	460c      	movge	r4, r1
 8009f6e:	461f      	movge	r7, r3
 8009f70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009f74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009f78:	68a3      	ldr	r3, [r4, #8]
 8009f7a:	6861      	ldr	r1, [r4, #4]
 8009f7c:	eb0a 0609 	add.w	r6, sl, r9
 8009f80:	42b3      	cmp	r3, r6
 8009f82:	b085      	sub	sp, #20
 8009f84:	bfb8      	it	lt
 8009f86:	3101      	addlt	r1, #1
 8009f88:	f7ff fe92 	bl	8009cb0 <_Balloc>
 8009f8c:	b930      	cbnz	r0, 8009f9c <__multiply+0x44>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b44      	ldr	r3, [pc, #272]	@ (800a0a4 <__multiply+0x14c>)
 8009f92:	4845      	ldr	r0, [pc, #276]	@ (800a0a8 <__multiply+0x150>)
 8009f94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f98:	f001 fdde 	bl	800bb58 <__assert_func>
 8009f9c:	f100 0514 	add.w	r5, r0, #20
 8009fa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	d321      	bcc.n	8009ff0 <__multiply+0x98>
 8009fac:	f107 0114 	add.w	r1, r7, #20
 8009fb0:	f104 0214 	add.w	r2, r4, #20
 8009fb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009fb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009fbc:	9302      	str	r3, [sp, #8]
 8009fbe:	1b13      	subs	r3, r2, r4
 8009fc0:	3b15      	subs	r3, #21
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	f104 0715 	add.w	r7, r4, #21
 8009fcc:	42ba      	cmp	r2, r7
 8009fce:	bf38      	it	cc
 8009fd0:	2304      	movcc	r3, #4
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	9103      	str	r1, [sp, #12]
 8009fd8:	428b      	cmp	r3, r1
 8009fda:	d80c      	bhi.n	8009ff6 <__multiply+0x9e>
 8009fdc:	2e00      	cmp	r6, #0
 8009fde:	dd03      	ble.n	8009fe8 <__multiply+0x90>
 8009fe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d05b      	beq.n	800a0a0 <__multiply+0x148>
 8009fe8:	6106      	str	r6, [r0, #16]
 8009fea:	b005      	add	sp, #20
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	f843 2b04 	str.w	r2, [r3], #4
 8009ff4:	e7d8      	b.n	8009fa8 <__multiply+0x50>
 8009ff6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ffa:	f1ba 0f00 	cmp.w	sl, #0
 8009ffe:	d024      	beq.n	800a04a <__multiply+0xf2>
 800a000:	f104 0e14 	add.w	lr, r4, #20
 800a004:	46a9      	mov	r9, r5
 800a006:	f04f 0c00 	mov.w	ip, #0
 800a00a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a00e:	f8d9 3000 	ldr.w	r3, [r9]
 800a012:	fa1f fb87 	uxth.w	fp, r7
 800a016:	b29b      	uxth	r3, r3
 800a018:	fb0a 330b 	mla	r3, sl, fp, r3
 800a01c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a020:	f8d9 7000 	ldr.w	r7, [r9]
 800a024:	4463      	add	r3, ip
 800a026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a02a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a02e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a032:	b29b      	uxth	r3, r3
 800a034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a038:	4572      	cmp	r2, lr
 800a03a:	f849 3b04 	str.w	r3, [r9], #4
 800a03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a042:	d8e2      	bhi.n	800a00a <__multiply+0xb2>
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	f845 c003 	str.w	ip, [r5, r3]
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a050:	3104      	adds	r1, #4
 800a052:	f1b9 0f00 	cmp.w	r9, #0
 800a056:	d021      	beq.n	800a09c <__multiply+0x144>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	f104 0c14 	add.w	ip, r4, #20
 800a05e:	46ae      	mov	lr, r5
 800a060:	f04f 0a00 	mov.w	sl, #0
 800a064:	f8bc b000 	ldrh.w	fp, [ip]
 800a068:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a06c:	fb09 770b 	mla	r7, r9, fp, r7
 800a070:	4457      	add	r7, sl
 800a072:	b29b      	uxth	r3, r3
 800a074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a078:	f84e 3b04 	str.w	r3, [lr], #4
 800a07c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a084:	f8be 3000 	ldrh.w	r3, [lr]
 800a088:	fb09 330a 	mla	r3, r9, sl, r3
 800a08c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a090:	4562      	cmp	r2, ip
 800a092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a096:	d8e5      	bhi.n	800a064 <__multiply+0x10c>
 800a098:	9f01      	ldr	r7, [sp, #4]
 800a09a:	51eb      	str	r3, [r5, r7]
 800a09c:	3504      	adds	r5, #4
 800a09e:	e799      	b.n	8009fd4 <__multiply+0x7c>
 800a0a0:	3e01      	subs	r6, #1
 800a0a2:	e79b      	b.n	8009fdc <__multiply+0x84>
 800a0a4:	0800d4f1 	.word	0x0800d4f1
 800a0a8:	0800d502 	.word	0x0800d502

0800a0ac <__pow5mult>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	f012 0203 	ands.w	r2, r2, #3
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	460e      	mov	r6, r1
 800a0ba:	d007      	beq.n	800a0cc <__pow5mult+0x20>
 800a0bc:	4c25      	ldr	r4, [pc, #148]	@ (800a154 <__pow5mult+0xa8>)
 800a0be:	3a01      	subs	r2, #1
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0c6:	f7ff fe55 	bl	8009d74 <__multadd>
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	10ad      	asrs	r5, r5, #2
 800a0ce:	d03d      	beq.n	800a14c <__pow5mult+0xa0>
 800a0d0:	69fc      	ldr	r4, [r7, #28]
 800a0d2:	b97c      	cbnz	r4, 800a0f4 <__pow5mult+0x48>
 800a0d4:	2010      	movs	r0, #16
 800a0d6:	f7ff fd35 	bl	8009b44 <malloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	61f8      	str	r0, [r7, #28]
 800a0de:	b928      	cbnz	r0, 800a0ec <__pow5mult+0x40>
 800a0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a158 <__pow5mult+0xac>)
 800a0e2:	481e      	ldr	r0, [pc, #120]	@ (800a15c <__pow5mult+0xb0>)
 800a0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0e8:	f001 fd36 	bl	800bb58 <__assert_func>
 800a0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0f0:	6004      	str	r4, [r0, #0]
 800a0f2:	60c4      	str	r4, [r0, #12]
 800a0f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0fc:	b94c      	cbnz	r4, 800a112 <__pow5mult+0x66>
 800a0fe:	f240 2171 	movw	r1, #625	@ 0x271
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff ff12 	bl	8009f2c <__i2b>
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a10e:	4604      	mov	r4, r0
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 0900 	mov.w	r9, #0
 800a116:	07eb      	lsls	r3, r5, #31
 800a118:	d50a      	bpl.n	800a130 <__pow5mult+0x84>
 800a11a:	4631      	mov	r1, r6
 800a11c:	4622      	mov	r2, r4
 800a11e:	4638      	mov	r0, r7
 800a120:	f7ff ff1a 	bl	8009f58 <__multiply>
 800a124:	4631      	mov	r1, r6
 800a126:	4680      	mov	r8, r0
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff fe01 	bl	8009d30 <_Bfree>
 800a12e:	4646      	mov	r6, r8
 800a130:	106d      	asrs	r5, r5, #1
 800a132:	d00b      	beq.n	800a14c <__pow5mult+0xa0>
 800a134:	6820      	ldr	r0, [r4, #0]
 800a136:	b938      	cbnz	r0, 800a148 <__pow5mult+0x9c>
 800a138:	4622      	mov	r2, r4
 800a13a:	4621      	mov	r1, r4
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff ff0b 	bl	8009f58 <__multiply>
 800a142:	6020      	str	r0, [r4, #0]
 800a144:	f8c0 9000 	str.w	r9, [r0]
 800a148:	4604      	mov	r4, r0
 800a14a:	e7e4      	b.n	800a116 <__pow5mult+0x6a>
 800a14c:	4630      	mov	r0, r6
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	bf00      	nop
 800a154:	0800d55c 	.word	0x0800d55c
 800a158:	0800d482 	.word	0x0800d482
 800a15c:	0800d502 	.word	0x0800d502

0800a160 <__lshift>:
 800a160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a16e:	68a3      	ldr	r3, [r4, #8]
 800a170:	4607      	mov	r7, r0
 800a172:	4691      	mov	r9, r2
 800a174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a178:	f108 0601 	add.w	r6, r8, #1
 800a17c:	42b3      	cmp	r3, r6
 800a17e:	db0b      	blt.n	800a198 <__lshift+0x38>
 800a180:	4638      	mov	r0, r7
 800a182:	f7ff fd95 	bl	8009cb0 <_Balloc>
 800a186:	4605      	mov	r5, r0
 800a188:	b948      	cbnz	r0, 800a19e <__lshift+0x3e>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b28      	ldr	r3, [pc, #160]	@ (800a230 <__lshift+0xd0>)
 800a18e:	4829      	ldr	r0, [pc, #164]	@ (800a234 <__lshift+0xd4>)
 800a190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a194:	f001 fce0 	bl	800bb58 <__assert_func>
 800a198:	3101      	adds	r1, #1
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	e7ee      	b.n	800a17c <__lshift+0x1c>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f100 0114 	add.w	r1, r0, #20
 800a1a4:	f100 0210 	add.w	r2, r0, #16
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	4553      	cmp	r3, sl
 800a1ac:	db33      	blt.n	800a216 <__lshift+0xb6>
 800a1ae:	6920      	ldr	r0, [r4, #16]
 800a1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1b4:	f104 0314 	add.w	r3, r4, #20
 800a1b8:	f019 091f 	ands.w	r9, r9, #31
 800a1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1c4:	d02b      	beq.n	800a21e <__lshift+0xbe>
 800a1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1ca:	468a      	mov	sl, r1
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a1d4:	4310      	orrs	r0, r2
 800a1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800a1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1de:	459c      	cmp	ip, r3
 800a1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1e4:	d8f3      	bhi.n	800a1ce <__lshift+0x6e>
 800a1e6:	ebac 0304 	sub.w	r3, ip, r4
 800a1ea:	3b15      	subs	r3, #21
 800a1ec:	f023 0303 	bic.w	r3, r3, #3
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	f104 0015 	add.w	r0, r4, #21
 800a1f6:	4584      	cmp	ip, r0
 800a1f8:	bf38      	it	cc
 800a1fa:	2304      	movcc	r3, #4
 800a1fc:	50ca      	str	r2, [r1, r3]
 800a1fe:	b10a      	cbz	r2, 800a204 <__lshift+0xa4>
 800a200:	f108 0602 	add.w	r6, r8, #2
 800a204:	3e01      	subs	r6, #1
 800a206:	4638      	mov	r0, r7
 800a208:	612e      	str	r6, [r5, #16]
 800a20a:	4621      	mov	r1, r4
 800a20c:	f7ff fd90 	bl	8009d30 <_Bfree>
 800a210:	4628      	mov	r0, r5
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a216:	f842 0f04 	str.w	r0, [r2, #4]!
 800a21a:	3301      	adds	r3, #1
 800a21c:	e7c5      	b.n	800a1aa <__lshift+0x4a>
 800a21e:	3904      	subs	r1, #4
 800a220:	f853 2b04 	ldr.w	r2, [r3], #4
 800a224:	f841 2f04 	str.w	r2, [r1, #4]!
 800a228:	459c      	cmp	ip, r3
 800a22a:	d8f9      	bhi.n	800a220 <__lshift+0xc0>
 800a22c:	e7ea      	b.n	800a204 <__lshift+0xa4>
 800a22e:	bf00      	nop
 800a230:	0800d4f1 	.word	0x0800d4f1
 800a234:	0800d502 	.word	0x0800d502

0800a238 <__mcmp>:
 800a238:	690a      	ldr	r2, [r1, #16]
 800a23a:	4603      	mov	r3, r0
 800a23c:	6900      	ldr	r0, [r0, #16]
 800a23e:	1a80      	subs	r0, r0, r2
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	d10e      	bne.n	800a262 <__mcmp+0x2a>
 800a244:	3314      	adds	r3, #20
 800a246:	3114      	adds	r1, #20
 800a248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a24c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a258:	4295      	cmp	r5, r2
 800a25a:	d003      	beq.n	800a264 <__mcmp+0x2c>
 800a25c:	d205      	bcs.n	800a26a <__mcmp+0x32>
 800a25e:	f04f 30ff 	mov.w	r0, #4294967295
 800a262:	bd30      	pop	{r4, r5, pc}
 800a264:	42a3      	cmp	r3, r4
 800a266:	d3f3      	bcc.n	800a250 <__mcmp+0x18>
 800a268:	e7fb      	b.n	800a262 <__mcmp+0x2a>
 800a26a:	2001      	movs	r0, #1
 800a26c:	e7f9      	b.n	800a262 <__mcmp+0x2a>
	...

0800a270 <__mdiff>:
 800a270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4689      	mov	r9, r1
 800a276:	4606      	mov	r6, r0
 800a278:	4611      	mov	r1, r2
 800a27a:	4648      	mov	r0, r9
 800a27c:	4614      	mov	r4, r2
 800a27e:	f7ff ffdb 	bl	800a238 <__mcmp>
 800a282:	1e05      	subs	r5, r0, #0
 800a284:	d112      	bne.n	800a2ac <__mdiff+0x3c>
 800a286:	4629      	mov	r1, r5
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff fd11 	bl	8009cb0 <_Balloc>
 800a28e:	4602      	mov	r2, r0
 800a290:	b928      	cbnz	r0, 800a29e <__mdiff+0x2e>
 800a292:	4b3f      	ldr	r3, [pc, #252]	@ (800a390 <__mdiff+0x120>)
 800a294:	f240 2137 	movw	r1, #567	@ 0x237
 800a298:	483e      	ldr	r0, [pc, #248]	@ (800a394 <__mdiff+0x124>)
 800a29a:	f001 fc5d 	bl	800bb58 <__assert_func>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	b003      	add	sp, #12
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	bfbc      	itt	lt
 800a2ae:	464b      	movlt	r3, r9
 800a2b0:	46a1      	movlt	r9, r4
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2b8:	bfba      	itte	lt
 800a2ba:	461c      	movlt	r4, r3
 800a2bc:	2501      	movlt	r5, #1
 800a2be:	2500      	movge	r5, #0
 800a2c0:	f7ff fcf6 	bl	8009cb0 <_Balloc>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	b918      	cbnz	r0, 800a2d0 <__mdiff+0x60>
 800a2c8:	4b31      	ldr	r3, [pc, #196]	@ (800a390 <__mdiff+0x120>)
 800a2ca:	f240 2145 	movw	r1, #581	@ 0x245
 800a2ce:	e7e3      	b.n	800a298 <__mdiff+0x28>
 800a2d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2d4:	6926      	ldr	r6, [r4, #16]
 800a2d6:	60c5      	str	r5, [r0, #12]
 800a2d8:	f109 0310 	add.w	r3, r9, #16
 800a2dc:	f109 0514 	add.w	r5, r9, #20
 800a2e0:	f104 0e14 	add.w	lr, r4, #20
 800a2e4:	f100 0b14 	add.w	fp, r0, #20
 800a2e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	46d9      	mov	r9, fp
 800a2f4:	f04f 0c00 	mov.w	ip, #0
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a2fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	fa1f f38a 	uxth.w	r3, sl
 800a308:	4619      	mov	r1, r3
 800a30a:	b283      	uxth	r3, r0
 800a30c:	1acb      	subs	r3, r1, r3
 800a30e:	0c00      	lsrs	r0, r0, #16
 800a310:	4463      	add	r3, ip
 800a312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a320:	4576      	cmp	r6, lr
 800a322:	f849 3b04 	str.w	r3, [r9], #4
 800a326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a32a:	d8e5      	bhi.n	800a2f8 <__mdiff+0x88>
 800a32c:	1b33      	subs	r3, r6, r4
 800a32e:	3b15      	subs	r3, #21
 800a330:	f023 0303 	bic.w	r3, r3, #3
 800a334:	3415      	adds	r4, #21
 800a336:	3304      	adds	r3, #4
 800a338:	42a6      	cmp	r6, r4
 800a33a:	bf38      	it	cc
 800a33c:	2304      	movcc	r3, #4
 800a33e:	441d      	add	r5, r3
 800a340:	445b      	add	r3, fp
 800a342:	461e      	mov	r6, r3
 800a344:	462c      	mov	r4, r5
 800a346:	4544      	cmp	r4, r8
 800a348:	d30e      	bcc.n	800a368 <__mdiff+0xf8>
 800a34a:	f108 0103 	add.w	r1, r8, #3
 800a34e:	1b49      	subs	r1, r1, r5
 800a350:	f021 0103 	bic.w	r1, r1, #3
 800a354:	3d03      	subs	r5, #3
 800a356:	45a8      	cmp	r8, r5
 800a358:	bf38      	it	cc
 800a35a:	2100      	movcc	r1, #0
 800a35c:	440b      	add	r3, r1
 800a35e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a362:	b191      	cbz	r1, 800a38a <__mdiff+0x11a>
 800a364:	6117      	str	r7, [r2, #16]
 800a366:	e79d      	b.n	800a2a4 <__mdiff+0x34>
 800a368:	f854 1b04 	ldr.w	r1, [r4], #4
 800a36c:	46e6      	mov	lr, ip
 800a36e:	0c08      	lsrs	r0, r1, #16
 800a370:	fa1c fc81 	uxtah	ip, ip, r1
 800a374:	4471      	add	r1, lr
 800a376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a37a:	b289      	uxth	r1, r1
 800a37c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a380:	f846 1b04 	str.w	r1, [r6], #4
 800a384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a388:	e7dd      	b.n	800a346 <__mdiff+0xd6>
 800a38a:	3f01      	subs	r7, #1
 800a38c:	e7e7      	b.n	800a35e <__mdiff+0xee>
 800a38e:	bf00      	nop
 800a390:	0800d4f1 	.word	0x0800d4f1
 800a394:	0800d502 	.word	0x0800d502

0800a398 <__ulp>:
 800a398:	b082      	sub	sp, #8
 800a39a:	ed8d 0b00 	vstr	d0, [sp]
 800a39e:	9a01      	ldr	r2, [sp, #4]
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e0 <__ulp+0x48>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc08      	bgt.n	800a3be <__ulp+0x26>
 800a3ac:	425b      	negs	r3, r3
 800a3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3b6:	da04      	bge.n	800a3c2 <__ulp+0x2a>
 800a3b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a3bc:	4113      	asrs	r3, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	e008      	b.n	800a3d4 <__ulp+0x3c>
 800a3c2:	f1a2 0314 	sub.w	r3, r2, #20
 800a3c6:	2b1e      	cmp	r3, #30
 800a3c8:	bfda      	itte	le
 800a3ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a3ce:	40da      	lsrle	r2, r3
 800a3d0:	2201      	movgt	r2, #1
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	ec41 0b10 	vmov	d0, r0, r1
 800a3dc:	b002      	add	sp, #8
 800a3de:	4770      	bx	lr
 800a3e0:	7ff00000 	.word	0x7ff00000

0800a3e4 <__b2d>:
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	6906      	ldr	r6, [r0, #16]
 800a3ea:	f100 0814 	add.w	r8, r0, #20
 800a3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3f2:	1f37      	subs	r7, r6, #4
 800a3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7ff fd4b 	bl	8009e94 <__hi0bits>
 800a3fe:	f1c0 0320 	rsb	r3, r0, #32
 800a402:	280a      	cmp	r0, #10
 800a404:	600b      	str	r3, [r1, #0]
 800a406:	491b      	ldr	r1, [pc, #108]	@ (800a474 <__b2d+0x90>)
 800a408:	dc15      	bgt.n	800a436 <__b2d+0x52>
 800a40a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a40e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a412:	45b8      	cmp	r8, r7
 800a414:	ea43 0501 	orr.w	r5, r3, r1
 800a418:	bf34      	ite	cc
 800a41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a41e:	2300      	movcs	r3, #0
 800a420:	3015      	adds	r0, #21
 800a422:	fa02 f000 	lsl.w	r0, r2, r0
 800a426:	fa23 f30c 	lsr.w	r3, r3, ip
 800a42a:	4303      	orrs	r3, r0
 800a42c:	461c      	mov	r4, r3
 800a42e:	ec45 4b10 	vmov	d0, r4, r5
 800a432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a436:	45b8      	cmp	r8, r7
 800a438:	bf3a      	itte	cc
 800a43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a43e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a442:	2300      	movcs	r3, #0
 800a444:	380b      	subs	r0, #11
 800a446:	d012      	beq.n	800a46e <__b2d+0x8a>
 800a448:	f1c0 0120 	rsb	r1, r0, #32
 800a44c:	fa23 f401 	lsr.w	r4, r3, r1
 800a450:	4082      	lsls	r2, r0
 800a452:	4322      	orrs	r2, r4
 800a454:	4547      	cmp	r7, r8
 800a456:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a45a:	bf8c      	ite	hi
 800a45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a460:	2200      	movls	r2, #0
 800a462:	4083      	lsls	r3, r0
 800a464:	40ca      	lsrs	r2, r1
 800a466:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a46a:	4313      	orrs	r3, r2
 800a46c:	e7de      	b.n	800a42c <__b2d+0x48>
 800a46e:	ea42 0501 	orr.w	r5, r2, r1
 800a472:	e7db      	b.n	800a42c <__b2d+0x48>
 800a474:	3ff00000 	.word	0x3ff00000

0800a478 <__d2b>:
 800a478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	460f      	mov	r7, r1
 800a47e:	2101      	movs	r1, #1
 800a480:	ec59 8b10 	vmov	r8, r9, d0
 800a484:	4616      	mov	r6, r2
 800a486:	f7ff fc13 	bl	8009cb0 <_Balloc>
 800a48a:	4604      	mov	r4, r0
 800a48c:	b930      	cbnz	r0, 800a49c <__d2b+0x24>
 800a48e:	4602      	mov	r2, r0
 800a490:	4b23      	ldr	r3, [pc, #140]	@ (800a520 <__d2b+0xa8>)
 800a492:	4824      	ldr	r0, [pc, #144]	@ (800a524 <__d2b+0xac>)
 800a494:	f240 310f 	movw	r1, #783	@ 0x30f
 800a498:	f001 fb5e 	bl	800bb58 <__assert_func>
 800a49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4a4:	b10d      	cbz	r5, 800a4aa <__d2b+0x32>
 800a4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800a4b0:	d023      	beq.n	800a4fa <__d2b+0x82>
 800a4b2:	4668      	mov	r0, sp
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	f7ff fd0c 	bl	8009ed2 <__lo0bits>
 800a4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4be:	b1d0      	cbz	r0, 800a4f6 <__d2b+0x7e>
 800a4c0:	f1c0 0320 	rsb	r3, r0, #32
 800a4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	40c2      	lsrs	r2, r0
 800a4cc:	6163      	str	r3, [r4, #20]
 800a4ce:	9201      	str	r2, [sp, #4]
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	61a3      	str	r3, [r4, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2201      	moveq	r2, #1
 800a4da:	2202      	movne	r2, #2
 800a4dc:	6122      	str	r2, [r4, #16]
 800a4de:	b1a5      	cbz	r5, 800a50a <__d2b+0x92>
 800a4e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4e4:	4405      	add	r5, r0
 800a4e6:	603d      	str	r5, [r7, #0]
 800a4e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4ec:	6030      	str	r0, [r6, #0]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	b003      	add	sp, #12
 800a4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f6:	6161      	str	r1, [r4, #20]
 800a4f8:	e7ea      	b.n	800a4d0 <__d2b+0x58>
 800a4fa:	a801      	add	r0, sp, #4
 800a4fc:	f7ff fce9 	bl	8009ed2 <__lo0bits>
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	6163      	str	r3, [r4, #20]
 800a504:	3020      	adds	r0, #32
 800a506:	2201      	movs	r2, #1
 800a508:	e7e8      	b.n	800a4dc <__d2b+0x64>
 800a50a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a50e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a512:	6038      	str	r0, [r7, #0]
 800a514:	6918      	ldr	r0, [r3, #16]
 800a516:	f7ff fcbd 	bl	8009e94 <__hi0bits>
 800a51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a51e:	e7e5      	b.n	800a4ec <__d2b+0x74>
 800a520:	0800d4f1 	.word	0x0800d4f1
 800a524:	0800d502 	.word	0x0800d502

0800a528 <__ratio>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	b085      	sub	sp, #20
 800a52e:	e9cd 1000 	strd	r1, r0, [sp]
 800a532:	a902      	add	r1, sp, #8
 800a534:	f7ff ff56 	bl	800a3e4 <__b2d>
 800a538:	9800      	ldr	r0, [sp, #0]
 800a53a:	a903      	add	r1, sp, #12
 800a53c:	ec55 4b10 	vmov	r4, r5, d0
 800a540:	f7ff ff50 	bl	800a3e4 <__b2d>
 800a544:	9b01      	ldr	r3, [sp, #4]
 800a546:	6919      	ldr	r1, [r3, #16]
 800a548:	9b00      	ldr	r3, [sp, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	1ac9      	subs	r1, r1, r3
 800a54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	ec5b ab10 	vmov	sl, fp, d0
 800a558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfce      	itee	gt
 800a560:	462a      	movgt	r2, r5
 800a562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a566:	465a      	movle	r2, fp
 800a568:	462f      	mov	r7, r5
 800a56a:	46d9      	mov	r9, fp
 800a56c:	bfcc      	ite	gt
 800a56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a572:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a576:	464b      	mov	r3, r9
 800a578:	4652      	mov	r2, sl
 800a57a:	4620      	mov	r0, r4
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f6 f985 	bl	800088c <__aeabi_ddiv>
 800a582:	ec41 0b10 	vmov	d0, r0, r1
 800a586:	b005      	add	sp, #20
 800a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a58c <__copybits>:
 800a58c:	3901      	subs	r1, #1
 800a58e:	b570      	push	{r4, r5, r6, lr}
 800a590:	1149      	asrs	r1, r1, #5
 800a592:	6914      	ldr	r4, [r2, #16]
 800a594:	3101      	adds	r1, #1
 800a596:	f102 0314 	add.w	r3, r2, #20
 800a59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5a2:	1f05      	subs	r5, r0, #4
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d30c      	bcc.n	800a5c2 <__copybits+0x36>
 800a5a8:	1aa3      	subs	r3, r4, r2
 800a5aa:	3b11      	subs	r3, #17
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	3211      	adds	r2, #17
 800a5b2:	42a2      	cmp	r2, r4
 800a5b4:	bf88      	it	hi
 800a5b6:	2300      	movhi	r3, #0
 800a5b8:	4418      	add	r0, r3
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4288      	cmp	r0, r1
 800a5be:	d305      	bcc.n	800a5cc <__copybits+0x40>
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5ca:	e7eb      	b.n	800a5a4 <__copybits+0x18>
 800a5cc:	f840 3b04 	str.w	r3, [r0], #4
 800a5d0:	e7f4      	b.n	800a5bc <__copybits+0x30>

0800a5d2 <__any_on>:
 800a5d2:	f100 0214 	add.w	r2, r0, #20
 800a5d6:	6900      	ldr	r0, [r0, #16]
 800a5d8:	114b      	asrs	r3, r1, #5
 800a5da:	4298      	cmp	r0, r3
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	db11      	blt.n	800a604 <__any_on+0x32>
 800a5e0:	dd0a      	ble.n	800a5f8 <__any_on+0x26>
 800a5e2:	f011 011f 	ands.w	r1, r1, #31
 800a5e6:	d007      	beq.n	800a5f8 <__any_on+0x26>
 800a5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5ec:	fa24 f001 	lsr.w	r0, r4, r1
 800a5f0:	fa00 f101 	lsl.w	r1, r0, r1
 800a5f4:	428c      	cmp	r4, r1
 800a5f6:	d10b      	bne.n	800a610 <__any_on+0x3e>
 800a5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d803      	bhi.n	800a608 <__any_on+0x36>
 800a600:	2000      	movs	r0, #0
 800a602:	bd10      	pop	{r4, pc}
 800a604:	4603      	mov	r3, r0
 800a606:	e7f7      	b.n	800a5f8 <__any_on+0x26>
 800a608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a60c:	2900      	cmp	r1, #0
 800a60e:	d0f5      	beq.n	800a5fc <__any_on+0x2a>
 800a610:	2001      	movs	r0, #1
 800a612:	e7f6      	b.n	800a602 <__any_on+0x30>

0800a614 <sulp>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	460d      	mov	r5, r1
 800a61a:	ec45 4b10 	vmov	d0, r4, r5
 800a61e:	4616      	mov	r6, r2
 800a620:	f7ff feba 	bl	800a398 <__ulp>
 800a624:	ec51 0b10 	vmov	r0, r1, d0
 800a628:	b17e      	cbz	r6, 800a64a <sulp+0x36>
 800a62a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a62e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd09      	ble.n	800a64a <sulp+0x36>
 800a636:	051b      	lsls	r3, r3, #20
 800a638:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a63c:	2400      	movs	r4, #0
 800a63e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	f7f5 fff7 	bl	8000638 <__aeabi_dmul>
 800a64a:	ec41 0b10 	vmov	d0, r0, r1
 800a64e:	bd70      	pop	{r4, r5, r6, pc}

0800a650 <_strtod_l>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	b09f      	sub	sp, #124	@ 0x7c
 800a656:	460c      	mov	r4, r1
 800a658:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a65a:	2200      	movs	r2, #0
 800a65c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a65e:	9005      	str	r0, [sp, #20]
 800a660:	f04f 0a00 	mov.w	sl, #0
 800a664:	f04f 0b00 	mov.w	fp, #0
 800a668:	460a      	mov	r2, r1
 800a66a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a66c:	7811      	ldrb	r1, [r2, #0]
 800a66e:	292b      	cmp	r1, #43	@ 0x2b
 800a670:	d04a      	beq.n	800a708 <_strtod_l+0xb8>
 800a672:	d838      	bhi.n	800a6e6 <_strtod_l+0x96>
 800a674:	290d      	cmp	r1, #13
 800a676:	d832      	bhi.n	800a6de <_strtod_l+0x8e>
 800a678:	2908      	cmp	r1, #8
 800a67a:	d832      	bhi.n	800a6e2 <_strtod_l+0x92>
 800a67c:	2900      	cmp	r1, #0
 800a67e:	d03b      	beq.n	800a6f8 <_strtod_l+0xa8>
 800a680:	2200      	movs	r2, #0
 800a682:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a684:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a686:	782a      	ldrb	r2, [r5, #0]
 800a688:	2a30      	cmp	r2, #48	@ 0x30
 800a68a:	f040 80b3 	bne.w	800a7f4 <_strtod_l+0x1a4>
 800a68e:	786a      	ldrb	r2, [r5, #1]
 800a690:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a694:	2a58      	cmp	r2, #88	@ 0x58
 800a696:	d16e      	bne.n	800a776 <_strtod_l+0x126>
 800a698:	9302      	str	r3, [sp, #8]
 800a69a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4a8e      	ldr	r2, [pc, #568]	@ (800a8dc <_strtod_l+0x28c>)
 800a6a4:	9805      	ldr	r0, [sp, #20]
 800a6a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6a8:	a919      	add	r1, sp, #100	@ 0x64
 800a6aa:	f001 faef 	bl	800bc8c <__gethex>
 800a6ae:	f010 060f 	ands.w	r6, r0, #15
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	d005      	beq.n	800a6c2 <_strtod_l+0x72>
 800a6b6:	2e06      	cmp	r6, #6
 800a6b8:	d128      	bne.n	800a70c <_strtod_l+0xbc>
 800a6ba:	3501      	adds	r5, #1
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f040 858e 	bne.w	800b1e6 <_strtod_l+0xb96>
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6cc:	b1cb      	cbz	r3, 800a702 <_strtod_l+0xb2>
 800a6ce:	4652      	mov	r2, sl
 800a6d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a6d4:	ec43 2b10 	vmov	d0, r2, r3
 800a6d8:	b01f      	add	sp, #124	@ 0x7c
 800a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6de:	2920      	cmp	r1, #32
 800a6e0:	d1ce      	bne.n	800a680 <_strtod_l+0x30>
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	e7c1      	b.n	800a66a <_strtod_l+0x1a>
 800a6e6:	292d      	cmp	r1, #45	@ 0x2d
 800a6e8:	d1ca      	bne.n	800a680 <_strtod_l+0x30>
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6ee:	1c51      	adds	r1, r2, #1
 800a6f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6f2:	7852      	ldrb	r2, [r2, #1]
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	d1c5      	bne.n	800a684 <_strtod_l+0x34>
 800a6f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f040 8570 	bne.w	800b1e2 <_strtod_l+0xb92>
 800a702:	4652      	mov	r2, sl
 800a704:	465b      	mov	r3, fp
 800a706:	e7e5      	b.n	800a6d4 <_strtod_l+0x84>
 800a708:	2100      	movs	r1, #0
 800a70a:	e7ef      	b.n	800a6ec <_strtod_l+0x9c>
 800a70c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a70e:	b13a      	cbz	r2, 800a720 <_strtod_l+0xd0>
 800a710:	2135      	movs	r1, #53	@ 0x35
 800a712:	a81c      	add	r0, sp, #112	@ 0x70
 800a714:	f7ff ff3a 	bl	800a58c <__copybits>
 800a718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a71a:	9805      	ldr	r0, [sp, #20]
 800a71c:	f7ff fb08 	bl	8009d30 <_Bfree>
 800a720:	3e01      	subs	r6, #1
 800a722:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a724:	2e04      	cmp	r6, #4
 800a726:	d806      	bhi.n	800a736 <_strtod_l+0xe6>
 800a728:	e8df f006 	tbb	[pc, r6]
 800a72c:	201d0314 	.word	0x201d0314
 800a730:	14          	.byte	0x14
 800a731:	00          	.byte	0x00
 800a732:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a736:	05e1      	lsls	r1, r4, #23
 800a738:	bf48      	it	mi
 800a73a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a73e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a742:	0d1b      	lsrs	r3, r3, #20
 800a744:	051b      	lsls	r3, r3, #20
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1bb      	bne.n	800a6c2 <_strtod_l+0x72>
 800a74a:	f7fe fb23 	bl	8008d94 <__errno>
 800a74e:	2322      	movs	r3, #34	@ 0x22
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	e7b6      	b.n	800a6c2 <_strtod_l+0x72>
 800a754:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a758:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a75c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a760:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a764:	e7e7      	b.n	800a736 <_strtod_l+0xe6>
 800a766:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a8e4 <_strtod_l+0x294>
 800a76a:	e7e4      	b.n	800a736 <_strtod_l+0xe6>
 800a76c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a770:	f04f 3aff 	mov.w	sl, #4294967295
 800a774:	e7df      	b.n	800a736 <_strtod_l+0xe6>
 800a776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	2b30      	cmp	r3, #48	@ 0x30
 800a780:	d0f9      	beq.n	800a776 <_strtod_l+0x126>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d09d      	beq.n	800a6c2 <_strtod_l+0x72>
 800a786:	2301      	movs	r3, #1
 800a788:	9309      	str	r3, [sp, #36]	@ 0x24
 800a78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a78c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a78e:	2300      	movs	r3, #0
 800a790:	9308      	str	r3, [sp, #32]
 800a792:	930a      	str	r3, [sp, #40]	@ 0x28
 800a794:	461f      	mov	r7, r3
 800a796:	220a      	movs	r2, #10
 800a798:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a79a:	7805      	ldrb	r5, [r0, #0]
 800a79c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7a0:	b2d9      	uxtb	r1, r3
 800a7a2:	2909      	cmp	r1, #9
 800a7a4:	d928      	bls.n	800a7f8 <_strtod_l+0x1a8>
 800a7a6:	494e      	ldr	r1, [pc, #312]	@ (800a8e0 <_strtod_l+0x290>)
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f001 f9ab 	bl	800bb04 <strncmp>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d032      	beq.n	800a818 <_strtod_l+0x1c8>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4681      	mov	r9, r0
 800a7b8:	463d      	mov	r5, r7
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2a65      	cmp	r2, #101	@ 0x65
 800a7be:	d001      	beq.n	800a7c4 <_strtod_l+0x174>
 800a7c0:	2a45      	cmp	r2, #69	@ 0x45
 800a7c2:	d114      	bne.n	800a7ee <_strtod_l+0x19e>
 800a7c4:	b91d      	cbnz	r5, 800a7ce <_strtod_l+0x17e>
 800a7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c8:	4302      	orrs	r2, r0
 800a7ca:	d095      	beq.n	800a6f8 <_strtod_l+0xa8>
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a7d0:	1c62      	adds	r2, r4, #1
 800a7d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7d4:	7862      	ldrb	r2, [r4, #1]
 800a7d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a7d8:	d077      	beq.n	800a8ca <_strtod_l+0x27a>
 800a7da:	2a2d      	cmp	r2, #45	@ 0x2d
 800a7dc:	d07b      	beq.n	800a8d6 <_strtod_l+0x286>
 800a7de:	f04f 0c00 	mov.w	ip, #0
 800a7e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a7e6:	2909      	cmp	r1, #9
 800a7e8:	f240 8082 	bls.w	800a8f0 <_strtod_l+0x2a0>
 800a7ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800a7ee:	f04f 0800 	mov.w	r8, #0
 800a7f2:	e0a2      	b.n	800a93a <_strtod_l+0x2ea>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e7c7      	b.n	800a788 <_strtod_l+0x138>
 800a7f8:	2f08      	cmp	r7, #8
 800a7fa:	bfd5      	itete	le
 800a7fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a7fe:	9908      	ldrgt	r1, [sp, #32]
 800a800:	fb02 3301 	mlale	r3, r2, r1, r3
 800a804:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a808:	f100 0001 	add.w	r0, r0, #1
 800a80c:	bfd4      	ite	le
 800a80e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a810:	9308      	strgt	r3, [sp, #32]
 800a812:	3701      	adds	r7, #1
 800a814:	9019      	str	r0, [sp, #100]	@ 0x64
 800a816:	e7bf      	b.n	800a798 <_strtod_l+0x148>
 800a818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a81e:	785a      	ldrb	r2, [r3, #1]
 800a820:	b37f      	cbz	r7, 800a882 <_strtod_l+0x232>
 800a822:	4681      	mov	r9, r0
 800a824:	463d      	mov	r5, r7
 800a826:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d912      	bls.n	800a854 <_strtod_l+0x204>
 800a82e:	2301      	movs	r3, #1
 800a830:	e7c4      	b.n	800a7bc <_strtod_l+0x16c>
 800a832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	9219      	str	r2, [sp, #100]	@ 0x64
 800a838:	785a      	ldrb	r2, [r3, #1]
 800a83a:	3001      	adds	r0, #1
 800a83c:	2a30      	cmp	r2, #48	@ 0x30
 800a83e:	d0f8      	beq.n	800a832 <_strtod_l+0x1e2>
 800a840:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a844:	2b08      	cmp	r3, #8
 800a846:	f200 84d3 	bhi.w	800b1f0 <_strtod_l+0xba0>
 800a84a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a84c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a84e:	4681      	mov	r9, r0
 800a850:	2000      	movs	r0, #0
 800a852:	4605      	mov	r5, r0
 800a854:	3a30      	subs	r2, #48	@ 0x30
 800a856:	f100 0301 	add.w	r3, r0, #1
 800a85a:	d02a      	beq.n	800a8b2 <_strtod_l+0x262>
 800a85c:	4499      	add	r9, r3
 800a85e:	eb00 0c05 	add.w	ip, r0, r5
 800a862:	462b      	mov	r3, r5
 800a864:	210a      	movs	r1, #10
 800a866:	4563      	cmp	r3, ip
 800a868:	d10d      	bne.n	800a886 <_strtod_l+0x236>
 800a86a:	1c69      	adds	r1, r5, #1
 800a86c:	4401      	add	r1, r0
 800a86e:	4428      	add	r0, r5
 800a870:	2808      	cmp	r0, #8
 800a872:	dc16      	bgt.n	800a8a2 <_strtod_l+0x252>
 800a874:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a876:	230a      	movs	r3, #10
 800a878:	fb03 2300 	mla	r3, r3, r0, r2
 800a87c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a87e:	2300      	movs	r3, #0
 800a880:	e018      	b.n	800a8b4 <_strtod_l+0x264>
 800a882:	4638      	mov	r0, r7
 800a884:	e7da      	b.n	800a83c <_strtod_l+0x1ec>
 800a886:	2b08      	cmp	r3, #8
 800a888:	f103 0301 	add.w	r3, r3, #1
 800a88c:	dc03      	bgt.n	800a896 <_strtod_l+0x246>
 800a88e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a890:	434e      	muls	r6, r1
 800a892:	960a      	str	r6, [sp, #40]	@ 0x28
 800a894:	e7e7      	b.n	800a866 <_strtod_l+0x216>
 800a896:	2b10      	cmp	r3, #16
 800a898:	bfde      	ittt	le
 800a89a:	9e08      	ldrle	r6, [sp, #32]
 800a89c:	434e      	mulle	r6, r1
 800a89e:	9608      	strle	r6, [sp, #32]
 800a8a0:	e7e1      	b.n	800a866 <_strtod_l+0x216>
 800a8a2:	280f      	cmp	r0, #15
 800a8a4:	dceb      	bgt.n	800a87e <_strtod_l+0x22e>
 800a8a6:	9808      	ldr	r0, [sp, #32]
 800a8a8:	230a      	movs	r3, #10
 800a8aa:	fb03 2300 	mla	r3, r3, r0, r2
 800a8ae:	9308      	str	r3, [sp, #32]
 800a8b0:	e7e5      	b.n	800a87e <_strtod_l+0x22e>
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8b6:	1c50      	adds	r0, r2, #1
 800a8b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8ba:	7852      	ldrb	r2, [r2, #1]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	460d      	mov	r5, r1
 800a8c0:	e7b1      	b.n	800a826 <_strtod_l+0x1d6>
 800a8c2:	f04f 0900 	mov.w	r9, #0
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e77d      	b.n	800a7c6 <_strtod_l+0x176>
 800a8ca:	f04f 0c00 	mov.w	ip, #0
 800a8ce:	1ca2      	adds	r2, r4, #2
 800a8d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8d2:	78a2      	ldrb	r2, [r4, #2]
 800a8d4:	e785      	b.n	800a7e2 <_strtod_l+0x192>
 800a8d6:	f04f 0c01 	mov.w	ip, #1
 800a8da:	e7f8      	b.n	800a8ce <_strtod_l+0x27e>
 800a8dc:	0800d670 	.word	0x0800d670
 800a8e0:	0800d658 	.word	0x0800d658
 800a8e4:	7ff00000 	.word	0x7ff00000
 800a8e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ea:	1c51      	adds	r1, r2, #1
 800a8ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8ee:	7852      	ldrb	r2, [r2, #1]
 800a8f0:	2a30      	cmp	r2, #48	@ 0x30
 800a8f2:	d0f9      	beq.n	800a8e8 <_strtod_l+0x298>
 800a8f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a8f8:	2908      	cmp	r1, #8
 800a8fa:	f63f af78 	bhi.w	800a7ee <_strtod_l+0x19e>
 800a8fe:	3a30      	subs	r2, #48	@ 0x30
 800a900:	920e      	str	r2, [sp, #56]	@ 0x38
 800a902:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a904:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a906:	f04f 080a 	mov.w	r8, #10
 800a90a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a90c:	1c56      	adds	r6, r2, #1
 800a90e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a910:	7852      	ldrb	r2, [r2, #1]
 800a912:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a916:	f1be 0f09 	cmp.w	lr, #9
 800a91a:	d939      	bls.n	800a990 <_strtod_l+0x340>
 800a91c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a91e:	1a76      	subs	r6, r6, r1
 800a920:	2e08      	cmp	r6, #8
 800a922:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a926:	dc03      	bgt.n	800a930 <_strtod_l+0x2e0>
 800a928:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a92a:	4588      	cmp	r8, r1
 800a92c:	bfa8      	it	ge
 800a92e:	4688      	movge	r8, r1
 800a930:	f1bc 0f00 	cmp.w	ip, #0
 800a934:	d001      	beq.n	800a93a <_strtod_l+0x2ea>
 800a936:	f1c8 0800 	rsb	r8, r8, #0
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	d14e      	bne.n	800a9dc <_strtod_l+0x38c>
 800a93e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a940:	4308      	orrs	r0, r1
 800a942:	f47f aebe 	bne.w	800a6c2 <_strtod_l+0x72>
 800a946:	2b00      	cmp	r3, #0
 800a948:	f47f aed6 	bne.w	800a6f8 <_strtod_l+0xa8>
 800a94c:	2a69      	cmp	r2, #105	@ 0x69
 800a94e:	d028      	beq.n	800a9a2 <_strtod_l+0x352>
 800a950:	dc25      	bgt.n	800a99e <_strtod_l+0x34e>
 800a952:	2a49      	cmp	r2, #73	@ 0x49
 800a954:	d025      	beq.n	800a9a2 <_strtod_l+0x352>
 800a956:	2a4e      	cmp	r2, #78	@ 0x4e
 800a958:	f47f aece 	bne.w	800a6f8 <_strtod_l+0xa8>
 800a95c:	499b      	ldr	r1, [pc, #620]	@ (800abcc <_strtod_l+0x57c>)
 800a95e:	a819      	add	r0, sp, #100	@ 0x64
 800a960:	f001 fbb6 	bl	800c0d0 <__match>
 800a964:	2800      	cmp	r0, #0
 800a966:	f43f aec7 	beq.w	800a6f8 <_strtod_l+0xa8>
 800a96a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b28      	cmp	r3, #40	@ 0x28
 800a970:	d12e      	bne.n	800a9d0 <_strtod_l+0x380>
 800a972:	4997      	ldr	r1, [pc, #604]	@ (800abd0 <_strtod_l+0x580>)
 800a974:	aa1c      	add	r2, sp, #112	@ 0x70
 800a976:	a819      	add	r0, sp, #100	@ 0x64
 800a978:	f001 fbbe 	bl	800c0f8 <__hexnan>
 800a97c:	2805      	cmp	r0, #5
 800a97e:	d127      	bne.n	800a9d0 <_strtod_l+0x380>
 800a980:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a982:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a986:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a98a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a98e:	e698      	b.n	800a6c2 <_strtod_l+0x72>
 800a990:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a992:	fb08 2101 	mla	r1, r8, r1, r2
 800a996:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a99a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a99c:	e7b5      	b.n	800a90a <_strtod_l+0x2ba>
 800a99e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9a0:	e7da      	b.n	800a958 <_strtod_l+0x308>
 800a9a2:	498c      	ldr	r1, [pc, #560]	@ (800abd4 <_strtod_l+0x584>)
 800a9a4:	a819      	add	r0, sp, #100	@ 0x64
 800a9a6:	f001 fb93 	bl	800c0d0 <__match>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f43f aea4 	beq.w	800a6f8 <_strtod_l+0xa8>
 800a9b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9b2:	4989      	ldr	r1, [pc, #548]	@ (800abd8 <_strtod_l+0x588>)
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	a819      	add	r0, sp, #100	@ 0x64
 800a9b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9ba:	f001 fb89 	bl	800c0d0 <__match>
 800a9be:	b910      	cbnz	r0, 800a9c6 <_strtod_l+0x376>
 800a9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800abe8 <_strtod_l+0x598>
 800a9ca:	f04f 0a00 	mov.w	sl, #0
 800a9ce:	e678      	b.n	800a6c2 <_strtod_l+0x72>
 800a9d0:	4882      	ldr	r0, [pc, #520]	@ (800abdc <_strtod_l+0x58c>)
 800a9d2:	f001 f8b9 	bl	800bb48 <nan>
 800a9d6:	ec5b ab10 	vmov	sl, fp, d0
 800a9da:	e672      	b.n	800a6c2 <_strtod_l+0x72>
 800a9dc:	eba8 0309 	sub.w	r3, r8, r9
 800a9e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e4:	2f00      	cmp	r7, #0
 800a9e6:	bf08      	it	eq
 800a9e8:	462f      	moveq	r7, r5
 800a9ea:	2d10      	cmp	r5, #16
 800a9ec:	462c      	mov	r4, r5
 800a9ee:	bfa8      	it	ge
 800a9f0:	2410      	movge	r4, #16
 800a9f2:	f7f5 fda7 	bl	8000544 <__aeabi_ui2d>
 800a9f6:	2d09      	cmp	r5, #9
 800a9f8:	4682      	mov	sl, r0
 800a9fa:	468b      	mov	fp, r1
 800a9fc:	dc13      	bgt.n	800aa26 <_strtod_l+0x3d6>
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f43f ae5e 	beq.w	800a6c2 <_strtod_l+0x72>
 800aa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa08:	dd78      	ble.n	800aafc <_strtod_l+0x4ac>
 800aa0a:	2b16      	cmp	r3, #22
 800aa0c:	dc5f      	bgt.n	800aace <_strtod_l+0x47e>
 800aa0e:	4974      	ldr	r1, [pc, #464]	@ (800abe0 <_strtod_l+0x590>)
 800aa10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa18:	4652      	mov	r2, sl
 800aa1a:	465b      	mov	r3, fp
 800aa1c:	f7f5 fe0c 	bl	8000638 <__aeabi_dmul>
 800aa20:	4682      	mov	sl, r0
 800aa22:	468b      	mov	fp, r1
 800aa24:	e64d      	b.n	800a6c2 <_strtod_l+0x72>
 800aa26:	4b6e      	ldr	r3, [pc, #440]	@ (800abe0 <_strtod_l+0x590>)
 800aa28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa30:	f7f5 fe02 	bl	8000638 <__aeabi_dmul>
 800aa34:	4682      	mov	sl, r0
 800aa36:	9808      	ldr	r0, [sp, #32]
 800aa38:	468b      	mov	fp, r1
 800aa3a:	f7f5 fd83 	bl	8000544 <__aeabi_ui2d>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	f7f5 fc41 	bl	80002cc <__adddf3>
 800aa4a:	2d0f      	cmp	r5, #15
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	468b      	mov	fp, r1
 800aa50:	ddd5      	ble.n	800a9fe <_strtod_l+0x3ae>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	1b2c      	subs	r4, r5, r4
 800aa56:	441c      	add	r4, r3
 800aa58:	2c00      	cmp	r4, #0
 800aa5a:	f340 8096 	ble.w	800ab8a <_strtod_l+0x53a>
 800aa5e:	f014 030f 	ands.w	r3, r4, #15
 800aa62:	d00a      	beq.n	800aa7a <_strtod_l+0x42a>
 800aa64:	495e      	ldr	r1, [pc, #376]	@ (800abe0 <_strtod_l+0x590>)
 800aa66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa6a:	4652      	mov	r2, sl
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa72:	f7f5 fde1 	bl	8000638 <__aeabi_dmul>
 800aa76:	4682      	mov	sl, r0
 800aa78:	468b      	mov	fp, r1
 800aa7a:	f034 040f 	bics.w	r4, r4, #15
 800aa7e:	d073      	beq.n	800ab68 <_strtod_l+0x518>
 800aa80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa84:	dd48      	ble.n	800ab18 <_strtod_l+0x4c8>
 800aa86:	2400      	movs	r4, #0
 800aa88:	46a0      	mov	r8, r4
 800aa8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa8c:	46a1      	mov	r9, r4
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800abe8 <_strtod_l+0x598>
 800aa94:	2322      	movs	r3, #34	@ 0x22
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	f04f 0a00 	mov.w	sl, #0
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f43f ae0f 	beq.w	800a6c2 <_strtod_l+0x72>
 800aaa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	f7ff f942 	bl	8009d30 <_Bfree>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7ff f93e 	bl	8009d30 <_Bfree>
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	4641      	mov	r1, r8
 800aab8:	f7ff f93a 	bl	8009d30 <_Bfree>
 800aabc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aabe:	9805      	ldr	r0, [sp, #20]
 800aac0:	f7ff f936 	bl	8009d30 <_Bfree>
 800aac4:	9805      	ldr	r0, [sp, #20]
 800aac6:	4621      	mov	r1, r4
 800aac8:	f7ff f932 	bl	8009d30 <_Bfree>
 800aacc:	e5f9      	b.n	800a6c2 <_strtod_l+0x72>
 800aace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aad4:	4293      	cmp	r3, r2
 800aad6:	dbbc      	blt.n	800aa52 <_strtod_l+0x402>
 800aad8:	4c41      	ldr	r4, [pc, #260]	@ (800abe0 <_strtod_l+0x590>)
 800aada:	f1c5 050f 	rsb	r5, r5, #15
 800aade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aae2:	4652      	mov	r2, sl
 800aae4:	465b      	mov	r3, fp
 800aae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaea:	f7f5 fda5 	bl	8000638 <__aeabi_dmul>
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	1b5d      	subs	r5, r3, r5
 800aaf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aaf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aafa:	e78f      	b.n	800aa1c <_strtod_l+0x3cc>
 800aafc:	3316      	adds	r3, #22
 800aafe:	dba8      	blt.n	800aa52 <_strtod_l+0x402>
 800ab00:	4b37      	ldr	r3, [pc, #220]	@ (800abe0 <_strtod_l+0x590>)
 800ab02:	eba9 0808 	sub.w	r8, r9, r8
 800ab06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 febb 	bl	800088c <__aeabi_ddiv>
 800ab16:	e783      	b.n	800aa20 <_strtod_l+0x3d0>
 800ab18:	4b32      	ldr	r3, [pc, #200]	@ (800abe4 <_strtod_l+0x594>)
 800ab1a:	9308      	str	r3, [sp, #32]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	1124      	asrs	r4, r4, #4
 800ab20:	4650      	mov	r0, sl
 800ab22:	4659      	mov	r1, fp
 800ab24:	461e      	mov	r6, r3
 800ab26:	2c01      	cmp	r4, #1
 800ab28:	dc21      	bgt.n	800ab6e <_strtod_l+0x51e>
 800ab2a:	b10b      	cbz	r3, 800ab30 <_strtod_l+0x4e0>
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	492c      	ldr	r1, [pc, #176]	@ (800abe4 <_strtod_l+0x594>)
 800ab32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab42:	f7f5 fd79 	bl	8000638 <__aeabi_dmul>
 800ab46:	4b28      	ldr	r3, [pc, #160]	@ (800abe8 <_strtod_l+0x598>)
 800ab48:	460a      	mov	r2, r1
 800ab4a:	400b      	ands	r3, r1
 800ab4c:	4927      	ldr	r1, [pc, #156]	@ (800abec <_strtod_l+0x59c>)
 800ab4e:	428b      	cmp	r3, r1
 800ab50:	4682      	mov	sl, r0
 800ab52:	d898      	bhi.n	800aa86 <_strtod_l+0x436>
 800ab54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf86      	itte	hi
 800ab5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800abf0 <_strtod_l+0x5a0>
 800ab60:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9308      	str	r3, [sp, #32]
 800ab6c:	e07a      	b.n	800ac64 <_strtod_l+0x614>
 800ab6e:	07e2      	lsls	r2, r4, #31
 800ab70:	d505      	bpl.n	800ab7e <_strtod_l+0x52e>
 800ab72:	9b08      	ldr	r3, [sp, #32]
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fd5e 	bl	8000638 <__aeabi_dmul>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	9a08      	ldr	r2, [sp, #32]
 800ab80:	3208      	adds	r2, #8
 800ab82:	3601      	adds	r6, #1
 800ab84:	1064      	asrs	r4, r4, #1
 800ab86:	9208      	str	r2, [sp, #32]
 800ab88:	e7cd      	b.n	800ab26 <_strtod_l+0x4d6>
 800ab8a:	d0ed      	beq.n	800ab68 <_strtod_l+0x518>
 800ab8c:	4264      	negs	r4, r4
 800ab8e:	f014 020f 	ands.w	r2, r4, #15
 800ab92:	d00a      	beq.n	800abaa <_strtod_l+0x55a>
 800ab94:	4b12      	ldr	r3, [pc, #72]	@ (800abe0 <_strtod_l+0x590>)
 800ab96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fe73 	bl	800088c <__aeabi_ddiv>
 800aba6:	4682      	mov	sl, r0
 800aba8:	468b      	mov	fp, r1
 800abaa:	1124      	asrs	r4, r4, #4
 800abac:	d0dc      	beq.n	800ab68 <_strtod_l+0x518>
 800abae:	2c1f      	cmp	r4, #31
 800abb0:	dd20      	ble.n	800abf4 <_strtod_l+0x5a4>
 800abb2:	2400      	movs	r4, #0
 800abb4:	46a0      	mov	r8, r4
 800abb6:	940a      	str	r4, [sp, #40]	@ 0x28
 800abb8:	46a1      	mov	r9, r4
 800abba:	9a05      	ldr	r2, [sp, #20]
 800abbc:	2322      	movs	r3, #34	@ 0x22
 800abbe:	f04f 0a00 	mov.w	sl, #0
 800abc2:	f04f 0b00 	mov.w	fp, #0
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	e768      	b.n	800aa9c <_strtod_l+0x44c>
 800abca:	bf00      	nop
 800abcc:	0800d449 	.word	0x0800d449
 800abd0:	0800d65c 	.word	0x0800d65c
 800abd4:	0800d441 	.word	0x0800d441
 800abd8:	0800d478 	.word	0x0800d478
 800abdc:	0800d805 	.word	0x0800d805
 800abe0:	0800d590 	.word	0x0800d590
 800abe4:	0800d568 	.word	0x0800d568
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	7ca00000 	.word	0x7ca00000
 800abf0:	7fefffff 	.word	0x7fefffff
 800abf4:	f014 0310 	ands.w	r3, r4, #16
 800abf8:	bf18      	it	ne
 800abfa:	236a      	movne	r3, #106	@ 0x6a
 800abfc:	4ea9      	ldr	r6, [pc, #676]	@ (800aea4 <_strtod_l+0x854>)
 800abfe:	9308      	str	r3, [sp, #32]
 800ac00:	4650      	mov	r0, sl
 800ac02:	4659      	mov	r1, fp
 800ac04:	2300      	movs	r3, #0
 800ac06:	07e2      	lsls	r2, r4, #31
 800ac08:	d504      	bpl.n	800ac14 <_strtod_l+0x5c4>
 800ac0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac0e:	f7f5 fd13 	bl	8000638 <__aeabi_dmul>
 800ac12:	2301      	movs	r3, #1
 800ac14:	1064      	asrs	r4, r4, #1
 800ac16:	f106 0608 	add.w	r6, r6, #8
 800ac1a:	d1f4      	bne.n	800ac06 <_strtod_l+0x5b6>
 800ac1c:	b10b      	cbz	r3, 800ac22 <_strtod_l+0x5d2>
 800ac1e:	4682      	mov	sl, r0
 800ac20:	468b      	mov	fp, r1
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	b1b3      	cbz	r3, 800ac54 <_strtod_l+0x604>
 800ac26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	4659      	mov	r1, fp
 800ac32:	dd0f      	ble.n	800ac54 <_strtod_l+0x604>
 800ac34:	2b1f      	cmp	r3, #31
 800ac36:	dd55      	ble.n	800ace4 <_strtod_l+0x694>
 800ac38:	2b34      	cmp	r3, #52	@ 0x34
 800ac3a:	bfde      	ittt	le
 800ac3c:	f04f 33ff 	movle.w	r3, #4294967295
 800ac40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac44:	4093      	lslle	r3, r2
 800ac46:	f04f 0a00 	mov.w	sl, #0
 800ac4a:	bfcc      	ite	gt
 800ac4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac50:	ea03 0b01 	andle.w	fp, r3, r1
 800ac54:	2200      	movs	r2, #0
 800ac56:	2300      	movs	r3, #0
 800ac58:	4650      	mov	r0, sl
 800ac5a:	4659      	mov	r1, fp
 800ac5c:	f7f5 ff54 	bl	8000b08 <__aeabi_dcmpeq>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1a6      	bne.n	800abb2 <_strtod_l+0x562>
 800ac64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac6a:	9805      	ldr	r0, [sp, #20]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	463a      	mov	r2, r7
 800ac70:	f7ff f8c6 	bl	8009e00 <__s2b>
 800ac74:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f af05 	beq.w	800aa86 <_strtod_l+0x436>
 800ac7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	eba9 0308 	sub.w	r3, r9, r8
 800ac84:	bfa8      	it	ge
 800ac86:	2300      	movge	r3, #0
 800ac88:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac8a:	2400      	movs	r4, #0
 800ac8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac90:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac92:	46a0      	mov	r8, r4
 800ac94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	6859      	ldr	r1, [r3, #4]
 800ac9a:	f7ff f809 	bl	8009cb0 <_Balloc>
 800ac9e:	4681      	mov	r9, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f43f aef4 	beq.w	800aa8e <_strtod_l+0x43e>
 800aca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca8:	691a      	ldr	r2, [r3, #16]
 800acaa:	3202      	adds	r2, #2
 800acac:	f103 010c 	add.w	r1, r3, #12
 800acb0:	0092      	lsls	r2, r2, #2
 800acb2:	300c      	adds	r0, #12
 800acb4:	f7fe f89b 	bl	8008dee <memcpy>
 800acb8:	ec4b ab10 	vmov	d0, sl, fp
 800acbc:	9805      	ldr	r0, [sp, #20]
 800acbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800acc0:	a91b      	add	r1, sp, #108	@ 0x6c
 800acc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acc6:	f7ff fbd7 	bl	800a478 <__d2b>
 800acca:	901a      	str	r0, [sp, #104]	@ 0x68
 800accc:	2800      	cmp	r0, #0
 800acce:	f43f aede 	beq.w	800aa8e <_strtod_l+0x43e>
 800acd2:	9805      	ldr	r0, [sp, #20]
 800acd4:	2101      	movs	r1, #1
 800acd6:	f7ff f929 	bl	8009f2c <__i2b>
 800acda:	4680      	mov	r8, r0
 800acdc:	b948      	cbnz	r0, 800acf2 <_strtod_l+0x6a2>
 800acde:	f04f 0800 	mov.w	r8, #0
 800ace2:	e6d4      	b.n	800aa8e <_strtod_l+0x43e>
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	ea03 0a0a 	and.w	sl, r3, sl
 800acf0:	e7b0      	b.n	800ac54 <_strtod_l+0x604>
 800acf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800acf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	bfab      	itete	ge
 800acfa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800acfc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800acfe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad02:	bfac      	ite	ge
 800ad04:	18ef      	addge	r7, r5, r3
 800ad06:	1b5e      	sublt	r6, r3, r5
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	1aed      	subs	r5, r5, r3
 800ad0c:	4415      	add	r5, r2
 800ad0e:	4b66      	ldr	r3, [pc, #408]	@ (800aea8 <_strtod_l+0x858>)
 800ad10:	3d01      	subs	r5, #1
 800ad12:	429d      	cmp	r5, r3
 800ad14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad18:	da50      	bge.n	800adbc <_strtod_l+0x76c>
 800ad1a:	1b5b      	subs	r3, r3, r5
 800ad1c:	2b1f      	cmp	r3, #31
 800ad1e:	eba2 0203 	sub.w	r2, r2, r3
 800ad22:	f04f 0101 	mov.w	r1, #1
 800ad26:	dc3d      	bgt.n	800ada4 <_strtod_l+0x754>
 800ad28:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad32:	18bd      	adds	r5, r7, r2
 800ad34:	9b08      	ldr	r3, [sp, #32]
 800ad36:	42af      	cmp	r7, r5
 800ad38:	4416      	add	r6, r2
 800ad3a:	441e      	add	r6, r3
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	bfa8      	it	ge
 800ad40:	462b      	movge	r3, r5
 800ad42:	42b3      	cmp	r3, r6
 800ad44:	bfa8      	it	ge
 800ad46:	4633      	movge	r3, r6
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bfc2      	ittt	gt
 800ad4c:	1aed      	subgt	r5, r5, r3
 800ad4e:	1af6      	subgt	r6, r6, r3
 800ad50:	1aff      	subgt	r7, r7, r3
 800ad52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd16      	ble.n	800ad86 <_strtod_l+0x736>
 800ad58:	4641      	mov	r1, r8
 800ad5a:	9805      	ldr	r0, [sp, #20]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f7ff f9a5 	bl	800a0ac <__pow5mult>
 800ad62:	4680      	mov	r8, r0
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d0ba      	beq.n	800acde <_strtod_l+0x68e>
 800ad68:	4601      	mov	r1, r0
 800ad6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad6c:	9805      	ldr	r0, [sp, #20]
 800ad6e:	f7ff f8f3 	bl	8009f58 <__multiply>
 800ad72:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f43f ae8a 	beq.w	800aa8e <_strtod_l+0x43e>
 800ad7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad7c:	9805      	ldr	r0, [sp, #20]
 800ad7e:	f7fe ffd7 	bl	8009d30 <_Bfree>
 800ad82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad84:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad86:	2d00      	cmp	r5, #0
 800ad88:	dc1d      	bgt.n	800adc6 <_strtod_l+0x776>
 800ad8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd23      	ble.n	800add8 <_strtod_l+0x788>
 800ad90:	4649      	mov	r1, r9
 800ad92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad94:	9805      	ldr	r0, [sp, #20]
 800ad96:	f7ff f989 	bl	800a0ac <__pow5mult>
 800ad9a:	4681      	mov	r9, r0
 800ad9c:	b9e0      	cbnz	r0, 800add8 <_strtod_l+0x788>
 800ad9e:	f04f 0900 	mov.w	r9, #0
 800ada2:	e674      	b.n	800aa8e <_strtod_l+0x43e>
 800ada4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ada8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800adac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800adb0:	35e2      	adds	r5, #226	@ 0xe2
 800adb2:	fa01 f305 	lsl.w	r3, r1, r5
 800adb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800adb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adba:	e7ba      	b.n	800ad32 <_strtod_l+0x6e2>
 800adbc:	2300      	movs	r3, #0
 800adbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800adc0:	2301      	movs	r3, #1
 800adc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adc4:	e7b5      	b.n	800ad32 <_strtod_l+0x6e2>
 800adc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adc8:	9805      	ldr	r0, [sp, #20]
 800adca:	462a      	mov	r2, r5
 800adcc:	f7ff f9c8 	bl	800a160 <__lshift>
 800add0:	901a      	str	r0, [sp, #104]	@ 0x68
 800add2:	2800      	cmp	r0, #0
 800add4:	d1d9      	bne.n	800ad8a <_strtod_l+0x73a>
 800add6:	e65a      	b.n	800aa8e <_strtod_l+0x43e>
 800add8:	2e00      	cmp	r6, #0
 800adda:	dd07      	ble.n	800adec <_strtod_l+0x79c>
 800addc:	4649      	mov	r1, r9
 800adde:	9805      	ldr	r0, [sp, #20]
 800ade0:	4632      	mov	r2, r6
 800ade2:	f7ff f9bd 	bl	800a160 <__lshift>
 800ade6:	4681      	mov	r9, r0
 800ade8:	2800      	cmp	r0, #0
 800adea:	d0d8      	beq.n	800ad9e <_strtod_l+0x74e>
 800adec:	2f00      	cmp	r7, #0
 800adee:	dd08      	ble.n	800ae02 <_strtod_l+0x7b2>
 800adf0:	4641      	mov	r1, r8
 800adf2:	9805      	ldr	r0, [sp, #20]
 800adf4:	463a      	mov	r2, r7
 800adf6:	f7ff f9b3 	bl	800a160 <__lshift>
 800adfa:	4680      	mov	r8, r0
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f43f ae46 	beq.w	800aa8e <_strtod_l+0x43e>
 800ae02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae04:	9805      	ldr	r0, [sp, #20]
 800ae06:	464a      	mov	r2, r9
 800ae08:	f7ff fa32 	bl	800a270 <__mdiff>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f ae3d 	beq.w	800aa8e <_strtod_l+0x43e>
 800ae14:	68c3      	ldr	r3, [r0, #12]
 800ae16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60c3      	str	r3, [r0, #12]
 800ae1c:	4641      	mov	r1, r8
 800ae1e:	f7ff fa0b 	bl	800a238 <__mcmp>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	da46      	bge.n	800aeb4 <_strtod_l+0x864>
 800ae26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae28:	ea53 030a 	orrs.w	r3, r3, sl
 800ae2c:	d16c      	bne.n	800af08 <_strtod_l+0x8b8>
 800ae2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d168      	bne.n	800af08 <_strtod_l+0x8b8>
 800ae36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae3a:	0d1b      	lsrs	r3, r3, #20
 800ae3c:	051b      	lsls	r3, r3, #20
 800ae3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae42:	d961      	bls.n	800af08 <_strtod_l+0x8b8>
 800ae44:	6963      	ldr	r3, [r4, #20]
 800ae46:	b913      	cbnz	r3, 800ae4e <_strtod_l+0x7fe>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	dd5c      	ble.n	800af08 <_strtod_l+0x8b8>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	2201      	movs	r2, #1
 800ae52:	9805      	ldr	r0, [sp, #20]
 800ae54:	f7ff f984 	bl	800a160 <__lshift>
 800ae58:	4641      	mov	r1, r8
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff f9ec 	bl	800a238 <__mcmp>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	dd51      	ble.n	800af08 <_strtod_l+0x8b8>
 800ae64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae68:	9a08      	ldr	r2, [sp, #32]
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	051b      	lsls	r3, r3, #20
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	d06b      	beq.n	800af4a <_strtod_l+0x8fa>
 800ae72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae76:	d868      	bhi.n	800af4a <_strtod_l+0x8fa>
 800ae78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae7c:	f67f ae9d 	bls.w	800abba <_strtod_l+0x56a>
 800ae80:	4b0a      	ldr	r3, [pc, #40]	@ (800aeac <_strtod_l+0x85c>)
 800ae82:	4650      	mov	r0, sl
 800ae84:	4659      	mov	r1, fp
 800ae86:	2200      	movs	r2, #0
 800ae88:	f7f5 fbd6 	bl	8000638 <__aeabi_dmul>
 800ae8c:	4b08      	ldr	r3, [pc, #32]	@ (800aeb0 <_strtod_l+0x860>)
 800ae8e:	400b      	ands	r3, r1
 800ae90:	4682      	mov	sl, r0
 800ae92:	468b      	mov	fp, r1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f47f ae05 	bne.w	800aaa4 <_strtod_l+0x454>
 800ae9a:	9a05      	ldr	r2, [sp, #20]
 800ae9c:	2322      	movs	r3, #34	@ 0x22
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	e600      	b.n	800aaa4 <_strtod_l+0x454>
 800aea2:	bf00      	nop
 800aea4:	0800d688 	.word	0x0800d688
 800aea8:	fffffc02 	.word	0xfffffc02
 800aeac:	39500000 	.word	0x39500000
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aeb8:	d165      	bne.n	800af86 <_strtod_l+0x936>
 800aeba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aec0:	b35a      	cbz	r2, 800af1a <_strtod_l+0x8ca>
 800aec2:	4a9f      	ldr	r2, [pc, #636]	@ (800b140 <_strtod_l+0xaf0>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d12b      	bne.n	800af20 <_strtod_l+0x8d0>
 800aec8:	9b08      	ldr	r3, [sp, #32]
 800aeca:	4651      	mov	r1, sl
 800aecc:	b303      	cbz	r3, 800af10 <_strtod_l+0x8c0>
 800aece:	4b9d      	ldr	r3, [pc, #628]	@ (800b144 <_strtod_l+0xaf4>)
 800aed0:	465a      	mov	r2, fp
 800aed2:	4013      	ands	r3, r2
 800aed4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aed8:	f04f 32ff 	mov.w	r2, #4294967295
 800aedc:	d81b      	bhi.n	800af16 <_strtod_l+0x8c6>
 800aede:	0d1b      	lsrs	r3, r3, #20
 800aee0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	4299      	cmp	r1, r3
 800aeea:	d119      	bne.n	800af20 <_strtod_l+0x8d0>
 800aeec:	4b96      	ldr	r3, [pc, #600]	@ (800b148 <_strtod_l+0xaf8>)
 800aeee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d102      	bne.n	800aefa <_strtod_l+0x8aa>
 800aef4:	3101      	adds	r1, #1
 800aef6:	f43f adca 	beq.w	800aa8e <_strtod_l+0x43e>
 800aefa:	4b92      	ldr	r3, [pc, #584]	@ (800b144 <_strtod_l+0xaf4>)
 800aefc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aefe:	401a      	ands	r2, r3
 800af00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af04:	f04f 0a00 	mov.w	sl, #0
 800af08:	9b08      	ldr	r3, [sp, #32]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1b8      	bne.n	800ae80 <_strtod_l+0x830>
 800af0e:	e5c9      	b.n	800aaa4 <_strtod_l+0x454>
 800af10:	f04f 33ff 	mov.w	r3, #4294967295
 800af14:	e7e8      	b.n	800aee8 <_strtod_l+0x898>
 800af16:	4613      	mov	r3, r2
 800af18:	e7e6      	b.n	800aee8 <_strtod_l+0x898>
 800af1a:	ea53 030a 	orrs.w	r3, r3, sl
 800af1e:	d0a1      	beq.n	800ae64 <_strtod_l+0x814>
 800af20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af22:	b1db      	cbz	r3, 800af5c <_strtod_l+0x90c>
 800af24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af26:	4213      	tst	r3, r2
 800af28:	d0ee      	beq.n	800af08 <_strtod_l+0x8b8>
 800af2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2c:	9a08      	ldr	r2, [sp, #32]
 800af2e:	4650      	mov	r0, sl
 800af30:	4659      	mov	r1, fp
 800af32:	b1bb      	cbz	r3, 800af64 <_strtod_l+0x914>
 800af34:	f7ff fb6e 	bl	800a614 <sulp>
 800af38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af3c:	ec53 2b10 	vmov	r2, r3, d0
 800af40:	f7f5 f9c4 	bl	80002cc <__adddf3>
 800af44:	4682      	mov	sl, r0
 800af46:	468b      	mov	fp, r1
 800af48:	e7de      	b.n	800af08 <_strtod_l+0x8b8>
 800af4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af56:	f04f 3aff 	mov.w	sl, #4294967295
 800af5a:	e7d5      	b.n	800af08 <_strtod_l+0x8b8>
 800af5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af5e:	ea13 0f0a 	tst.w	r3, sl
 800af62:	e7e1      	b.n	800af28 <_strtod_l+0x8d8>
 800af64:	f7ff fb56 	bl	800a614 <sulp>
 800af68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af6c:	ec53 2b10 	vmov	r2, r3, d0
 800af70:	f7f5 f9aa 	bl	80002c8 <__aeabi_dsub>
 800af74:	2200      	movs	r2, #0
 800af76:	2300      	movs	r3, #0
 800af78:	4682      	mov	sl, r0
 800af7a:	468b      	mov	fp, r1
 800af7c:	f7f5 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 800af80:	2800      	cmp	r0, #0
 800af82:	d0c1      	beq.n	800af08 <_strtod_l+0x8b8>
 800af84:	e619      	b.n	800abba <_strtod_l+0x56a>
 800af86:	4641      	mov	r1, r8
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff facd 	bl	800a528 <__ratio>
 800af8e:	ec57 6b10 	vmov	r6, r7, d0
 800af92:	2200      	movs	r2, #0
 800af94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fdc8 	bl	8000b30 <__aeabi_dcmple>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d06f      	beq.n	800b084 <_strtod_l+0xa34>
 800afa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d17a      	bne.n	800b0a0 <_strtod_l+0xa50>
 800afaa:	f1ba 0f00 	cmp.w	sl, #0
 800afae:	d158      	bne.n	800b062 <_strtod_l+0xa12>
 800afb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d15a      	bne.n	800b070 <_strtod_l+0xa20>
 800afba:	4b64      	ldr	r3, [pc, #400]	@ (800b14c <_strtod_l+0xafc>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	4630      	mov	r0, r6
 800afc0:	4639      	mov	r1, r7
 800afc2:	f7f5 fdab 	bl	8000b1c <__aeabi_dcmplt>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d159      	bne.n	800b07e <_strtod_l+0xa2e>
 800afca:	4630      	mov	r0, r6
 800afcc:	4639      	mov	r1, r7
 800afce:	4b60      	ldr	r3, [pc, #384]	@ (800b150 <_strtod_l+0xb00>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	f7f5 fb31 	bl	8000638 <__aeabi_dmul>
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800afde:	9606      	str	r6, [sp, #24]
 800afe0:	9307      	str	r3, [sp, #28]
 800afe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afe6:	4d57      	ldr	r5, [pc, #348]	@ (800b144 <_strtod_l+0xaf4>)
 800afe8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afee:	401d      	ands	r5, r3
 800aff0:	4b58      	ldr	r3, [pc, #352]	@ (800b154 <_strtod_l+0xb04>)
 800aff2:	429d      	cmp	r5, r3
 800aff4:	f040 80b2 	bne.w	800b15c <_strtod_l+0xb0c>
 800aff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800affa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800affe:	ec4b ab10 	vmov	d0, sl, fp
 800b002:	f7ff f9c9 	bl	800a398 <__ulp>
 800b006:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b00a:	ec51 0b10 	vmov	r0, r1, d0
 800b00e:	f7f5 fb13 	bl	8000638 <__aeabi_dmul>
 800b012:	4652      	mov	r2, sl
 800b014:	465b      	mov	r3, fp
 800b016:	f7f5 f959 	bl	80002cc <__adddf3>
 800b01a:	460b      	mov	r3, r1
 800b01c:	4949      	ldr	r1, [pc, #292]	@ (800b144 <_strtod_l+0xaf4>)
 800b01e:	4a4e      	ldr	r2, [pc, #312]	@ (800b158 <_strtod_l+0xb08>)
 800b020:	4019      	ands	r1, r3
 800b022:	4291      	cmp	r1, r2
 800b024:	4682      	mov	sl, r0
 800b026:	d942      	bls.n	800b0ae <_strtod_l+0xa5e>
 800b028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b02a:	4b47      	ldr	r3, [pc, #284]	@ (800b148 <_strtod_l+0xaf8>)
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d103      	bne.n	800b038 <_strtod_l+0x9e8>
 800b030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b032:	3301      	adds	r3, #1
 800b034:	f43f ad2b 	beq.w	800aa8e <_strtod_l+0x43e>
 800b038:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b148 <_strtod_l+0xaf8>
 800b03c:	f04f 3aff 	mov.w	sl, #4294967295
 800b040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b042:	9805      	ldr	r0, [sp, #20]
 800b044:	f7fe fe74 	bl	8009d30 <_Bfree>
 800b048:	9805      	ldr	r0, [sp, #20]
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7fe fe70 	bl	8009d30 <_Bfree>
 800b050:	9805      	ldr	r0, [sp, #20]
 800b052:	4641      	mov	r1, r8
 800b054:	f7fe fe6c 	bl	8009d30 <_Bfree>
 800b058:	9805      	ldr	r0, [sp, #20]
 800b05a:	4621      	mov	r1, r4
 800b05c:	f7fe fe68 	bl	8009d30 <_Bfree>
 800b060:	e618      	b.n	800ac94 <_strtod_l+0x644>
 800b062:	f1ba 0f01 	cmp.w	sl, #1
 800b066:	d103      	bne.n	800b070 <_strtod_l+0xa20>
 800b068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f43f ada5 	beq.w	800abba <_strtod_l+0x56a>
 800b070:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b120 <_strtod_l+0xad0>
 800b074:	4f35      	ldr	r7, [pc, #212]	@ (800b14c <_strtod_l+0xafc>)
 800b076:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b07a:	2600      	movs	r6, #0
 800b07c:	e7b1      	b.n	800afe2 <_strtod_l+0x992>
 800b07e:	4f34      	ldr	r7, [pc, #208]	@ (800b150 <_strtod_l+0xb00>)
 800b080:	2600      	movs	r6, #0
 800b082:	e7aa      	b.n	800afda <_strtod_l+0x98a>
 800b084:	4b32      	ldr	r3, [pc, #200]	@ (800b150 <_strtod_l+0xb00>)
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7f5 fad4 	bl	8000638 <__aeabi_dmul>
 800b090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d09f      	beq.n	800afda <_strtod_l+0x98a>
 800b09a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b09e:	e7a0      	b.n	800afe2 <_strtod_l+0x992>
 800b0a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b128 <_strtod_l+0xad8>
 800b0a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0a8:	ec57 6b17 	vmov	r6, r7, d7
 800b0ac:	e799      	b.n	800afe2 <_strtod_l+0x992>
 800b0ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0b2:	9b08      	ldr	r3, [sp, #32]
 800b0b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1c1      	bne.n	800b040 <_strtod_l+0x9f0>
 800b0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0c0:	0d1b      	lsrs	r3, r3, #20
 800b0c2:	051b      	lsls	r3, r3, #20
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	d1bb      	bne.n	800b040 <_strtod_l+0x9f0>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 fe14 	bl	8000cf8 <__aeabi_d2lz>
 800b0d0:	f7f5 fa84 	bl	80005dc <__aeabi_l2d>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f8f4 	bl	80002c8 <__aeabi_dsub>
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b0e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ee:	ea46 060a 	orr.w	r6, r6, sl
 800b0f2:	431e      	orrs	r6, r3
 800b0f4:	d06f      	beq.n	800b1d6 <_strtod_l+0xb86>
 800b0f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b130 <_strtod_l+0xae0>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f7f5 fd0e 	bl	8000b1c <__aeabi_dcmplt>
 800b100:	2800      	cmp	r0, #0
 800b102:	f47f accf 	bne.w	800aaa4 <_strtod_l+0x454>
 800b106:	a30c      	add	r3, pc, #48	@ (adr r3, 800b138 <_strtod_l+0xae8>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b110:	f7f5 fd22 	bl	8000b58 <__aeabi_dcmpgt>
 800b114:	2800      	cmp	r0, #0
 800b116:	d093      	beq.n	800b040 <_strtod_l+0x9f0>
 800b118:	e4c4      	b.n	800aaa4 <_strtod_l+0x454>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	00000000 	.word	0x00000000
 800b124:	bff00000 	.word	0xbff00000
 800b128:	00000000 	.word	0x00000000
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	94a03595 	.word	0x94a03595
 800b134:	3fdfffff 	.word	0x3fdfffff
 800b138:	35afe535 	.word	0x35afe535
 800b13c:	3fe00000 	.word	0x3fe00000
 800b140:	000fffff 	.word	0x000fffff
 800b144:	7ff00000 	.word	0x7ff00000
 800b148:	7fefffff 	.word	0x7fefffff
 800b14c:	3ff00000 	.word	0x3ff00000
 800b150:	3fe00000 	.word	0x3fe00000
 800b154:	7fe00000 	.word	0x7fe00000
 800b158:	7c9fffff 	.word	0x7c9fffff
 800b15c:	9b08      	ldr	r3, [sp, #32]
 800b15e:	b323      	cbz	r3, 800b1aa <_strtod_l+0xb5a>
 800b160:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b164:	d821      	bhi.n	800b1aa <_strtod_l+0xb5a>
 800b166:	a328      	add	r3, pc, #160	@ (adr r3, 800b208 <_strtod_l+0xbb8>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	4630      	mov	r0, r6
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f5 fcde 	bl	8000b30 <__aeabi_dcmple>
 800b174:	b1a0      	cbz	r0, 800b1a0 <_strtod_l+0xb50>
 800b176:	4639      	mov	r1, r7
 800b178:	4630      	mov	r0, r6
 800b17a:	f7f5 fd35 	bl	8000be8 <__aeabi_d2uiz>
 800b17e:	2801      	cmp	r0, #1
 800b180:	bf38      	it	cc
 800b182:	2001      	movcc	r0, #1
 800b184:	f7f5 f9de 	bl	8000544 <__aeabi_ui2d>
 800b188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	b9fb      	cbnz	r3, 800b1d0 <_strtod_l+0xb80>
 800b190:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b194:	9014      	str	r0, [sp, #80]	@ 0x50
 800b196:	9315      	str	r3, [sp, #84]	@ 0x54
 800b198:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b19c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1a6:	1b5b      	subs	r3, r3, r5
 800b1a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1b2:	f7ff f8f1 	bl	800a398 <__ulp>
 800b1b6:	4650      	mov	r0, sl
 800b1b8:	ec53 2b10 	vmov	r2, r3, d0
 800b1bc:	4659      	mov	r1, fp
 800b1be:	f7f5 fa3b 	bl	8000638 <__aeabi_dmul>
 800b1c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1c6:	f7f5 f881 	bl	80002cc <__adddf3>
 800b1ca:	4682      	mov	sl, r0
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	e770      	b.n	800b0b2 <_strtod_l+0xa62>
 800b1d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b1d4:	e7e0      	b.n	800b198 <_strtod_l+0xb48>
 800b1d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b210 <_strtod_l+0xbc0>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 fc9e 	bl	8000b1c <__aeabi_dcmplt>
 800b1e0:	e798      	b.n	800b114 <_strtod_l+0xac4>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b1e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	f7ff ba6d 	b.w	800a6ca <_strtod_l+0x7a>
 800b1f0:	2a65      	cmp	r2, #101	@ 0x65
 800b1f2:	f43f ab66 	beq.w	800a8c2 <_strtod_l+0x272>
 800b1f6:	2a45      	cmp	r2, #69	@ 0x45
 800b1f8:	f43f ab63 	beq.w	800a8c2 <_strtod_l+0x272>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f7ff bb9e 	b.w	800a93e <_strtod_l+0x2ee>
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	ffc00000 	.word	0xffc00000
 800b20c:	41dfffff 	.word	0x41dfffff
 800b210:	94a03595 	.word	0x94a03595
 800b214:	3fcfffff 	.word	0x3fcfffff

0800b218 <_strtod_r>:
 800b218:	4b01      	ldr	r3, [pc, #4]	@ (800b220 <_strtod_r+0x8>)
 800b21a:	f7ff ba19 	b.w	800a650 <_strtod_l>
 800b21e:	bf00      	nop
 800b220:	200000b0 	.word	0x200000b0

0800b224 <_strtol_l.constprop.0>:
 800b224:	2b24      	cmp	r3, #36	@ 0x24
 800b226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b22a:	4686      	mov	lr, r0
 800b22c:	4690      	mov	r8, r2
 800b22e:	d801      	bhi.n	800b234 <_strtol_l.constprop.0+0x10>
 800b230:	2b01      	cmp	r3, #1
 800b232:	d106      	bne.n	800b242 <_strtol_l.constprop.0+0x1e>
 800b234:	f7fd fdae 	bl	8008d94 <__errno>
 800b238:	2316      	movs	r3, #22
 800b23a:	6003      	str	r3, [r0, #0]
 800b23c:	2000      	movs	r0, #0
 800b23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b242:	4834      	ldr	r0, [pc, #208]	@ (800b314 <_strtol_l.constprop.0+0xf0>)
 800b244:	460d      	mov	r5, r1
 800b246:	462a      	mov	r2, r5
 800b248:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b24c:	5d06      	ldrb	r6, [r0, r4]
 800b24e:	f016 0608 	ands.w	r6, r6, #8
 800b252:	d1f8      	bne.n	800b246 <_strtol_l.constprop.0+0x22>
 800b254:	2c2d      	cmp	r4, #45	@ 0x2d
 800b256:	d12d      	bne.n	800b2b4 <_strtol_l.constprop.0+0x90>
 800b258:	782c      	ldrb	r4, [r5, #0]
 800b25a:	2601      	movs	r6, #1
 800b25c:	1c95      	adds	r5, r2, #2
 800b25e:	f033 0210 	bics.w	r2, r3, #16
 800b262:	d109      	bne.n	800b278 <_strtol_l.constprop.0+0x54>
 800b264:	2c30      	cmp	r4, #48	@ 0x30
 800b266:	d12a      	bne.n	800b2be <_strtol_l.constprop.0+0x9a>
 800b268:	782a      	ldrb	r2, [r5, #0]
 800b26a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b26e:	2a58      	cmp	r2, #88	@ 0x58
 800b270:	d125      	bne.n	800b2be <_strtol_l.constprop.0+0x9a>
 800b272:	786c      	ldrb	r4, [r5, #1]
 800b274:	2310      	movs	r3, #16
 800b276:	3502      	adds	r5, #2
 800b278:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b27c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b280:	2200      	movs	r2, #0
 800b282:	fbbc f9f3 	udiv	r9, ip, r3
 800b286:	4610      	mov	r0, r2
 800b288:	fb03 ca19 	mls	sl, r3, r9, ip
 800b28c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b290:	2f09      	cmp	r7, #9
 800b292:	d81b      	bhi.n	800b2cc <_strtol_l.constprop.0+0xa8>
 800b294:	463c      	mov	r4, r7
 800b296:	42a3      	cmp	r3, r4
 800b298:	dd27      	ble.n	800b2ea <_strtol_l.constprop.0+0xc6>
 800b29a:	1c57      	adds	r7, r2, #1
 800b29c:	d007      	beq.n	800b2ae <_strtol_l.constprop.0+0x8a>
 800b29e:	4581      	cmp	r9, r0
 800b2a0:	d320      	bcc.n	800b2e4 <_strtol_l.constprop.0+0xc0>
 800b2a2:	d101      	bne.n	800b2a8 <_strtol_l.constprop.0+0x84>
 800b2a4:	45a2      	cmp	sl, r4
 800b2a6:	db1d      	blt.n	800b2e4 <_strtol_l.constprop.0+0xc0>
 800b2a8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2b2:	e7eb      	b.n	800b28c <_strtol_l.constprop.0+0x68>
 800b2b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2b6:	bf04      	itt	eq
 800b2b8:	782c      	ldrbeq	r4, [r5, #0]
 800b2ba:	1c95      	addeq	r5, r2, #2
 800b2bc:	e7cf      	b.n	800b25e <_strtol_l.constprop.0+0x3a>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1da      	bne.n	800b278 <_strtol_l.constprop.0+0x54>
 800b2c2:	2c30      	cmp	r4, #48	@ 0x30
 800b2c4:	bf0c      	ite	eq
 800b2c6:	2308      	moveq	r3, #8
 800b2c8:	230a      	movne	r3, #10
 800b2ca:	e7d5      	b.n	800b278 <_strtol_l.constprop.0+0x54>
 800b2cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2d0:	2f19      	cmp	r7, #25
 800b2d2:	d801      	bhi.n	800b2d8 <_strtol_l.constprop.0+0xb4>
 800b2d4:	3c37      	subs	r4, #55	@ 0x37
 800b2d6:	e7de      	b.n	800b296 <_strtol_l.constprop.0+0x72>
 800b2d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2dc:	2f19      	cmp	r7, #25
 800b2de:	d804      	bhi.n	800b2ea <_strtol_l.constprop.0+0xc6>
 800b2e0:	3c57      	subs	r4, #87	@ 0x57
 800b2e2:	e7d8      	b.n	800b296 <_strtol_l.constprop.0+0x72>
 800b2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e8:	e7e1      	b.n	800b2ae <_strtol_l.constprop.0+0x8a>
 800b2ea:	1c53      	adds	r3, r2, #1
 800b2ec:	d108      	bne.n	800b300 <_strtol_l.constprop.0+0xdc>
 800b2ee:	2322      	movs	r3, #34	@ 0x22
 800b2f0:	f8ce 3000 	str.w	r3, [lr]
 800b2f4:	4660      	mov	r0, ip
 800b2f6:	f1b8 0f00 	cmp.w	r8, #0
 800b2fa:	d0a0      	beq.n	800b23e <_strtol_l.constprop.0+0x1a>
 800b2fc:	1e69      	subs	r1, r5, #1
 800b2fe:	e006      	b.n	800b30e <_strtol_l.constprop.0+0xea>
 800b300:	b106      	cbz	r6, 800b304 <_strtol_l.constprop.0+0xe0>
 800b302:	4240      	negs	r0, r0
 800b304:	f1b8 0f00 	cmp.w	r8, #0
 800b308:	d099      	beq.n	800b23e <_strtol_l.constprop.0+0x1a>
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	d1f6      	bne.n	800b2fc <_strtol_l.constprop.0+0xd8>
 800b30e:	f8c8 1000 	str.w	r1, [r8]
 800b312:	e794      	b.n	800b23e <_strtol_l.constprop.0+0x1a>
 800b314:	0800d6b1 	.word	0x0800d6b1

0800b318 <_strtol_r>:
 800b318:	f7ff bf84 	b.w	800b224 <_strtol_l.constprop.0>

0800b31c <__ssputs_r>:
 800b31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	688e      	ldr	r6, [r1, #8]
 800b322:	461f      	mov	r7, r3
 800b324:	42be      	cmp	r6, r7
 800b326:	680b      	ldr	r3, [r1, #0]
 800b328:	4682      	mov	sl, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	4690      	mov	r8, r2
 800b32e:	d82d      	bhi.n	800b38c <__ssputs_r+0x70>
 800b330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b334:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b338:	d026      	beq.n	800b388 <__ssputs_r+0x6c>
 800b33a:	6965      	ldr	r5, [r4, #20]
 800b33c:	6909      	ldr	r1, [r1, #16]
 800b33e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b342:	eba3 0901 	sub.w	r9, r3, r1
 800b346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b34a:	1c7b      	adds	r3, r7, #1
 800b34c:	444b      	add	r3, r9
 800b34e:	106d      	asrs	r5, r5, #1
 800b350:	429d      	cmp	r5, r3
 800b352:	bf38      	it	cc
 800b354:	461d      	movcc	r5, r3
 800b356:	0553      	lsls	r3, r2, #21
 800b358:	d527      	bpl.n	800b3aa <__ssputs_r+0x8e>
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7fe fc1c 	bl	8009b98 <_malloc_r>
 800b360:	4606      	mov	r6, r0
 800b362:	b360      	cbz	r0, 800b3be <__ssputs_r+0xa2>
 800b364:	6921      	ldr	r1, [r4, #16]
 800b366:	464a      	mov	r2, r9
 800b368:	f7fd fd41 	bl	8008dee <memcpy>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	6126      	str	r6, [r4, #16]
 800b37a:	6165      	str	r5, [r4, #20]
 800b37c:	444e      	add	r6, r9
 800b37e:	eba5 0509 	sub.w	r5, r5, r9
 800b382:	6026      	str	r6, [r4, #0]
 800b384:	60a5      	str	r5, [r4, #8]
 800b386:	463e      	mov	r6, r7
 800b388:	42be      	cmp	r6, r7
 800b38a:	d900      	bls.n	800b38e <__ssputs_r+0x72>
 800b38c:	463e      	mov	r6, r7
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	4632      	mov	r2, r6
 800b392:	4641      	mov	r1, r8
 800b394:	f000 fb9c 	bl	800bad0 <memmove>
 800b398:	68a3      	ldr	r3, [r4, #8]
 800b39a:	1b9b      	subs	r3, r3, r6
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	4433      	add	r3, r6
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	f000 ff51 	bl	800c252 <_realloc_r>
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1e0      	bne.n	800b378 <__ssputs_r+0x5c>
 800b3b6:	6921      	ldr	r1, [r4, #16]
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	f7fe fb79 	bl	8009ab0 <_free_r>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	f8ca 3000 	str.w	r3, [sl]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e7e9      	b.n	800b3a6 <__ssputs_r+0x8a>
	...

0800b3d4 <_svfiprintf_r>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	4698      	mov	r8, r3
 800b3da:	898b      	ldrh	r3, [r1, #12]
 800b3dc:	061b      	lsls	r3, r3, #24
 800b3de:	b09d      	sub	sp, #116	@ 0x74
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	d510      	bpl.n	800b40a <_svfiprintf_r+0x36>
 800b3e8:	690b      	ldr	r3, [r1, #16]
 800b3ea:	b973      	cbnz	r3, 800b40a <_svfiprintf_r+0x36>
 800b3ec:	2140      	movs	r1, #64	@ 0x40
 800b3ee:	f7fe fbd3 	bl	8009b98 <_malloc_r>
 800b3f2:	6028      	str	r0, [r5, #0]
 800b3f4:	6128      	str	r0, [r5, #16]
 800b3f6:	b930      	cbnz	r0, 800b406 <_svfiprintf_r+0x32>
 800b3f8:	230c      	movs	r3, #12
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	b01d      	add	sp, #116	@ 0x74
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	2340      	movs	r3, #64	@ 0x40
 800b408:	616b      	str	r3, [r5, #20]
 800b40a:	2300      	movs	r3, #0
 800b40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40e:	2320      	movs	r3, #32
 800b410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b414:	f8cd 800c 	str.w	r8, [sp, #12]
 800b418:	2330      	movs	r3, #48	@ 0x30
 800b41a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5b8 <_svfiprintf_r+0x1e4>
 800b41e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b422:	f04f 0901 	mov.w	r9, #1
 800b426:	4623      	mov	r3, r4
 800b428:	469a      	mov	sl, r3
 800b42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42e:	b10a      	cbz	r2, 800b434 <_svfiprintf_r+0x60>
 800b430:	2a25      	cmp	r2, #37	@ 0x25
 800b432:	d1f9      	bne.n	800b428 <_svfiprintf_r+0x54>
 800b434:	ebba 0b04 	subs.w	fp, sl, r4
 800b438:	d00b      	beq.n	800b452 <_svfiprintf_r+0x7e>
 800b43a:	465b      	mov	r3, fp
 800b43c:	4622      	mov	r2, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	4638      	mov	r0, r7
 800b442:	f7ff ff6b 	bl	800b31c <__ssputs_r>
 800b446:	3001      	adds	r0, #1
 800b448:	f000 80a7 	beq.w	800b59a <_svfiprintf_r+0x1c6>
 800b44c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b44e:	445a      	add	r2, fp
 800b450:	9209      	str	r2, [sp, #36]	@ 0x24
 800b452:	f89a 3000 	ldrb.w	r3, [sl]
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 809f 	beq.w	800b59a <_svfiprintf_r+0x1c6>
 800b45c:	2300      	movs	r3, #0
 800b45e:	f04f 32ff 	mov.w	r2, #4294967295
 800b462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b466:	f10a 0a01 	add.w	sl, sl, #1
 800b46a:	9304      	str	r3, [sp, #16]
 800b46c:	9307      	str	r3, [sp, #28]
 800b46e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b472:	931a      	str	r3, [sp, #104]	@ 0x68
 800b474:	4654      	mov	r4, sl
 800b476:	2205      	movs	r2, #5
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	484e      	ldr	r0, [pc, #312]	@ (800b5b8 <_svfiprintf_r+0x1e4>)
 800b47e:	f7f4 fec7 	bl	8000210 <memchr>
 800b482:	9a04      	ldr	r2, [sp, #16]
 800b484:	b9d8      	cbnz	r0, 800b4be <_svfiprintf_r+0xea>
 800b486:	06d0      	lsls	r0, r2, #27
 800b488:	bf44      	itt	mi
 800b48a:	2320      	movmi	r3, #32
 800b48c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b490:	0711      	lsls	r1, r2, #28
 800b492:	bf44      	itt	mi
 800b494:	232b      	movmi	r3, #43	@ 0x2b
 800b496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b49a:	f89a 3000 	ldrb.w	r3, [sl]
 800b49e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a0:	d015      	beq.n	800b4ce <_svfiprintf_r+0xfa>
 800b4a2:	9a07      	ldr	r2, [sp, #28]
 800b4a4:	4654      	mov	r4, sl
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	f04f 0c0a 	mov.w	ip, #10
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b2:	3b30      	subs	r3, #48	@ 0x30
 800b4b4:	2b09      	cmp	r3, #9
 800b4b6:	d94b      	bls.n	800b550 <_svfiprintf_r+0x17c>
 800b4b8:	b1b0      	cbz	r0, 800b4e8 <_svfiprintf_r+0x114>
 800b4ba:	9207      	str	r2, [sp, #28]
 800b4bc:	e014      	b.n	800b4e8 <_svfiprintf_r+0x114>
 800b4be:	eba0 0308 	sub.w	r3, r0, r8
 800b4c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	9304      	str	r3, [sp, #16]
 800b4ca:	46a2      	mov	sl, r4
 800b4cc:	e7d2      	b.n	800b474 <_svfiprintf_r+0xa0>
 800b4ce:	9b03      	ldr	r3, [sp, #12]
 800b4d0:	1d19      	adds	r1, r3, #4
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	9103      	str	r1, [sp, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	bfbb      	ittet	lt
 800b4da:	425b      	neglt	r3, r3
 800b4dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b4e0:	9307      	strge	r3, [sp, #28]
 800b4e2:	9307      	strlt	r3, [sp, #28]
 800b4e4:	bfb8      	it	lt
 800b4e6:	9204      	strlt	r2, [sp, #16]
 800b4e8:	7823      	ldrb	r3, [r4, #0]
 800b4ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4ec:	d10a      	bne.n	800b504 <_svfiprintf_r+0x130>
 800b4ee:	7863      	ldrb	r3, [r4, #1]
 800b4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f2:	d132      	bne.n	800b55a <_svfiprintf_r+0x186>
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	1d1a      	adds	r2, r3, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	9203      	str	r2, [sp, #12]
 800b4fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b500:	3402      	adds	r4, #2
 800b502:	9305      	str	r3, [sp, #20]
 800b504:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5c8 <_svfiprintf_r+0x1f4>
 800b508:	7821      	ldrb	r1, [r4, #0]
 800b50a:	2203      	movs	r2, #3
 800b50c:	4650      	mov	r0, sl
 800b50e:	f7f4 fe7f 	bl	8000210 <memchr>
 800b512:	b138      	cbz	r0, 800b524 <_svfiprintf_r+0x150>
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	eba0 000a 	sub.w	r0, r0, sl
 800b51a:	2240      	movs	r2, #64	@ 0x40
 800b51c:	4082      	lsls	r2, r0
 800b51e:	4313      	orrs	r3, r2
 800b520:	3401      	adds	r4, #1
 800b522:	9304      	str	r3, [sp, #16]
 800b524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b528:	4824      	ldr	r0, [pc, #144]	@ (800b5bc <_svfiprintf_r+0x1e8>)
 800b52a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b52e:	2206      	movs	r2, #6
 800b530:	f7f4 fe6e 	bl	8000210 <memchr>
 800b534:	2800      	cmp	r0, #0
 800b536:	d036      	beq.n	800b5a6 <_svfiprintf_r+0x1d2>
 800b538:	4b21      	ldr	r3, [pc, #132]	@ (800b5c0 <_svfiprintf_r+0x1ec>)
 800b53a:	bb1b      	cbnz	r3, 800b584 <_svfiprintf_r+0x1b0>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	3307      	adds	r3, #7
 800b540:	f023 0307 	bic.w	r3, r3, #7
 800b544:	3308      	adds	r3, #8
 800b546:	9303      	str	r3, [sp, #12]
 800b548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54a:	4433      	add	r3, r6
 800b54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54e:	e76a      	b.n	800b426 <_svfiprintf_r+0x52>
 800b550:	fb0c 3202 	mla	r2, ip, r2, r3
 800b554:	460c      	mov	r4, r1
 800b556:	2001      	movs	r0, #1
 800b558:	e7a8      	b.n	800b4ac <_svfiprintf_r+0xd8>
 800b55a:	2300      	movs	r3, #0
 800b55c:	3401      	adds	r4, #1
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	4619      	mov	r1, r3
 800b562:	f04f 0c0a 	mov.w	ip, #10
 800b566:	4620      	mov	r0, r4
 800b568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b56c:	3a30      	subs	r2, #48	@ 0x30
 800b56e:	2a09      	cmp	r2, #9
 800b570:	d903      	bls.n	800b57a <_svfiprintf_r+0x1a6>
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0c6      	beq.n	800b504 <_svfiprintf_r+0x130>
 800b576:	9105      	str	r1, [sp, #20]
 800b578:	e7c4      	b.n	800b504 <_svfiprintf_r+0x130>
 800b57a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b57e:	4604      	mov	r4, r0
 800b580:	2301      	movs	r3, #1
 800b582:	e7f0      	b.n	800b566 <_svfiprintf_r+0x192>
 800b584:	ab03      	add	r3, sp, #12
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	462a      	mov	r2, r5
 800b58a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c4 <_svfiprintf_r+0x1f0>)
 800b58c:	a904      	add	r1, sp, #16
 800b58e:	4638      	mov	r0, r7
 800b590:	f7fc fcaa 	bl	8007ee8 <_printf_float>
 800b594:	1c42      	adds	r2, r0, #1
 800b596:	4606      	mov	r6, r0
 800b598:	d1d6      	bne.n	800b548 <_svfiprintf_r+0x174>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	065b      	lsls	r3, r3, #25
 800b59e:	f53f af2d 	bmi.w	800b3fc <_svfiprintf_r+0x28>
 800b5a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5a4:	e72c      	b.n	800b400 <_svfiprintf_r+0x2c>
 800b5a6:	ab03      	add	r3, sp, #12
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	462a      	mov	r2, r5
 800b5ac:	4b05      	ldr	r3, [pc, #20]	@ (800b5c4 <_svfiprintf_r+0x1f0>)
 800b5ae:	a904      	add	r1, sp, #16
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7fc ff31 	bl	8008418 <_printf_i>
 800b5b6:	e7ed      	b.n	800b594 <_svfiprintf_r+0x1c0>
 800b5b8:	0800d7b1 	.word	0x0800d7b1
 800b5bc:	0800d7bb 	.word	0x0800d7bb
 800b5c0:	08007ee9 	.word	0x08007ee9
 800b5c4:	0800b31d 	.word	0x0800b31d
 800b5c8:	0800d7b7 	.word	0x0800d7b7

0800b5cc <__sfputc_r>:
 800b5cc:	6893      	ldr	r3, [r2, #8]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	b410      	push	{r4}
 800b5d4:	6093      	str	r3, [r2, #8]
 800b5d6:	da08      	bge.n	800b5ea <__sfputc_r+0x1e>
 800b5d8:	6994      	ldr	r4, [r2, #24]
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	db01      	blt.n	800b5e2 <__sfputc_r+0x16>
 800b5de:	290a      	cmp	r1, #10
 800b5e0:	d103      	bne.n	800b5ea <__sfputc_r+0x1e>
 800b5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e6:	f000 b9df 	b.w	800b9a8 <__swbuf_r>
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	1c58      	adds	r0, r3, #1
 800b5ee:	6010      	str	r0, [r2, #0]
 800b5f0:	7019      	strb	r1, [r3, #0]
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <__sfputs_r>:
 800b5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	460f      	mov	r7, r1
 800b600:	4614      	mov	r4, r2
 800b602:	18d5      	adds	r5, r2, r3
 800b604:	42ac      	cmp	r4, r5
 800b606:	d101      	bne.n	800b60c <__sfputs_r+0x12>
 800b608:	2000      	movs	r0, #0
 800b60a:	e007      	b.n	800b61c <__sfputs_r+0x22>
 800b60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b610:	463a      	mov	r2, r7
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ffda 	bl	800b5cc <__sfputc_r>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d1f3      	bne.n	800b604 <__sfputs_r+0xa>
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b620 <_vfiprintf_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	460d      	mov	r5, r1
 800b626:	b09d      	sub	sp, #116	@ 0x74
 800b628:	4614      	mov	r4, r2
 800b62a:	4698      	mov	r8, r3
 800b62c:	4606      	mov	r6, r0
 800b62e:	b118      	cbz	r0, 800b638 <_vfiprintf_r+0x18>
 800b630:	6a03      	ldr	r3, [r0, #32]
 800b632:	b90b      	cbnz	r3, 800b638 <_vfiprintf_r+0x18>
 800b634:	f7fd fab0 	bl	8008b98 <__sinit>
 800b638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b63a:	07d9      	lsls	r1, r3, #31
 800b63c:	d405      	bmi.n	800b64a <_vfiprintf_r+0x2a>
 800b63e:	89ab      	ldrh	r3, [r5, #12]
 800b640:	059a      	lsls	r2, r3, #22
 800b642:	d402      	bmi.n	800b64a <_vfiprintf_r+0x2a>
 800b644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b646:	f7fd fbd0 	bl	8008dea <__retarget_lock_acquire_recursive>
 800b64a:	89ab      	ldrh	r3, [r5, #12]
 800b64c:	071b      	lsls	r3, r3, #28
 800b64e:	d501      	bpl.n	800b654 <_vfiprintf_r+0x34>
 800b650:	692b      	ldr	r3, [r5, #16]
 800b652:	b99b      	cbnz	r3, 800b67c <_vfiprintf_r+0x5c>
 800b654:	4629      	mov	r1, r5
 800b656:	4630      	mov	r0, r6
 800b658:	f000 f9e4 	bl	800ba24 <__swsetup_r>
 800b65c:	b170      	cbz	r0, 800b67c <_vfiprintf_r+0x5c>
 800b65e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b660:	07dc      	lsls	r4, r3, #31
 800b662:	d504      	bpl.n	800b66e <_vfiprintf_r+0x4e>
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	b01d      	add	sp, #116	@ 0x74
 800b66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66e:	89ab      	ldrh	r3, [r5, #12]
 800b670:	0598      	lsls	r0, r3, #22
 800b672:	d4f7      	bmi.n	800b664 <_vfiprintf_r+0x44>
 800b674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b676:	f7fd fbb9 	bl	8008dec <__retarget_lock_release_recursive>
 800b67a:	e7f3      	b.n	800b664 <_vfiprintf_r+0x44>
 800b67c:	2300      	movs	r3, #0
 800b67e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b680:	2320      	movs	r3, #32
 800b682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b686:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68a:	2330      	movs	r3, #48	@ 0x30
 800b68c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b83c <_vfiprintf_r+0x21c>
 800b690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b694:	f04f 0901 	mov.w	r9, #1
 800b698:	4623      	mov	r3, r4
 800b69a:	469a      	mov	sl, r3
 800b69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a0:	b10a      	cbz	r2, 800b6a6 <_vfiprintf_r+0x86>
 800b6a2:	2a25      	cmp	r2, #37	@ 0x25
 800b6a4:	d1f9      	bne.n	800b69a <_vfiprintf_r+0x7a>
 800b6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6aa:	d00b      	beq.n	800b6c4 <_vfiprintf_r+0xa4>
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff ffa1 	bl	800b5fa <__sfputs_r>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	f000 80a7 	beq.w	800b80c <_vfiprintf_r+0x1ec>
 800b6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6c0:	445a      	add	r2, fp
 800b6c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 809f 	beq.w	800b80c <_vfiprintf_r+0x1ec>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6d8:	f10a 0a01 	add.w	sl, sl, #1
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	9307      	str	r3, [sp, #28]
 800b6e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6e6:	4654      	mov	r4, sl
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ee:	4853      	ldr	r0, [pc, #332]	@ (800b83c <_vfiprintf_r+0x21c>)
 800b6f0:	f7f4 fd8e 	bl	8000210 <memchr>
 800b6f4:	9a04      	ldr	r2, [sp, #16]
 800b6f6:	b9d8      	cbnz	r0, 800b730 <_vfiprintf_r+0x110>
 800b6f8:	06d1      	lsls	r1, r2, #27
 800b6fa:	bf44      	itt	mi
 800b6fc:	2320      	movmi	r3, #32
 800b6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b702:	0713      	lsls	r3, r2, #28
 800b704:	bf44      	itt	mi
 800b706:	232b      	movmi	r3, #43	@ 0x2b
 800b708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b70c:	f89a 3000 	ldrb.w	r3, [sl]
 800b710:	2b2a      	cmp	r3, #42	@ 0x2a
 800b712:	d015      	beq.n	800b740 <_vfiprintf_r+0x120>
 800b714:	9a07      	ldr	r2, [sp, #28]
 800b716:	4654      	mov	r4, sl
 800b718:	2000      	movs	r0, #0
 800b71a:	f04f 0c0a 	mov.w	ip, #10
 800b71e:	4621      	mov	r1, r4
 800b720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b724:	3b30      	subs	r3, #48	@ 0x30
 800b726:	2b09      	cmp	r3, #9
 800b728:	d94b      	bls.n	800b7c2 <_vfiprintf_r+0x1a2>
 800b72a:	b1b0      	cbz	r0, 800b75a <_vfiprintf_r+0x13a>
 800b72c:	9207      	str	r2, [sp, #28]
 800b72e:	e014      	b.n	800b75a <_vfiprintf_r+0x13a>
 800b730:	eba0 0308 	sub.w	r3, r0, r8
 800b734:	fa09 f303 	lsl.w	r3, r9, r3
 800b738:	4313      	orrs	r3, r2
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	46a2      	mov	sl, r4
 800b73e:	e7d2      	b.n	800b6e6 <_vfiprintf_r+0xc6>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	1d19      	adds	r1, r3, #4
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	9103      	str	r1, [sp, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	bfbb      	ittet	lt
 800b74c:	425b      	neglt	r3, r3
 800b74e:	f042 0202 	orrlt.w	r2, r2, #2
 800b752:	9307      	strge	r3, [sp, #28]
 800b754:	9307      	strlt	r3, [sp, #28]
 800b756:	bfb8      	it	lt
 800b758:	9204      	strlt	r2, [sp, #16]
 800b75a:	7823      	ldrb	r3, [r4, #0]
 800b75c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b75e:	d10a      	bne.n	800b776 <_vfiprintf_r+0x156>
 800b760:	7863      	ldrb	r3, [r4, #1]
 800b762:	2b2a      	cmp	r3, #42	@ 0x2a
 800b764:	d132      	bne.n	800b7cc <_vfiprintf_r+0x1ac>
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	1d1a      	adds	r2, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9203      	str	r2, [sp, #12]
 800b76e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b772:	3402      	adds	r4, #2
 800b774:	9305      	str	r3, [sp, #20]
 800b776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b84c <_vfiprintf_r+0x22c>
 800b77a:	7821      	ldrb	r1, [r4, #0]
 800b77c:	2203      	movs	r2, #3
 800b77e:	4650      	mov	r0, sl
 800b780:	f7f4 fd46 	bl	8000210 <memchr>
 800b784:	b138      	cbz	r0, 800b796 <_vfiprintf_r+0x176>
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	eba0 000a 	sub.w	r0, r0, sl
 800b78c:	2240      	movs	r2, #64	@ 0x40
 800b78e:	4082      	lsls	r2, r0
 800b790:	4313      	orrs	r3, r2
 800b792:	3401      	adds	r4, #1
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	4829      	ldr	r0, [pc, #164]	@ (800b840 <_vfiprintf_r+0x220>)
 800b79c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7a0:	2206      	movs	r2, #6
 800b7a2:	f7f4 fd35 	bl	8000210 <memchr>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d03f      	beq.n	800b82a <_vfiprintf_r+0x20a>
 800b7aa:	4b26      	ldr	r3, [pc, #152]	@ (800b844 <_vfiprintf_r+0x224>)
 800b7ac:	bb1b      	cbnz	r3, 800b7f6 <_vfiprintf_r+0x1d6>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	3307      	adds	r3, #7
 800b7b2:	f023 0307 	bic.w	r3, r3, #7
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7bc:	443b      	add	r3, r7
 800b7be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c0:	e76a      	b.n	800b698 <_vfiprintf_r+0x78>
 800b7c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	e7a8      	b.n	800b71e <_vfiprintf_r+0xfe>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	3401      	adds	r4, #1
 800b7d0:	9305      	str	r3, [sp, #20]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	f04f 0c0a 	mov.w	ip, #10
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7de:	3a30      	subs	r2, #48	@ 0x30
 800b7e0:	2a09      	cmp	r2, #9
 800b7e2:	d903      	bls.n	800b7ec <_vfiprintf_r+0x1cc>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0c6      	beq.n	800b776 <_vfiprintf_r+0x156>
 800b7e8:	9105      	str	r1, [sp, #20]
 800b7ea:	e7c4      	b.n	800b776 <_vfiprintf_r+0x156>
 800b7ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e7f0      	b.n	800b7d8 <_vfiprintf_r+0x1b8>
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <_vfiprintf_r+0x228>)
 800b7fe:	a904      	add	r1, sp, #16
 800b800:	4630      	mov	r0, r6
 800b802:	f7fc fb71 	bl	8007ee8 <_printf_float>
 800b806:	4607      	mov	r7, r0
 800b808:	1c78      	adds	r0, r7, #1
 800b80a:	d1d6      	bne.n	800b7ba <_vfiprintf_r+0x19a>
 800b80c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b80e:	07d9      	lsls	r1, r3, #31
 800b810:	d405      	bmi.n	800b81e <_vfiprintf_r+0x1fe>
 800b812:	89ab      	ldrh	r3, [r5, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d402      	bmi.n	800b81e <_vfiprintf_r+0x1fe>
 800b818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b81a:	f7fd fae7 	bl	8008dec <__retarget_lock_release_recursive>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	065b      	lsls	r3, r3, #25
 800b822:	f53f af1f 	bmi.w	800b664 <_vfiprintf_r+0x44>
 800b826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b828:	e71e      	b.n	800b668 <_vfiprintf_r+0x48>
 800b82a:	ab03      	add	r3, sp, #12
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	462a      	mov	r2, r5
 800b830:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <_vfiprintf_r+0x228>)
 800b832:	a904      	add	r1, sp, #16
 800b834:	4630      	mov	r0, r6
 800b836:	f7fc fdef 	bl	8008418 <_printf_i>
 800b83a:	e7e4      	b.n	800b806 <_vfiprintf_r+0x1e6>
 800b83c:	0800d7b1 	.word	0x0800d7b1
 800b840:	0800d7bb 	.word	0x0800d7bb
 800b844:	08007ee9 	.word	0x08007ee9
 800b848:	0800b5fb 	.word	0x0800b5fb
 800b84c:	0800d7b7 	.word	0x0800d7b7

0800b850 <__sflush_r>:
 800b850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b858:	0716      	lsls	r6, r2, #28
 800b85a:	4605      	mov	r5, r0
 800b85c:	460c      	mov	r4, r1
 800b85e:	d454      	bmi.n	800b90a <__sflush_r+0xba>
 800b860:	684b      	ldr	r3, [r1, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	dc02      	bgt.n	800b86c <__sflush_r+0x1c>
 800b866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	dd48      	ble.n	800b8fe <__sflush_r+0xae>
 800b86c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b86e:	2e00      	cmp	r6, #0
 800b870:	d045      	beq.n	800b8fe <__sflush_r+0xae>
 800b872:	2300      	movs	r3, #0
 800b874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b878:	682f      	ldr	r7, [r5, #0]
 800b87a:	6a21      	ldr	r1, [r4, #32]
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	d030      	beq.n	800b8e2 <__sflush_r+0x92>
 800b880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	0759      	lsls	r1, r3, #29
 800b886:	d505      	bpl.n	800b894 <__sflush_r+0x44>
 800b888:	6863      	ldr	r3, [r4, #4]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b88e:	b10b      	cbz	r3, 800b894 <__sflush_r+0x44>
 800b890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b892:	1ad2      	subs	r2, r2, r3
 800b894:	2300      	movs	r3, #0
 800b896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b898:	6a21      	ldr	r1, [r4, #32]
 800b89a:	4628      	mov	r0, r5
 800b89c:	47b0      	blx	r6
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	d106      	bne.n	800b8b2 <__sflush_r+0x62>
 800b8a4:	6829      	ldr	r1, [r5, #0]
 800b8a6:	291d      	cmp	r1, #29
 800b8a8:	d82b      	bhi.n	800b902 <__sflush_r+0xb2>
 800b8aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b954 <__sflush_r+0x104>)
 800b8ac:	410a      	asrs	r2, r1
 800b8ae:	07d6      	lsls	r6, r2, #31
 800b8b0:	d427      	bmi.n	800b902 <__sflush_r+0xb2>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	6062      	str	r2, [r4, #4]
 800b8b6:	04d9      	lsls	r1, r3, #19
 800b8b8:	6922      	ldr	r2, [r4, #16]
 800b8ba:	6022      	str	r2, [r4, #0]
 800b8bc:	d504      	bpl.n	800b8c8 <__sflush_r+0x78>
 800b8be:	1c42      	adds	r2, r0, #1
 800b8c0:	d101      	bne.n	800b8c6 <__sflush_r+0x76>
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	b903      	cbnz	r3, 800b8c8 <__sflush_r+0x78>
 800b8c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8ca:	602f      	str	r7, [r5, #0]
 800b8cc:	b1b9      	cbz	r1, 800b8fe <__sflush_r+0xae>
 800b8ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	d002      	beq.n	800b8dc <__sflush_r+0x8c>
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f7fe f8ea 	bl	8009ab0 <_free_r>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8e0:	e00d      	b.n	800b8fe <__sflush_r+0xae>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b0      	blx	r6
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	1c50      	adds	r0, r2, #1
 800b8ec:	d1c9      	bne.n	800b882 <__sflush_r+0x32>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0c6      	beq.n	800b882 <__sflush_r+0x32>
 800b8f4:	2b1d      	cmp	r3, #29
 800b8f6:	d001      	beq.n	800b8fc <__sflush_r+0xac>
 800b8f8:	2b16      	cmp	r3, #22
 800b8fa:	d11e      	bne.n	800b93a <__sflush_r+0xea>
 800b8fc:	602f      	str	r7, [r5, #0]
 800b8fe:	2000      	movs	r0, #0
 800b900:	e022      	b.n	800b948 <__sflush_r+0xf8>
 800b902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b906:	b21b      	sxth	r3, r3
 800b908:	e01b      	b.n	800b942 <__sflush_r+0xf2>
 800b90a:	690f      	ldr	r7, [r1, #16]
 800b90c:	2f00      	cmp	r7, #0
 800b90e:	d0f6      	beq.n	800b8fe <__sflush_r+0xae>
 800b910:	0793      	lsls	r3, r2, #30
 800b912:	680e      	ldr	r6, [r1, #0]
 800b914:	bf08      	it	eq
 800b916:	694b      	ldreq	r3, [r1, #20]
 800b918:	600f      	str	r7, [r1, #0]
 800b91a:	bf18      	it	ne
 800b91c:	2300      	movne	r3, #0
 800b91e:	eba6 0807 	sub.w	r8, r6, r7
 800b922:	608b      	str	r3, [r1, #8]
 800b924:	f1b8 0f00 	cmp.w	r8, #0
 800b928:	dde9      	ble.n	800b8fe <__sflush_r+0xae>
 800b92a:	6a21      	ldr	r1, [r4, #32]
 800b92c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b92e:	4643      	mov	r3, r8
 800b930:	463a      	mov	r2, r7
 800b932:	4628      	mov	r0, r5
 800b934:	47b0      	blx	r6
 800b936:	2800      	cmp	r0, #0
 800b938:	dc08      	bgt.n	800b94c <__sflush_r+0xfc>
 800b93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b93e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94c:	4407      	add	r7, r0
 800b94e:	eba8 0800 	sub.w	r8, r8, r0
 800b952:	e7e7      	b.n	800b924 <__sflush_r+0xd4>
 800b954:	dfbffffe 	.word	0xdfbffffe

0800b958 <_fflush_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	690b      	ldr	r3, [r1, #16]
 800b95c:	4605      	mov	r5, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	b913      	cbnz	r3, 800b968 <_fflush_r+0x10>
 800b962:	2500      	movs	r5, #0
 800b964:	4628      	mov	r0, r5
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	b118      	cbz	r0, 800b972 <_fflush_r+0x1a>
 800b96a:	6a03      	ldr	r3, [r0, #32]
 800b96c:	b90b      	cbnz	r3, 800b972 <_fflush_r+0x1a>
 800b96e:	f7fd f913 	bl	8008b98 <__sinit>
 800b972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0f3      	beq.n	800b962 <_fflush_r+0xa>
 800b97a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b97c:	07d0      	lsls	r0, r2, #31
 800b97e:	d404      	bmi.n	800b98a <_fflush_r+0x32>
 800b980:	0599      	lsls	r1, r3, #22
 800b982:	d402      	bmi.n	800b98a <_fflush_r+0x32>
 800b984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b986:	f7fd fa30 	bl	8008dea <__retarget_lock_acquire_recursive>
 800b98a:	4628      	mov	r0, r5
 800b98c:	4621      	mov	r1, r4
 800b98e:	f7ff ff5f 	bl	800b850 <__sflush_r>
 800b992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b994:	07da      	lsls	r2, r3, #31
 800b996:	4605      	mov	r5, r0
 800b998:	d4e4      	bmi.n	800b964 <_fflush_r+0xc>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	059b      	lsls	r3, r3, #22
 800b99e:	d4e1      	bmi.n	800b964 <_fflush_r+0xc>
 800b9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9a2:	f7fd fa23 	bl	8008dec <__retarget_lock_release_recursive>
 800b9a6:	e7dd      	b.n	800b964 <_fflush_r+0xc>

0800b9a8 <__swbuf_r>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	460e      	mov	r6, r1
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b118      	cbz	r0, 800b9ba <__swbuf_r+0x12>
 800b9b2:	6a03      	ldr	r3, [r0, #32]
 800b9b4:	b90b      	cbnz	r3, 800b9ba <__swbuf_r+0x12>
 800b9b6:	f7fd f8ef 	bl	8008b98 <__sinit>
 800b9ba:	69a3      	ldr	r3, [r4, #24]
 800b9bc:	60a3      	str	r3, [r4, #8]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	071a      	lsls	r2, r3, #28
 800b9c2:	d501      	bpl.n	800b9c8 <__swbuf_r+0x20>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	b943      	cbnz	r3, 800b9da <__swbuf_r+0x32>
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f000 f82a 	bl	800ba24 <__swsetup_r>
 800b9d0:	b118      	cbz	r0, 800b9da <__swbuf_r+0x32>
 800b9d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	6922      	ldr	r2, [r4, #16]
 800b9de:	1a98      	subs	r0, r3, r2
 800b9e0:	6963      	ldr	r3, [r4, #20]
 800b9e2:	b2f6      	uxtb	r6, r6
 800b9e4:	4283      	cmp	r3, r0
 800b9e6:	4637      	mov	r7, r6
 800b9e8:	dc05      	bgt.n	800b9f6 <__swbuf_r+0x4e>
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f7ff ffb3 	bl	800b958 <_fflush_r>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d1ed      	bne.n	800b9d2 <__swbuf_r+0x2a>
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	60a3      	str	r3, [r4, #8]
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	6022      	str	r2, [r4, #0]
 800ba02:	701e      	strb	r6, [r3, #0]
 800ba04:	6962      	ldr	r2, [r4, #20]
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d004      	beq.n	800ba16 <__swbuf_r+0x6e>
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	07db      	lsls	r3, r3, #31
 800ba10:	d5e1      	bpl.n	800b9d6 <__swbuf_r+0x2e>
 800ba12:	2e0a      	cmp	r6, #10
 800ba14:	d1df      	bne.n	800b9d6 <__swbuf_r+0x2e>
 800ba16:	4621      	mov	r1, r4
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f7ff ff9d 	bl	800b958 <_fflush_r>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d0d9      	beq.n	800b9d6 <__swbuf_r+0x2e>
 800ba22:	e7d6      	b.n	800b9d2 <__swbuf_r+0x2a>

0800ba24 <__swsetup_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4b29      	ldr	r3, [pc, #164]	@ (800bacc <__swsetup_r+0xa8>)
 800ba28:	4605      	mov	r5, r0
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	b118      	cbz	r0, 800ba38 <__swsetup_r+0x14>
 800ba30:	6a03      	ldr	r3, [r0, #32]
 800ba32:	b90b      	cbnz	r3, 800ba38 <__swsetup_r+0x14>
 800ba34:	f7fd f8b0 	bl	8008b98 <__sinit>
 800ba38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba3c:	0719      	lsls	r1, r3, #28
 800ba3e:	d422      	bmi.n	800ba86 <__swsetup_r+0x62>
 800ba40:	06da      	lsls	r2, r3, #27
 800ba42:	d407      	bmi.n	800ba54 <__swsetup_r+0x30>
 800ba44:	2209      	movs	r2, #9
 800ba46:	602a      	str	r2, [r5, #0]
 800ba48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4c:	81a3      	strh	r3, [r4, #12]
 800ba4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba52:	e033      	b.n	800babc <__swsetup_r+0x98>
 800ba54:	0758      	lsls	r0, r3, #29
 800ba56:	d512      	bpl.n	800ba7e <__swsetup_r+0x5a>
 800ba58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba5a:	b141      	cbz	r1, 800ba6e <__swsetup_r+0x4a>
 800ba5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba60:	4299      	cmp	r1, r3
 800ba62:	d002      	beq.n	800ba6a <__swsetup_r+0x46>
 800ba64:	4628      	mov	r0, r5
 800ba66:	f7fe f823 	bl	8009ab0 <_free_r>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba74:	81a3      	strh	r3, [r4, #12]
 800ba76:	2300      	movs	r3, #0
 800ba78:	6063      	str	r3, [r4, #4]
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f043 0308 	orr.w	r3, r3, #8
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	b94b      	cbnz	r3, 800ba9e <__swsetup_r+0x7a>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba94:	d003      	beq.n	800ba9e <__swsetup_r+0x7a>
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 fc4d 	bl	800c338 <__smakebuf_r>
 800ba9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa2:	f013 0201 	ands.w	r2, r3, #1
 800baa6:	d00a      	beq.n	800babe <__swsetup_r+0x9a>
 800baa8:	2200      	movs	r2, #0
 800baaa:	60a2      	str	r2, [r4, #8]
 800baac:	6962      	ldr	r2, [r4, #20]
 800baae:	4252      	negs	r2, r2
 800bab0:	61a2      	str	r2, [r4, #24]
 800bab2:	6922      	ldr	r2, [r4, #16]
 800bab4:	b942      	cbnz	r2, 800bac8 <__swsetup_r+0xa4>
 800bab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baba:	d1c5      	bne.n	800ba48 <__swsetup_r+0x24>
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	0799      	lsls	r1, r3, #30
 800bac0:	bf58      	it	pl
 800bac2:	6962      	ldrpl	r2, [r4, #20]
 800bac4:	60a2      	str	r2, [r4, #8]
 800bac6:	e7f4      	b.n	800bab2 <__swsetup_r+0x8e>
 800bac8:	2000      	movs	r0, #0
 800baca:	e7f7      	b.n	800babc <__swsetup_r+0x98>
 800bacc:	20000060 	.word	0x20000060

0800bad0 <memmove>:
 800bad0:	4288      	cmp	r0, r1
 800bad2:	b510      	push	{r4, lr}
 800bad4:	eb01 0402 	add.w	r4, r1, r2
 800bad8:	d902      	bls.n	800bae0 <memmove+0x10>
 800bada:	4284      	cmp	r4, r0
 800badc:	4623      	mov	r3, r4
 800bade:	d807      	bhi.n	800baf0 <memmove+0x20>
 800bae0:	1e43      	subs	r3, r0, #1
 800bae2:	42a1      	cmp	r1, r4
 800bae4:	d008      	beq.n	800baf8 <memmove+0x28>
 800bae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baee:	e7f8      	b.n	800bae2 <memmove+0x12>
 800baf0:	4402      	add	r2, r0
 800baf2:	4601      	mov	r1, r0
 800baf4:	428a      	cmp	r2, r1
 800baf6:	d100      	bne.n	800bafa <memmove+0x2a>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb02:	e7f7      	b.n	800baf4 <memmove+0x24>

0800bb04 <strncmp>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	b16a      	cbz	r2, 800bb24 <strncmp+0x20>
 800bb08:	3901      	subs	r1, #1
 800bb0a:	1884      	adds	r4, r0, r2
 800bb0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d103      	bne.n	800bb20 <strncmp+0x1c>
 800bb18:	42a0      	cmp	r0, r4
 800bb1a:	d001      	beq.n	800bb20 <strncmp+0x1c>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	d1f5      	bne.n	800bb0c <strncmp+0x8>
 800bb20:	1ad0      	subs	r0, r2, r3
 800bb22:	bd10      	pop	{r4, pc}
 800bb24:	4610      	mov	r0, r2
 800bb26:	e7fc      	b.n	800bb22 <strncmp+0x1e>

0800bb28 <_sbrk_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d06      	ldr	r5, [pc, #24]	@ (800bb44 <_sbrk_r+0x1c>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	f7f6 f97c 	bl	8001e30 <_sbrk>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_sbrk_r+0x1a>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_sbrk_r+0x1a>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20004e18 	.word	0x20004e18

0800bb48 <nan>:
 800bb48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb50 <nan+0x8>
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	00000000 	.word	0x00000000
 800bb54:	7ff80000 	.word	0x7ff80000

0800bb58 <__assert_func>:
 800bb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb5a:	4614      	mov	r4, r2
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4b09      	ldr	r3, [pc, #36]	@ (800bb84 <__assert_func+0x2c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4605      	mov	r5, r0
 800bb64:	68d8      	ldr	r0, [r3, #12]
 800bb66:	b954      	cbnz	r4, 800bb7e <__assert_func+0x26>
 800bb68:	4b07      	ldr	r3, [pc, #28]	@ (800bb88 <__assert_func+0x30>)
 800bb6a:	461c      	mov	r4, r3
 800bb6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb70:	9100      	str	r1, [sp, #0]
 800bb72:	462b      	mov	r3, r5
 800bb74:	4905      	ldr	r1, [pc, #20]	@ (800bb8c <__assert_func+0x34>)
 800bb76:	f000 fba7 	bl	800c2c8 <fiprintf>
 800bb7a:	f000 fc3b 	bl	800c3f4 <abort>
 800bb7e:	4b04      	ldr	r3, [pc, #16]	@ (800bb90 <__assert_func+0x38>)
 800bb80:	e7f4      	b.n	800bb6c <__assert_func+0x14>
 800bb82:	bf00      	nop
 800bb84:	20000060 	.word	0x20000060
 800bb88:	0800d805 	.word	0x0800d805
 800bb8c:	0800d7d7 	.word	0x0800d7d7
 800bb90:	0800d7ca 	.word	0x0800d7ca

0800bb94 <_calloc_r>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	fba1 5402 	umull	r5, r4, r1, r2
 800bb9a:	b93c      	cbnz	r4, 800bbac <_calloc_r+0x18>
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7fd fffb 	bl	8009b98 <_malloc_r>
 800bba2:	4606      	mov	r6, r0
 800bba4:	b928      	cbnz	r0, 800bbb2 <_calloc_r+0x1e>
 800bba6:	2600      	movs	r6, #0
 800bba8:	4630      	mov	r0, r6
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	220c      	movs	r2, #12
 800bbae:	6002      	str	r2, [r0, #0]
 800bbb0:	e7f9      	b.n	800bba6 <_calloc_r+0x12>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	f7fd f89a 	bl	8008cee <memset>
 800bbba:	e7f5      	b.n	800bba8 <_calloc_r+0x14>

0800bbbc <rshift>:
 800bbbc:	6903      	ldr	r3, [r0, #16]
 800bbbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbca:	f100 0414 	add.w	r4, r0, #20
 800bbce:	dd45      	ble.n	800bc5c <rshift+0xa0>
 800bbd0:	f011 011f 	ands.w	r1, r1, #31
 800bbd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbdc:	d10c      	bne.n	800bbf8 <rshift+0x3c>
 800bbde:	f100 0710 	add.w	r7, r0, #16
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	42b1      	cmp	r1, r6
 800bbe6:	d334      	bcc.n	800bc52 <rshift+0x96>
 800bbe8:	1a9b      	subs	r3, r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	1eea      	subs	r2, r5, #3
 800bbee:	4296      	cmp	r6, r2
 800bbf0:	bf38      	it	cc
 800bbf2:	2300      	movcc	r3, #0
 800bbf4:	4423      	add	r3, r4
 800bbf6:	e015      	b.n	800bc24 <rshift+0x68>
 800bbf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbfc:	f1c1 0820 	rsb	r8, r1, #32
 800bc00:	40cf      	lsrs	r7, r1
 800bc02:	f105 0e04 	add.w	lr, r5, #4
 800bc06:	46a1      	mov	r9, r4
 800bc08:	4576      	cmp	r6, lr
 800bc0a:	46f4      	mov	ip, lr
 800bc0c:	d815      	bhi.n	800bc3a <rshift+0x7e>
 800bc0e:	1a9a      	subs	r2, r3, r2
 800bc10:	0092      	lsls	r2, r2, #2
 800bc12:	3a04      	subs	r2, #4
 800bc14:	3501      	adds	r5, #1
 800bc16:	42ae      	cmp	r6, r5
 800bc18:	bf38      	it	cc
 800bc1a:	2200      	movcc	r2, #0
 800bc1c:	18a3      	adds	r3, r4, r2
 800bc1e:	50a7      	str	r7, [r4, r2]
 800bc20:	b107      	cbz	r7, 800bc24 <rshift+0x68>
 800bc22:	3304      	adds	r3, #4
 800bc24:	1b1a      	subs	r2, r3, r4
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc2c:	bf08      	it	eq
 800bc2e:	2300      	moveq	r3, #0
 800bc30:	6102      	str	r2, [r0, #16]
 800bc32:	bf08      	it	eq
 800bc34:	6143      	streq	r3, [r0, #20]
 800bc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	f8dc c000 	ldr.w	ip, [ip]
 800bc3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc42:	ea4c 0707 	orr.w	r7, ip, r7
 800bc46:	f849 7b04 	str.w	r7, [r9], #4
 800bc4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc4e:	40cf      	lsrs	r7, r1
 800bc50:	e7da      	b.n	800bc08 <rshift+0x4c>
 800bc52:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc56:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc5a:	e7c3      	b.n	800bbe4 <rshift+0x28>
 800bc5c:	4623      	mov	r3, r4
 800bc5e:	e7e1      	b.n	800bc24 <rshift+0x68>

0800bc60 <__hexdig_fun>:
 800bc60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc64:	2b09      	cmp	r3, #9
 800bc66:	d802      	bhi.n	800bc6e <__hexdig_fun+0xe>
 800bc68:	3820      	subs	r0, #32
 800bc6a:	b2c0      	uxtb	r0, r0
 800bc6c:	4770      	bx	lr
 800bc6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc72:	2b05      	cmp	r3, #5
 800bc74:	d801      	bhi.n	800bc7a <__hexdig_fun+0x1a>
 800bc76:	3847      	subs	r0, #71	@ 0x47
 800bc78:	e7f7      	b.n	800bc6a <__hexdig_fun+0xa>
 800bc7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc7e:	2b05      	cmp	r3, #5
 800bc80:	d801      	bhi.n	800bc86 <__hexdig_fun+0x26>
 800bc82:	3827      	subs	r0, #39	@ 0x27
 800bc84:	e7f1      	b.n	800bc6a <__hexdig_fun+0xa>
 800bc86:	2000      	movs	r0, #0
 800bc88:	4770      	bx	lr
	...

0800bc8c <__gethex>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	b085      	sub	sp, #20
 800bc92:	468a      	mov	sl, r1
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	680b      	ldr	r3, [r1, #0]
 800bc98:	9001      	str	r0, [sp, #4]
 800bc9a:	4690      	mov	r8, r2
 800bc9c:	1c9c      	adds	r4, r3, #2
 800bc9e:	46a1      	mov	r9, r4
 800bca0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bca4:	2830      	cmp	r0, #48	@ 0x30
 800bca6:	d0fa      	beq.n	800bc9e <__gethex+0x12>
 800bca8:	eba9 0303 	sub.w	r3, r9, r3
 800bcac:	f1a3 0b02 	sub.w	fp, r3, #2
 800bcb0:	f7ff ffd6 	bl	800bc60 <__hexdig_fun>
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d168      	bne.n	800bd8c <__gethex+0x100>
 800bcba:	49a0      	ldr	r1, [pc, #640]	@ (800bf3c <__gethex+0x2b0>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	4648      	mov	r0, r9
 800bcc0:	f7ff ff20 	bl	800bb04 <strncmp>
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d167      	bne.n	800bd9a <__gethex+0x10e>
 800bcca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bcce:	4626      	mov	r6, r4
 800bcd0:	f7ff ffc6 	bl	800bc60 <__hexdig_fun>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d062      	beq.n	800bd9e <__gethex+0x112>
 800bcd8:	4623      	mov	r3, r4
 800bcda:	7818      	ldrb	r0, [r3, #0]
 800bcdc:	2830      	cmp	r0, #48	@ 0x30
 800bcde:	4699      	mov	r9, r3
 800bce0:	f103 0301 	add.w	r3, r3, #1
 800bce4:	d0f9      	beq.n	800bcda <__gethex+0x4e>
 800bce6:	f7ff ffbb 	bl	800bc60 <__hexdig_fun>
 800bcea:	fab0 f580 	clz	r5, r0
 800bcee:	096d      	lsrs	r5, r5, #5
 800bcf0:	f04f 0b01 	mov.w	fp, #1
 800bcf4:	464a      	mov	r2, r9
 800bcf6:	4616      	mov	r6, r2
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	7830      	ldrb	r0, [r6, #0]
 800bcfc:	f7ff ffb0 	bl	800bc60 <__hexdig_fun>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1f8      	bne.n	800bcf6 <__gethex+0x6a>
 800bd04:	498d      	ldr	r1, [pc, #564]	@ (800bf3c <__gethex+0x2b0>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fefb 	bl	800bb04 <strncmp>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d13f      	bne.n	800bd92 <__gethex+0x106>
 800bd12:	b944      	cbnz	r4, 800bd26 <__gethex+0x9a>
 800bd14:	1c74      	adds	r4, r6, #1
 800bd16:	4622      	mov	r2, r4
 800bd18:	4616      	mov	r6, r2
 800bd1a:	3201      	adds	r2, #1
 800bd1c:	7830      	ldrb	r0, [r6, #0]
 800bd1e:	f7ff ff9f 	bl	800bc60 <__hexdig_fun>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d1f8      	bne.n	800bd18 <__gethex+0x8c>
 800bd26:	1ba4      	subs	r4, r4, r6
 800bd28:	00a7      	lsls	r7, r4, #2
 800bd2a:	7833      	ldrb	r3, [r6, #0]
 800bd2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd30:	2b50      	cmp	r3, #80	@ 0x50
 800bd32:	d13e      	bne.n	800bdb2 <__gethex+0x126>
 800bd34:	7873      	ldrb	r3, [r6, #1]
 800bd36:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd38:	d033      	beq.n	800bda2 <__gethex+0x116>
 800bd3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd3c:	d034      	beq.n	800bda8 <__gethex+0x11c>
 800bd3e:	1c71      	adds	r1, r6, #1
 800bd40:	2400      	movs	r4, #0
 800bd42:	7808      	ldrb	r0, [r1, #0]
 800bd44:	f7ff ff8c 	bl	800bc60 <__hexdig_fun>
 800bd48:	1e43      	subs	r3, r0, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b18      	cmp	r3, #24
 800bd4e:	d830      	bhi.n	800bdb2 <__gethex+0x126>
 800bd50:	f1a0 0210 	sub.w	r2, r0, #16
 800bd54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd58:	f7ff ff82 	bl	800bc60 <__hexdig_fun>
 800bd5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd60:	fa5f fc8c 	uxtb.w	ip, ip
 800bd64:	f1bc 0f18 	cmp.w	ip, #24
 800bd68:	f04f 030a 	mov.w	r3, #10
 800bd6c:	d91e      	bls.n	800bdac <__gethex+0x120>
 800bd6e:	b104      	cbz	r4, 800bd72 <__gethex+0xe6>
 800bd70:	4252      	negs	r2, r2
 800bd72:	4417      	add	r7, r2
 800bd74:	f8ca 1000 	str.w	r1, [sl]
 800bd78:	b1ed      	cbz	r5, 800bdb6 <__gethex+0x12a>
 800bd7a:	f1bb 0f00 	cmp.w	fp, #0
 800bd7e:	bf0c      	ite	eq
 800bd80:	2506      	moveq	r5, #6
 800bd82:	2500      	movne	r5, #0
 800bd84:	4628      	mov	r0, r5
 800bd86:	b005      	add	sp, #20
 800bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	462c      	mov	r4, r5
 800bd90:	e7b0      	b.n	800bcf4 <__gethex+0x68>
 800bd92:	2c00      	cmp	r4, #0
 800bd94:	d1c7      	bne.n	800bd26 <__gethex+0x9a>
 800bd96:	4627      	mov	r7, r4
 800bd98:	e7c7      	b.n	800bd2a <__gethex+0x9e>
 800bd9a:	464e      	mov	r6, r9
 800bd9c:	462f      	mov	r7, r5
 800bd9e:	2501      	movs	r5, #1
 800bda0:	e7c3      	b.n	800bd2a <__gethex+0x9e>
 800bda2:	2400      	movs	r4, #0
 800bda4:	1cb1      	adds	r1, r6, #2
 800bda6:	e7cc      	b.n	800bd42 <__gethex+0xb6>
 800bda8:	2401      	movs	r4, #1
 800bdaa:	e7fb      	b.n	800bda4 <__gethex+0x118>
 800bdac:	fb03 0002 	mla	r0, r3, r2, r0
 800bdb0:	e7ce      	b.n	800bd50 <__gethex+0xc4>
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	e7de      	b.n	800bd74 <__gethex+0xe8>
 800bdb6:	eba6 0309 	sub.w	r3, r6, r9
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	dc0a      	bgt.n	800bdd8 <__gethex+0x14c>
 800bdc2:	9801      	ldr	r0, [sp, #4]
 800bdc4:	f7fd ff74 	bl	8009cb0 <_Balloc>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	b940      	cbnz	r0, 800bdde <__gethex+0x152>
 800bdcc:	4b5c      	ldr	r3, [pc, #368]	@ (800bf40 <__gethex+0x2b4>)
 800bdce:	4602      	mov	r2, r0
 800bdd0:	21e4      	movs	r1, #228	@ 0xe4
 800bdd2:	485c      	ldr	r0, [pc, #368]	@ (800bf44 <__gethex+0x2b8>)
 800bdd4:	f7ff fec0 	bl	800bb58 <__assert_func>
 800bdd8:	3101      	adds	r1, #1
 800bdda:	105b      	asrs	r3, r3, #1
 800bddc:	e7ef      	b.n	800bdbe <__gethex+0x132>
 800bdde:	f100 0a14 	add.w	sl, r0, #20
 800bde2:	2300      	movs	r3, #0
 800bde4:	4655      	mov	r5, sl
 800bde6:	469b      	mov	fp, r3
 800bde8:	45b1      	cmp	r9, r6
 800bdea:	d337      	bcc.n	800be5c <__gethex+0x1d0>
 800bdec:	f845 bb04 	str.w	fp, [r5], #4
 800bdf0:	eba5 050a 	sub.w	r5, r5, sl
 800bdf4:	10ad      	asrs	r5, r5, #2
 800bdf6:	6125      	str	r5, [r4, #16]
 800bdf8:	4658      	mov	r0, fp
 800bdfa:	f7fe f84b 	bl	8009e94 <__hi0bits>
 800bdfe:	016d      	lsls	r5, r5, #5
 800be00:	f8d8 6000 	ldr.w	r6, [r8]
 800be04:	1a2d      	subs	r5, r5, r0
 800be06:	42b5      	cmp	r5, r6
 800be08:	dd54      	ble.n	800beb4 <__gethex+0x228>
 800be0a:	1bad      	subs	r5, r5, r6
 800be0c:	4629      	mov	r1, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	f7fe fbdf 	bl	800a5d2 <__any_on>
 800be14:	4681      	mov	r9, r0
 800be16:	b178      	cbz	r0, 800be38 <__gethex+0x1ac>
 800be18:	1e6b      	subs	r3, r5, #1
 800be1a:	1159      	asrs	r1, r3, #5
 800be1c:	f003 021f 	and.w	r2, r3, #31
 800be20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be24:	f04f 0901 	mov.w	r9, #1
 800be28:	fa09 f202 	lsl.w	r2, r9, r2
 800be2c:	420a      	tst	r2, r1
 800be2e:	d003      	beq.n	800be38 <__gethex+0x1ac>
 800be30:	454b      	cmp	r3, r9
 800be32:	dc36      	bgt.n	800bea2 <__gethex+0x216>
 800be34:	f04f 0902 	mov.w	r9, #2
 800be38:	4629      	mov	r1, r5
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7ff febe 	bl	800bbbc <rshift>
 800be40:	442f      	add	r7, r5
 800be42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be46:	42bb      	cmp	r3, r7
 800be48:	da42      	bge.n	800bed0 <__gethex+0x244>
 800be4a:	9801      	ldr	r0, [sp, #4]
 800be4c:	4621      	mov	r1, r4
 800be4e:	f7fd ff6f 	bl	8009d30 <_Bfree>
 800be52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be54:	2300      	movs	r3, #0
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	25a3      	movs	r5, #163	@ 0xa3
 800be5a:	e793      	b.n	800bd84 <__gethex+0xf8>
 800be5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be60:	2a2e      	cmp	r2, #46	@ 0x2e
 800be62:	d012      	beq.n	800be8a <__gethex+0x1fe>
 800be64:	2b20      	cmp	r3, #32
 800be66:	d104      	bne.n	800be72 <__gethex+0x1e6>
 800be68:	f845 bb04 	str.w	fp, [r5], #4
 800be6c:	f04f 0b00 	mov.w	fp, #0
 800be70:	465b      	mov	r3, fp
 800be72:	7830      	ldrb	r0, [r6, #0]
 800be74:	9303      	str	r3, [sp, #12]
 800be76:	f7ff fef3 	bl	800bc60 <__hexdig_fun>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	f000 000f 	and.w	r0, r0, #15
 800be80:	4098      	lsls	r0, r3
 800be82:	ea4b 0b00 	orr.w	fp, fp, r0
 800be86:	3304      	adds	r3, #4
 800be88:	e7ae      	b.n	800bde8 <__gethex+0x15c>
 800be8a:	45b1      	cmp	r9, r6
 800be8c:	d8ea      	bhi.n	800be64 <__gethex+0x1d8>
 800be8e:	492b      	ldr	r1, [pc, #172]	@ (800bf3c <__gethex+0x2b0>)
 800be90:	9303      	str	r3, [sp, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	4630      	mov	r0, r6
 800be96:	f7ff fe35 	bl	800bb04 <strncmp>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d1e1      	bne.n	800be64 <__gethex+0x1d8>
 800bea0:	e7a2      	b.n	800bde8 <__gethex+0x15c>
 800bea2:	1ea9      	subs	r1, r5, #2
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7fe fb94 	bl	800a5d2 <__any_on>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d0c2      	beq.n	800be34 <__gethex+0x1a8>
 800beae:	f04f 0903 	mov.w	r9, #3
 800beb2:	e7c1      	b.n	800be38 <__gethex+0x1ac>
 800beb4:	da09      	bge.n	800beca <__gethex+0x23e>
 800beb6:	1b75      	subs	r5, r6, r5
 800beb8:	4621      	mov	r1, r4
 800beba:	9801      	ldr	r0, [sp, #4]
 800bebc:	462a      	mov	r2, r5
 800bebe:	f7fe f94f 	bl	800a160 <__lshift>
 800bec2:	1b7f      	subs	r7, r7, r5
 800bec4:	4604      	mov	r4, r0
 800bec6:	f100 0a14 	add.w	sl, r0, #20
 800beca:	f04f 0900 	mov.w	r9, #0
 800bece:	e7b8      	b.n	800be42 <__gethex+0x1b6>
 800bed0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bed4:	42bd      	cmp	r5, r7
 800bed6:	dd6f      	ble.n	800bfb8 <__gethex+0x32c>
 800bed8:	1bed      	subs	r5, r5, r7
 800beda:	42ae      	cmp	r6, r5
 800bedc:	dc34      	bgt.n	800bf48 <__gethex+0x2bc>
 800bede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d022      	beq.n	800bf2c <__gethex+0x2a0>
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d024      	beq.n	800bf34 <__gethex+0x2a8>
 800beea:	2b01      	cmp	r3, #1
 800beec:	d115      	bne.n	800bf1a <__gethex+0x28e>
 800beee:	42ae      	cmp	r6, r5
 800bef0:	d113      	bne.n	800bf1a <__gethex+0x28e>
 800bef2:	2e01      	cmp	r6, #1
 800bef4:	d10b      	bne.n	800bf0e <__gethex+0x282>
 800bef6:	9a02      	ldr	r2, [sp, #8]
 800bef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	2301      	movs	r3, #1
 800bf00:	6123      	str	r3, [r4, #16]
 800bf02:	f8ca 3000 	str.w	r3, [sl]
 800bf06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf08:	2562      	movs	r5, #98	@ 0x62
 800bf0a:	601c      	str	r4, [r3, #0]
 800bf0c:	e73a      	b.n	800bd84 <__gethex+0xf8>
 800bf0e:	1e71      	subs	r1, r6, #1
 800bf10:	4620      	mov	r0, r4
 800bf12:	f7fe fb5e 	bl	800a5d2 <__any_on>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d1ed      	bne.n	800bef6 <__gethex+0x26a>
 800bf1a:	9801      	ldr	r0, [sp, #4]
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f7fd ff07 	bl	8009d30 <_Bfree>
 800bf22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf24:	2300      	movs	r3, #0
 800bf26:	6013      	str	r3, [r2, #0]
 800bf28:	2550      	movs	r5, #80	@ 0x50
 800bf2a:	e72b      	b.n	800bd84 <__gethex+0xf8>
 800bf2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1f3      	bne.n	800bf1a <__gethex+0x28e>
 800bf32:	e7e0      	b.n	800bef6 <__gethex+0x26a>
 800bf34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1dd      	bne.n	800bef6 <__gethex+0x26a>
 800bf3a:	e7ee      	b.n	800bf1a <__gethex+0x28e>
 800bf3c:	0800d658 	.word	0x0800d658
 800bf40:	0800d4f1 	.word	0x0800d4f1
 800bf44:	0800d806 	.word	0x0800d806
 800bf48:	1e6f      	subs	r7, r5, #1
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d130      	bne.n	800bfb2 <__gethex+0x326>
 800bf50:	b127      	cbz	r7, 800bf5c <__gethex+0x2d0>
 800bf52:	4639      	mov	r1, r7
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7fe fb3c 	bl	800a5d2 <__any_on>
 800bf5a:	4681      	mov	r9, r0
 800bf5c:	117a      	asrs	r2, r7, #5
 800bf5e:	2301      	movs	r3, #1
 800bf60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf64:	f007 071f 	and.w	r7, r7, #31
 800bf68:	40bb      	lsls	r3, r7
 800bf6a:	4213      	tst	r3, r2
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4620      	mov	r0, r4
 800bf70:	bf18      	it	ne
 800bf72:	f049 0902 	orrne.w	r9, r9, #2
 800bf76:	f7ff fe21 	bl	800bbbc <rshift>
 800bf7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf7e:	1b76      	subs	r6, r6, r5
 800bf80:	2502      	movs	r5, #2
 800bf82:	f1b9 0f00 	cmp.w	r9, #0
 800bf86:	d047      	beq.n	800c018 <__gethex+0x38c>
 800bf88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d015      	beq.n	800bfbc <__gethex+0x330>
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d017      	beq.n	800bfc4 <__gethex+0x338>
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d109      	bne.n	800bfac <__gethex+0x320>
 800bf98:	f019 0f02 	tst.w	r9, #2
 800bf9c:	d006      	beq.n	800bfac <__gethex+0x320>
 800bf9e:	f8da 3000 	ldr.w	r3, [sl]
 800bfa2:	ea49 0903 	orr.w	r9, r9, r3
 800bfa6:	f019 0f01 	tst.w	r9, #1
 800bfaa:	d10e      	bne.n	800bfca <__gethex+0x33e>
 800bfac:	f045 0510 	orr.w	r5, r5, #16
 800bfb0:	e032      	b.n	800c018 <__gethex+0x38c>
 800bfb2:	f04f 0901 	mov.w	r9, #1
 800bfb6:	e7d1      	b.n	800bf5c <__gethex+0x2d0>
 800bfb8:	2501      	movs	r5, #1
 800bfba:	e7e2      	b.n	800bf82 <__gethex+0x2f6>
 800bfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbe:	f1c3 0301 	rsb	r3, r3, #1
 800bfc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0f0      	beq.n	800bfac <__gethex+0x320>
 800bfca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfce:	f104 0314 	add.w	r3, r4, #20
 800bfd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bfd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bfda:	f04f 0c00 	mov.w	ip, #0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bfe8:	d01b      	beq.n	800c022 <__gethex+0x396>
 800bfea:	3201      	adds	r2, #1
 800bfec:	6002      	str	r2, [r0, #0]
 800bfee:	2d02      	cmp	r5, #2
 800bff0:	f104 0314 	add.w	r3, r4, #20
 800bff4:	d13c      	bne.n	800c070 <__gethex+0x3e4>
 800bff6:	f8d8 2000 	ldr.w	r2, [r8]
 800bffa:	3a01      	subs	r2, #1
 800bffc:	42b2      	cmp	r2, r6
 800bffe:	d109      	bne.n	800c014 <__gethex+0x388>
 800c000:	1171      	asrs	r1, r6, #5
 800c002:	2201      	movs	r2, #1
 800c004:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c008:	f006 061f 	and.w	r6, r6, #31
 800c00c:	fa02 f606 	lsl.w	r6, r2, r6
 800c010:	421e      	tst	r6, r3
 800c012:	d13a      	bne.n	800c08a <__gethex+0x3fe>
 800c014:	f045 0520 	orr.w	r5, r5, #32
 800c018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c01a:	601c      	str	r4, [r3, #0]
 800c01c:	9b02      	ldr	r3, [sp, #8]
 800c01e:	601f      	str	r7, [r3, #0]
 800c020:	e6b0      	b.n	800bd84 <__gethex+0xf8>
 800c022:	4299      	cmp	r1, r3
 800c024:	f843 cc04 	str.w	ip, [r3, #-4]
 800c028:	d8d9      	bhi.n	800bfde <__gethex+0x352>
 800c02a:	68a3      	ldr	r3, [r4, #8]
 800c02c:	459b      	cmp	fp, r3
 800c02e:	db17      	blt.n	800c060 <__gethex+0x3d4>
 800c030:	6861      	ldr	r1, [r4, #4]
 800c032:	9801      	ldr	r0, [sp, #4]
 800c034:	3101      	adds	r1, #1
 800c036:	f7fd fe3b 	bl	8009cb0 <_Balloc>
 800c03a:	4681      	mov	r9, r0
 800c03c:	b918      	cbnz	r0, 800c046 <__gethex+0x3ba>
 800c03e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a8 <__gethex+0x41c>)
 800c040:	4602      	mov	r2, r0
 800c042:	2184      	movs	r1, #132	@ 0x84
 800c044:	e6c5      	b.n	800bdd2 <__gethex+0x146>
 800c046:	6922      	ldr	r2, [r4, #16]
 800c048:	3202      	adds	r2, #2
 800c04a:	f104 010c 	add.w	r1, r4, #12
 800c04e:	0092      	lsls	r2, r2, #2
 800c050:	300c      	adds	r0, #12
 800c052:	f7fc fecc 	bl	8008dee <memcpy>
 800c056:	4621      	mov	r1, r4
 800c058:	9801      	ldr	r0, [sp, #4]
 800c05a:	f7fd fe69 	bl	8009d30 <_Bfree>
 800c05e:	464c      	mov	r4, r9
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c068:	6122      	str	r2, [r4, #16]
 800c06a:	2201      	movs	r2, #1
 800c06c:	615a      	str	r2, [r3, #20]
 800c06e:	e7be      	b.n	800bfee <__gethex+0x362>
 800c070:	6922      	ldr	r2, [r4, #16]
 800c072:	455a      	cmp	r2, fp
 800c074:	dd0b      	ble.n	800c08e <__gethex+0x402>
 800c076:	2101      	movs	r1, #1
 800c078:	4620      	mov	r0, r4
 800c07a:	f7ff fd9f 	bl	800bbbc <rshift>
 800c07e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c082:	3701      	adds	r7, #1
 800c084:	42bb      	cmp	r3, r7
 800c086:	f6ff aee0 	blt.w	800be4a <__gethex+0x1be>
 800c08a:	2501      	movs	r5, #1
 800c08c:	e7c2      	b.n	800c014 <__gethex+0x388>
 800c08e:	f016 061f 	ands.w	r6, r6, #31
 800c092:	d0fa      	beq.n	800c08a <__gethex+0x3fe>
 800c094:	4453      	add	r3, sl
 800c096:	f1c6 0620 	rsb	r6, r6, #32
 800c09a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c09e:	f7fd fef9 	bl	8009e94 <__hi0bits>
 800c0a2:	42b0      	cmp	r0, r6
 800c0a4:	dbe7      	blt.n	800c076 <__gethex+0x3ea>
 800c0a6:	e7f0      	b.n	800c08a <__gethex+0x3fe>
 800c0a8:	0800d4f1 	.word	0x0800d4f1

0800c0ac <L_shift>:
 800c0ac:	f1c2 0208 	rsb	r2, r2, #8
 800c0b0:	0092      	lsls	r2, r2, #2
 800c0b2:	b570      	push	{r4, r5, r6, lr}
 800c0b4:	f1c2 0620 	rsb	r6, r2, #32
 800c0b8:	6843      	ldr	r3, [r0, #4]
 800c0ba:	6804      	ldr	r4, [r0, #0]
 800c0bc:	fa03 f506 	lsl.w	r5, r3, r6
 800c0c0:	432c      	orrs	r4, r5
 800c0c2:	40d3      	lsrs	r3, r2
 800c0c4:	6004      	str	r4, [r0, #0]
 800c0c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0ca:	4288      	cmp	r0, r1
 800c0cc:	d3f4      	bcc.n	800c0b8 <L_shift+0xc>
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}

0800c0d0 <__match>:
 800c0d0:	b530      	push	{r4, r5, lr}
 800c0d2:	6803      	ldr	r3, [r0, #0]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0da:	b914      	cbnz	r4, 800c0e2 <__match+0x12>
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	2001      	movs	r0, #1
 800c0e0:	bd30      	pop	{r4, r5, pc}
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0ea:	2d19      	cmp	r5, #25
 800c0ec:	bf98      	it	ls
 800c0ee:	3220      	addls	r2, #32
 800c0f0:	42a2      	cmp	r2, r4
 800c0f2:	d0f0      	beq.n	800c0d6 <__match+0x6>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7f3      	b.n	800c0e0 <__match+0x10>

0800c0f8 <__hexnan>:
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	680b      	ldr	r3, [r1, #0]
 800c0fe:	6801      	ldr	r1, [r0, #0]
 800c100:	115e      	asrs	r6, r3, #5
 800c102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c106:	f013 031f 	ands.w	r3, r3, #31
 800c10a:	b087      	sub	sp, #28
 800c10c:	bf18      	it	ne
 800c10e:	3604      	addne	r6, #4
 800c110:	2500      	movs	r5, #0
 800c112:	1f37      	subs	r7, r6, #4
 800c114:	4682      	mov	sl, r0
 800c116:	4690      	mov	r8, r2
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c11e:	46b9      	mov	r9, r7
 800c120:	463c      	mov	r4, r7
 800c122:	9502      	str	r5, [sp, #8]
 800c124:	46ab      	mov	fp, r5
 800c126:	784a      	ldrb	r2, [r1, #1]
 800c128:	1c4b      	adds	r3, r1, #1
 800c12a:	9303      	str	r3, [sp, #12]
 800c12c:	b342      	cbz	r2, 800c180 <__hexnan+0x88>
 800c12e:	4610      	mov	r0, r2
 800c130:	9105      	str	r1, [sp, #20]
 800c132:	9204      	str	r2, [sp, #16]
 800c134:	f7ff fd94 	bl	800bc60 <__hexdig_fun>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d151      	bne.n	800c1e0 <__hexnan+0xe8>
 800c13c:	9a04      	ldr	r2, [sp, #16]
 800c13e:	9905      	ldr	r1, [sp, #20]
 800c140:	2a20      	cmp	r2, #32
 800c142:	d818      	bhi.n	800c176 <__hexnan+0x7e>
 800c144:	9b02      	ldr	r3, [sp, #8]
 800c146:	459b      	cmp	fp, r3
 800c148:	dd13      	ble.n	800c172 <__hexnan+0x7a>
 800c14a:	454c      	cmp	r4, r9
 800c14c:	d206      	bcs.n	800c15c <__hexnan+0x64>
 800c14e:	2d07      	cmp	r5, #7
 800c150:	dc04      	bgt.n	800c15c <__hexnan+0x64>
 800c152:	462a      	mov	r2, r5
 800c154:	4649      	mov	r1, r9
 800c156:	4620      	mov	r0, r4
 800c158:	f7ff ffa8 	bl	800c0ac <L_shift>
 800c15c:	4544      	cmp	r4, r8
 800c15e:	d952      	bls.n	800c206 <__hexnan+0x10e>
 800c160:	2300      	movs	r3, #0
 800c162:	f1a4 0904 	sub.w	r9, r4, #4
 800c166:	f844 3c04 	str.w	r3, [r4, #-4]
 800c16a:	f8cd b008 	str.w	fp, [sp, #8]
 800c16e:	464c      	mov	r4, r9
 800c170:	461d      	mov	r5, r3
 800c172:	9903      	ldr	r1, [sp, #12]
 800c174:	e7d7      	b.n	800c126 <__hexnan+0x2e>
 800c176:	2a29      	cmp	r2, #41	@ 0x29
 800c178:	d157      	bne.n	800c22a <__hexnan+0x132>
 800c17a:	3102      	adds	r1, #2
 800c17c:	f8ca 1000 	str.w	r1, [sl]
 800c180:	f1bb 0f00 	cmp.w	fp, #0
 800c184:	d051      	beq.n	800c22a <__hexnan+0x132>
 800c186:	454c      	cmp	r4, r9
 800c188:	d206      	bcs.n	800c198 <__hexnan+0xa0>
 800c18a:	2d07      	cmp	r5, #7
 800c18c:	dc04      	bgt.n	800c198 <__hexnan+0xa0>
 800c18e:	462a      	mov	r2, r5
 800c190:	4649      	mov	r1, r9
 800c192:	4620      	mov	r0, r4
 800c194:	f7ff ff8a 	bl	800c0ac <L_shift>
 800c198:	4544      	cmp	r4, r8
 800c19a:	d936      	bls.n	800c20a <__hexnan+0x112>
 800c19c:	f1a8 0204 	sub.w	r2, r8, #4
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1aa:	429f      	cmp	r7, r3
 800c1ac:	d2f9      	bcs.n	800c1a2 <__hexnan+0xaa>
 800c1ae:	1b3b      	subs	r3, r7, r4
 800c1b0:	f023 0303 	bic.w	r3, r3, #3
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	3401      	adds	r4, #1
 800c1b8:	3e03      	subs	r6, #3
 800c1ba:	42b4      	cmp	r4, r6
 800c1bc:	bf88      	it	hi
 800c1be:	2304      	movhi	r3, #4
 800c1c0:	4443      	add	r3, r8
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f843 2b04 	str.w	r2, [r3], #4
 800c1c8:	429f      	cmp	r7, r3
 800c1ca:	d2fb      	bcs.n	800c1c4 <__hexnan+0xcc>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	b91b      	cbnz	r3, 800c1d8 <__hexnan+0xe0>
 800c1d0:	4547      	cmp	r7, r8
 800c1d2:	d128      	bne.n	800c226 <__hexnan+0x12e>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	603b      	str	r3, [r7, #0]
 800c1d8:	2005      	movs	r0, #5
 800c1da:	b007      	add	sp, #28
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	2d08      	cmp	r5, #8
 800c1e4:	f10b 0b01 	add.w	fp, fp, #1
 800c1e8:	dd06      	ble.n	800c1f8 <__hexnan+0x100>
 800c1ea:	4544      	cmp	r4, r8
 800c1ec:	d9c1      	bls.n	800c172 <__hexnan+0x7a>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1f4:	2501      	movs	r5, #1
 800c1f6:	3c04      	subs	r4, #4
 800c1f8:	6822      	ldr	r2, [r4, #0]
 800c1fa:	f000 000f 	and.w	r0, r0, #15
 800c1fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c202:	6020      	str	r0, [r4, #0]
 800c204:	e7b5      	b.n	800c172 <__hexnan+0x7a>
 800c206:	2508      	movs	r5, #8
 800c208:	e7b3      	b.n	800c172 <__hexnan+0x7a>
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d0dd      	beq.n	800c1cc <__hexnan+0xd4>
 800c210:	f1c3 0320 	rsb	r3, r3, #32
 800c214:	f04f 32ff 	mov.w	r2, #4294967295
 800c218:	40da      	lsrs	r2, r3
 800c21a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c21e:	4013      	ands	r3, r2
 800c220:	f846 3c04 	str.w	r3, [r6, #-4]
 800c224:	e7d2      	b.n	800c1cc <__hexnan+0xd4>
 800c226:	3f04      	subs	r7, #4
 800c228:	e7d0      	b.n	800c1cc <__hexnan+0xd4>
 800c22a:	2004      	movs	r0, #4
 800c22c:	e7d5      	b.n	800c1da <__hexnan+0xe2>

0800c22e <__ascii_mbtowc>:
 800c22e:	b082      	sub	sp, #8
 800c230:	b901      	cbnz	r1, 800c234 <__ascii_mbtowc+0x6>
 800c232:	a901      	add	r1, sp, #4
 800c234:	b142      	cbz	r2, 800c248 <__ascii_mbtowc+0x1a>
 800c236:	b14b      	cbz	r3, 800c24c <__ascii_mbtowc+0x1e>
 800c238:	7813      	ldrb	r3, [r2, #0]
 800c23a:	600b      	str	r3, [r1, #0]
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	1e10      	subs	r0, r2, #0
 800c240:	bf18      	it	ne
 800c242:	2001      	movne	r0, #1
 800c244:	b002      	add	sp, #8
 800c246:	4770      	bx	lr
 800c248:	4610      	mov	r0, r2
 800c24a:	e7fb      	b.n	800c244 <__ascii_mbtowc+0x16>
 800c24c:	f06f 0001 	mvn.w	r0, #1
 800c250:	e7f8      	b.n	800c244 <__ascii_mbtowc+0x16>

0800c252 <_realloc_r>:
 800c252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c256:	4680      	mov	r8, r0
 800c258:	4615      	mov	r5, r2
 800c25a:	460c      	mov	r4, r1
 800c25c:	b921      	cbnz	r1, 800c268 <_realloc_r+0x16>
 800c25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c262:	4611      	mov	r1, r2
 800c264:	f7fd bc98 	b.w	8009b98 <_malloc_r>
 800c268:	b92a      	cbnz	r2, 800c276 <_realloc_r+0x24>
 800c26a:	f7fd fc21 	bl	8009ab0 <_free_r>
 800c26e:	2400      	movs	r4, #0
 800c270:	4620      	mov	r0, r4
 800c272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c276:	f000 f8c4 	bl	800c402 <_malloc_usable_size_r>
 800c27a:	4285      	cmp	r5, r0
 800c27c:	4606      	mov	r6, r0
 800c27e:	d802      	bhi.n	800c286 <_realloc_r+0x34>
 800c280:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c284:	d8f4      	bhi.n	800c270 <_realloc_r+0x1e>
 800c286:	4629      	mov	r1, r5
 800c288:	4640      	mov	r0, r8
 800c28a:	f7fd fc85 	bl	8009b98 <_malloc_r>
 800c28e:	4607      	mov	r7, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	d0ec      	beq.n	800c26e <_realloc_r+0x1c>
 800c294:	42b5      	cmp	r5, r6
 800c296:	462a      	mov	r2, r5
 800c298:	4621      	mov	r1, r4
 800c29a:	bf28      	it	cs
 800c29c:	4632      	movcs	r2, r6
 800c29e:	f7fc fda6 	bl	8008dee <memcpy>
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	f7fd fc03 	bl	8009ab0 <_free_r>
 800c2aa:	463c      	mov	r4, r7
 800c2ac:	e7e0      	b.n	800c270 <_realloc_r+0x1e>

0800c2ae <__ascii_wctomb>:
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	b141      	cbz	r1, 800c2c6 <__ascii_wctomb+0x18>
 800c2b4:	2aff      	cmp	r2, #255	@ 0xff
 800c2b6:	d904      	bls.n	800c2c2 <__ascii_wctomb+0x14>
 800c2b8:	228a      	movs	r2, #138	@ 0x8a
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	4770      	bx	lr
 800c2c2:	700a      	strb	r2, [r1, #0]
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	4770      	bx	lr

0800c2c8 <fiprintf>:
 800c2c8:	b40e      	push	{r1, r2, r3}
 800c2ca:	b503      	push	{r0, r1, lr}
 800c2cc:	4601      	mov	r1, r0
 800c2ce:	ab03      	add	r3, sp, #12
 800c2d0:	4805      	ldr	r0, [pc, #20]	@ (800c2e8 <fiprintf+0x20>)
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	6800      	ldr	r0, [r0, #0]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f7ff f9a1 	bl	800b620 <_vfiprintf_r>
 800c2de:	b002      	add	sp, #8
 800c2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e4:	b003      	add	sp, #12
 800c2e6:	4770      	bx	lr
 800c2e8:	20000060 	.word	0x20000060

0800c2ec <__swhatbuf_r>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	b096      	sub	sp, #88	@ 0x58
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	461e      	mov	r6, r3
 800c2fc:	da0d      	bge.n	800c31a <__swhatbuf_r+0x2e>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c304:	f04f 0100 	mov.w	r1, #0
 800c308:	bf14      	ite	ne
 800c30a:	2340      	movne	r3, #64	@ 0x40
 800c30c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c310:	2000      	movs	r0, #0
 800c312:	6031      	str	r1, [r6, #0]
 800c314:	602b      	str	r3, [r5, #0]
 800c316:	b016      	add	sp, #88	@ 0x58
 800c318:	bd70      	pop	{r4, r5, r6, pc}
 800c31a:	466a      	mov	r2, sp
 800c31c:	f000 f848 	bl	800c3b0 <_fstat_r>
 800c320:	2800      	cmp	r0, #0
 800c322:	dbec      	blt.n	800c2fe <__swhatbuf_r+0x12>
 800c324:	9901      	ldr	r1, [sp, #4]
 800c326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c32a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c32e:	4259      	negs	r1, r3
 800c330:	4159      	adcs	r1, r3
 800c332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c336:	e7eb      	b.n	800c310 <__swhatbuf_r+0x24>

0800c338 <__smakebuf_r>:
 800c338:	898b      	ldrh	r3, [r1, #12]
 800c33a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c33c:	079d      	lsls	r5, r3, #30
 800c33e:	4606      	mov	r6, r0
 800c340:	460c      	mov	r4, r1
 800c342:	d507      	bpl.n	800c354 <__smakebuf_r+0x1c>
 800c344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	2301      	movs	r3, #1
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	b003      	add	sp, #12
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c354:	ab01      	add	r3, sp, #4
 800c356:	466a      	mov	r2, sp
 800c358:	f7ff ffc8 	bl	800c2ec <__swhatbuf_r>
 800c35c:	9f00      	ldr	r7, [sp, #0]
 800c35e:	4605      	mov	r5, r0
 800c360:	4639      	mov	r1, r7
 800c362:	4630      	mov	r0, r6
 800c364:	f7fd fc18 	bl	8009b98 <_malloc_r>
 800c368:	b948      	cbnz	r0, 800c37e <__smakebuf_r+0x46>
 800c36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36e:	059a      	lsls	r2, r3, #22
 800c370:	d4ee      	bmi.n	800c350 <__smakebuf_r+0x18>
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	f043 0302 	orr.w	r3, r3, #2
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	e7e2      	b.n	800c344 <__smakebuf_r+0xc>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	6020      	str	r0, [r4, #0]
 800c382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c38e:	b15b      	cbz	r3, 800c3a8 <__smakebuf_r+0x70>
 800c390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c394:	4630      	mov	r0, r6
 800c396:	f000 f81d 	bl	800c3d4 <_isatty_r>
 800c39a:	b128      	cbz	r0, 800c3a8 <__smakebuf_r+0x70>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f023 0303 	bic.w	r3, r3, #3
 800c3a2:	f043 0301 	orr.w	r3, r3, #1
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	431d      	orrs	r5, r3
 800c3ac:	81a5      	strh	r5, [r4, #12]
 800c3ae:	e7cf      	b.n	800c350 <__smakebuf_r+0x18>

0800c3b0 <_fstat_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	@ (800c3d0 <_fstat_r+0x20>)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	602b      	str	r3, [r5, #0]
 800c3be:	f7f5 fd0f 	bl	8001de0 <_fstat>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d102      	bne.n	800c3cc <_fstat_r+0x1c>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	b103      	cbz	r3, 800c3cc <_fstat_r+0x1c>
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20004e18 	.word	0x20004e18

0800c3d4 <_isatty_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d06      	ldr	r5, [pc, #24]	@ (800c3f0 <_isatty_r+0x1c>)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	602b      	str	r3, [r5, #0]
 800c3e0:	f7f5 fd0e 	bl	8001e00 <_isatty>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_isatty_r+0x1a>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_isatty_r+0x1a>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	20004e18 	.word	0x20004e18

0800c3f4 <abort>:
 800c3f4:	b508      	push	{r3, lr}
 800c3f6:	2006      	movs	r0, #6
 800c3f8:	f000 f834 	bl	800c464 <raise>
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	f7f5 fc9f 	bl	8001d40 <_exit>

0800c402 <_malloc_usable_size_r>:
 800c402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c406:	1f18      	subs	r0, r3, #4
 800c408:	2b00      	cmp	r3, #0
 800c40a:	bfbc      	itt	lt
 800c40c:	580b      	ldrlt	r3, [r1, r0]
 800c40e:	18c0      	addlt	r0, r0, r3
 800c410:	4770      	bx	lr

0800c412 <_raise_r>:
 800c412:	291f      	cmp	r1, #31
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4605      	mov	r5, r0
 800c418:	460c      	mov	r4, r1
 800c41a:	d904      	bls.n	800c426 <_raise_r+0x14>
 800c41c:	2316      	movs	r3, #22
 800c41e:	6003      	str	r3, [r0, #0]
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c428:	b112      	cbz	r2, 800c430 <_raise_r+0x1e>
 800c42a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c42e:	b94b      	cbnz	r3, 800c444 <_raise_r+0x32>
 800c430:	4628      	mov	r0, r5
 800c432:	f000 f831 	bl	800c498 <_getpid_r>
 800c436:	4622      	mov	r2, r4
 800c438:	4601      	mov	r1, r0
 800c43a:	4628      	mov	r0, r5
 800c43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c440:	f000 b818 	b.w	800c474 <_kill_r>
 800c444:	2b01      	cmp	r3, #1
 800c446:	d00a      	beq.n	800c45e <_raise_r+0x4c>
 800c448:	1c59      	adds	r1, r3, #1
 800c44a:	d103      	bne.n	800c454 <_raise_r+0x42>
 800c44c:	2316      	movs	r3, #22
 800c44e:	6003      	str	r3, [r0, #0]
 800c450:	2001      	movs	r0, #1
 800c452:	e7e7      	b.n	800c424 <_raise_r+0x12>
 800c454:	2100      	movs	r1, #0
 800c456:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c45a:	4620      	mov	r0, r4
 800c45c:	4798      	blx	r3
 800c45e:	2000      	movs	r0, #0
 800c460:	e7e0      	b.n	800c424 <_raise_r+0x12>
	...

0800c464 <raise>:
 800c464:	4b02      	ldr	r3, [pc, #8]	@ (800c470 <raise+0xc>)
 800c466:	4601      	mov	r1, r0
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f7ff bfd2 	b.w	800c412 <_raise_r>
 800c46e:	bf00      	nop
 800c470:	20000060 	.word	0x20000060

0800c474 <_kill_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4d07      	ldr	r5, [pc, #28]	@ (800c494 <_kill_r+0x20>)
 800c478:	2300      	movs	r3, #0
 800c47a:	4604      	mov	r4, r0
 800c47c:	4608      	mov	r0, r1
 800c47e:	4611      	mov	r1, r2
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	f7f5 fc4d 	bl	8001d20 <_kill>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d102      	bne.n	800c490 <_kill_r+0x1c>
 800c48a:	682b      	ldr	r3, [r5, #0]
 800c48c:	b103      	cbz	r3, 800c490 <_kill_r+0x1c>
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	bf00      	nop
 800c494:	20004e18 	.word	0x20004e18

0800c498 <_getpid_r>:
 800c498:	f7f5 bc3a 	b.w	8001d10 <_getpid>

0800c49c <pow>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	ed2d 8b02 	vpush	{d8}
 800c4a2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4a6:	eef0 8a60 	vmov.f32	s17, s1
 800c4aa:	ec55 4b11 	vmov	r4, r5, d1
 800c4ae:	f000 f873 	bl	800c598 <__ieee754_pow>
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	ec57 6b10 	vmov	r6, r7, d0
 800c4be:	f7f4 fb55 	bl	8000b6c <__aeabi_dcmpun>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d13b      	bne.n	800c53e <pow+0xa2>
 800c4c6:	ec51 0b18 	vmov	r0, r1, d8
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f7f4 fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 800c4d2:	b1b8      	cbz	r0, 800c504 <pow+0x68>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f4 fb14 	bl	8000b08 <__aeabi_dcmpeq>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d146      	bne.n	800c572 <pow+0xd6>
 800c4e4:	ec45 4b10 	vmov	d0, r4, r5
 800c4e8:	f000 f848 	bl	800c57c <finite>
 800c4ec:	b338      	cbz	r0, 800c53e <pow+0xa2>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7f4 fb11 	bl	8000b1c <__aeabi_dcmplt>
 800c4fa:	b300      	cbz	r0, 800c53e <pow+0xa2>
 800c4fc:	f7fc fc4a 	bl	8008d94 <__errno>
 800c500:	2322      	movs	r3, #34	@ 0x22
 800c502:	e01b      	b.n	800c53c <pow+0xa0>
 800c504:	ec47 6b10 	vmov	d0, r6, r7
 800c508:	f000 f838 	bl	800c57c <finite>
 800c50c:	b9e0      	cbnz	r0, 800c548 <pow+0xac>
 800c50e:	eeb0 0a48 	vmov.f32	s0, s16
 800c512:	eef0 0a68 	vmov.f32	s1, s17
 800c516:	f000 f831 	bl	800c57c <finite>
 800c51a:	b1a8      	cbz	r0, 800c548 <pow+0xac>
 800c51c:	ec45 4b10 	vmov	d0, r4, r5
 800c520:	f000 f82c 	bl	800c57c <finite>
 800c524:	b180      	cbz	r0, 800c548 <pow+0xac>
 800c526:	4632      	mov	r2, r6
 800c528:	463b      	mov	r3, r7
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f4 fb1d 	bl	8000b6c <__aeabi_dcmpun>
 800c532:	2800      	cmp	r0, #0
 800c534:	d0e2      	beq.n	800c4fc <pow+0x60>
 800c536:	f7fc fc2d 	bl	8008d94 <__errno>
 800c53a:	2321      	movs	r3, #33	@ 0x21
 800c53c:	6003      	str	r3, [r0, #0]
 800c53e:	ecbd 8b02 	vpop	{d8}
 800c542:	ec47 6b10 	vmov	d0, r6, r7
 800c546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c548:	2200      	movs	r2, #0
 800c54a:	2300      	movs	r3, #0
 800c54c:	4630      	mov	r0, r6
 800c54e:	4639      	mov	r1, r7
 800c550:	f7f4 fada 	bl	8000b08 <__aeabi_dcmpeq>
 800c554:	2800      	cmp	r0, #0
 800c556:	d0f2      	beq.n	800c53e <pow+0xa2>
 800c558:	eeb0 0a48 	vmov.f32	s0, s16
 800c55c:	eef0 0a68 	vmov.f32	s1, s17
 800c560:	f000 f80c 	bl	800c57c <finite>
 800c564:	2800      	cmp	r0, #0
 800c566:	d0ea      	beq.n	800c53e <pow+0xa2>
 800c568:	ec45 4b10 	vmov	d0, r4, r5
 800c56c:	f000 f806 	bl	800c57c <finite>
 800c570:	e7c3      	b.n	800c4fa <pow+0x5e>
 800c572:	4f01      	ldr	r7, [pc, #4]	@ (800c578 <pow+0xdc>)
 800c574:	2600      	movs	r6, #0
 800c576:	e7e2      	b.n	800c53e <pow+0xa2>
 800c578:	3ff00000 	.word	0x3ff00000

0800c57c <finite>:
 800c57c:	b082      	sub	sp, #8
 800c57e:	ed8d 0b00 	vstr	d0, [sp]
 800c582:	9801      	ldr	r0, [sp, #4]
 800c584:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c588:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c58c:	0fc0      	lsrs	r0, r0, #31
 800c58e:	b002      	add	sp, #8
 800c590:	4770      	bx	lr
 800c592:	0000      	movs	r0, r0
 800c594:	0000      	movs	r0, r0
	...

0800c598 <__ieee754_pow>:
 800c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	b091      	sub	sp, #68	@ 0x44
 800c59e:	ed8d 1b00 	vstr	d1, [sp]
 800c5a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c5a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c5aa:	ea5a 0001 	orrs.w	r0, sl, r1
 800c5ae:	ec57 6b10 	vmov	r6, r7, d0
 800c5b2:	d113      	bne.n	800c5dc <__ieee754_pow+0x44>
 800c5b4:	19b3      	adds	r3, r6, r6
 800c5b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c5ba:	4152      	adcs	r2, r2
 800c5bc:	4298      	cmp	r0, r3
 800c5be:	4b98      	ldr	r3, [pc, #608]	@ (800c820 <__ieee754_pow+0x288>)
 800c5c0:	4193      	sbcs	r3, r2
 800c5c2:	f080 84ea 	bcs.w	800cf9a <__ieee754_pow+0xa02>
 800c5c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f3 fe7d 	bl	80002cc <__adddf3>
 800c5d2:	ec41 0b10 	vmov	d0, r0, r1
 800c5d6:	b011      	add	sp, #68	@ 0x44
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	4a91      	ldr	r2, [pc, #580]	@ (800c824 <__ieee754_pow+0x28c>)
 800c5de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c5e2:	4590      	cmp	r8, r2
 800c5e4:	463d      	mov	r5, r7
 800c5e6:	4633      	mov	r3, r6
 800c5e8:	d806      	bhi.n	800c5f8 <__ieee754_pow+0x60>
 800c5ea:	d101      	bne.n	800c5f0 <__ieee754_pow+0x58>
 800c5ec:	2e00      	cmp	r6, #0
 800c5ee:	d1ea      	bne.n	800c5c6 <__ieee754_pow+0x2e>
 800c5f0:	4592      	cmp	sl, r2
 800c5f2:	d801      	bhi.n	800c5f8 <__ieee754_pow+0x60>
 800c5f4:	d10e      	bne.n	800c614 <__ieee754_pow+0x7c>
 800c5f6:	b169      	cbz	r1, 800c614 <__ieee754_pow+0x7c>
 800c5f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c5fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c600:	431d      	orrs	r5, r3
 800c602:	d1e0      	bne.n	800c5c6 <__ieee754_pow+0x2e>
 800c604:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c608:	18db      	adds	r3, r3, r3
 800c60a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c60e:	4152      	adcs	r2, r2
 800c610:	429d      	cmp	r5, r3
 800c612:	e7d4      	b.n	800c5be <__ieee754_pow+0x26>
 800c614:	2d00      	cmp	r5, #0
 800c616:	46c3      	mov	fp, r8
 800c618:	da3a      	bge.n	800c690 <__ieee754_pow+0xf8>
 800c61a:	4a83      	ldr	r2, [pc, #524]	@ (800c828 <__ieee754_pow+0x290>)
 800c61c:	4592      	cmp	sl, r2
 800c61e:	d84d      	bhi.n	800c6bc <__ieee754_pow+0x124>
 800c620:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c624:	4592      	cmp	sl, r2
 800c626:	f240 84c7 	bls.w	800cfb8 <__ieee754_pow+0xa20>
 800c62a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c62e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c632:	2a14      	cmp	r2, #20
 800c634:	dd0f      	ble.n	800c656 <__ieee754_pow+0xbe>
 800c636:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c63a:	fa21 f402 	lsr.w	r4, r1, r2
 800c63e:	fa04 f202 	lsl.w	r2, r4, r2
 800c642:	428a      	cmp	r2, r1
 800c644:	f040 84b8 	bne.w	800cfb8 <__ieee754_pow+0xa20>
 800c648:	f004 0401 	and.w	r4, r4, #1
 800c64c:	f1c4 0402 	rsb	r4, r4, #2
 800c650:	2900      	cmp	r1, #0
 800c652:	d158      	bne.n	800c706 <__ieee754_pow+0x16e>
 800c654:	e00e      	b.n	800c674 <__ieee754_pow+0xdc>
 800c656:	2900      	cmp	r1, #0
 800c658:	d154      	bne.n	800c704 <__ieee754_pow+0x16c>
 800c65a:	f1c2 0214 	rsb	r2, r2, #20
 800c65e:	fa4a f402 	asr.w	r4, sl, r2
 800c662:	fa04 f202 	lsl.w	r2, r4, r2
 800c666:	4552      	cmp	r2, sl
 800c668:	f040 84a3 	bne.w	800cfb2 <__ieee754_pow+0xa1a>
 800c66c:	f004 0401 	and.w	r4, r4, #1
 800c670:	f1c4 0402 	rsb	r4, r4, #2
 800c674:	4a6d      	ldr	r2, [pc, #436]	@ (800c82c <__ieee754_pow+0x294>)
 800c676:	4592      	cmp	sl, r2
 800c678:	d12e      	bne.n	800c6d8 <__ieee754_pow+0x140>
 800c67a:	f1b9 0f00 	cmp.w	r9, #0
 800c67e:	f280 8494 	bge.w	800cfaa <__ieee754_pow+0xa12>
 800c682:	496a      	ldr	r1, [pc, #424]	@ (800c82c <__ieee754_pow+0x294>)
 800c684:	4632      	mov	r2, r6
 800c686:	463b      	mov	r3, r7
 800c688:	2000      	movs	r0, #0
 800c68a:	f7f4 f8ff 	bl	800088c <__aeabi_ddiv>
 800c68e:	e7a0      	b.n	800c5d2 <__ieee754_pow+0x3a>
 800c690:	2400      	movs	r4, #0
 800c692:	bbc1      	cbnz	r1, 800c706 <__ieee754_pow+0x16e>
 800c694:	4a63      	ldr	r2, [pc, #396]	@ (800c824 <__ieee754_pow+0x28c>)
 800c696:	4592      	cmp	sl, r2
 800c698:	d1ec      	bne.n	800c674 <__ieee754_pow+0xdc>
 800c69a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c69e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	f000 8479 	beq.w	800cf9a <__ieee754_pow+0xa02>
 800c6a8:	4b61      	ldr	r3, [pc, #388]	@ (800c830 <__ieee754_pow+0x298>)
 800c6aa:	4598      	cmp	r8, r3
 800c6ac:	d908      	bls.n	800c6c0 <__ieee754_pow+0x128>
 800c6ae:	f1b9 0f00 	cmp.w	r9, #0
 800c6b2:	f2c0 8476 	blt.w	800cfa2 <__ieee754_pow+0xa0a>
 800c6b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6ba:	e78a      	b.n	800c5d2 <__ieee754_pow+0x3a>
 800c6bc:	2402      	movs	r4, #2
 800c6be:	e7e8      	b.n	800c692 <__ieee754_pow+0xfa>
 800c6c0:	f1b9 0f00 	cmp.w	r9, #0
 800c6c4:	f04f 0000 	mov.w	r0, #0
 800c6c8:	f04f 0100 	mov.w	r1, #0
 800c6cc:	da81      	bge.n	800c5d2 <__ieee754_pow+0x3a>
 800c6ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c6d6:	e77c      	b.n	800c5d2 <__ieee754_pow+0x3a>
 800c6d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c6dc:	d106      	bne.n	800c6ec <__ieee754_pow+0x154>
 800c6de:	4632      	mov	r2, r6
 800c6e0:	463b      	mov	r3, r7
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f3 ffa7 	bl	8000638 <__aeabi_dmul>
 800c6ea:	e772      	b.n	800c5d2 <__ieee754_pow+0x3a>
 800c6ec:	4a51      	ldr	r2, [pc, #324]	@ (800c834 <__ieee754_pow+0x29c>)
 800c6ee:	4591      	cmp	r9, r2
 800c6f0:	d109      	bne.n	800c706 <__ieee754_pow+0x16e>
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	db07      	blt.n	800c706 <__ieee754_pow+0x16e>
 800c6f6:	ec47 6b10 	vmov	d0, r6, r7
 800c6fa:	b011      	add	sp, #68	@ 0x44
 800c6fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	f000 bd52 	b.w	800d1a8 <__ieee754_sqrt>
 800c704:	2400      	movs	r4, #0
 800c706:	ec47 6b10 	vmov	d0, r6, r7
 800c70a:	9302      	str	r3, [sp, #8]
 800c70c:	f000 fc88 	bl	800d020 <fabs>
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	ec51 0b10 	vmov	r0, r1, d0
 800c716:	bb53      	cbnz	r3, 800c76e <__ieee754_pow+0x1d6>
 800c718:	4b44      	ldr	r3, [pc, #272]	@ (800c82c <__ieee754_pow+0x294>)
 800c71a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c71e:	429a      	cmp	r2, r3
 800c720:	d002      	beq.n	800c728 <__ieee754_pow+0x190>
 800c722:	f1b8 0f00 	cmp.w	r8, #0
 800c726:	d122      	bne.n	800c76e <__ieee754_pow+0x1d6>
 800c728:	f1b9 0f00 	cmp.w	r9, #0
 800c72c:	da05      	bge.n	800c73a <__ieee754_pow+0x1a2>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	2000      	movs	r0, #0
 800c734:	493d      	ldr	r1, [pc, #244]	@ (800c82c <__ieee754_pow+0x294>)
 800c736:	f7f4 f8a9 	bl	800088c <__aeabi_ddiv>
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	f6bf af49 	bge.w	800c5d2 <__ieee754_pow+0x3a>
 800c740:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c744:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c748:	ea58 0804 	orrs.w	r8, r8, r4
 800c74c:	d108      	bne.n	800c760 <__ieee754_pow+0x1c8>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f3 fdb7 	bl	80002c8 <__aeabi_dsub>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	e794      	b.n	800c68a <__ieee754_pow+0xf2>
 800c760:	2c01      	cmp	r4, #1
 800c762:	f47f af36 	bne.w	800c5d2 <__ieee754_pow+0x3a>
 800c766:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c76a:	4619      	mov	r1, r3
 800c76c:	e731      	b.n	800c5d2 <__ieee754_pow+0x3a>
 800c76e:	0feb      	lsrs	r3, r5, #31
 800c770:	3b01      	subs	r3, #1
 800c772:	ea53 0204 	orrs.w	r2, r3, r4
 800c776:	d102      	bne.n	800c77e <__ieee754_pow+0x1e6>
 800c778:	4632      	mov	r2, r6
 800c77a:	463b      	mov	r3, r7
 800c77c:	e7e9      	b.n	800c752 <__ieee754_pow+0x1ba>
 800c77e:	3c01      	subs	r4, #1
 800c780:	431c      	orrs	r4, r3
 800c782:	d016      	beq.n	800c7b2 <__ieee754_pow+0x21a>
 800c784:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c810 <__ieee754_pow+0x278>
 800c788:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c78c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c790:	f240 8112 	bls.w	800c9b8 <__ieee754_pow+0x420>
 800c794:	4b28      	ldr	r3, [pc, #160]	@ (800c838 <__ieee754_pow+0x2a0>)
 800c796:	459a      	cmp	sl, r3
 800c798:	4b25      	ldr	r3, [pc, #148]	@ (800c830 <__ieee754_pow+0x298>)
 800c79a:	d916      	bls.n	800c7ca <__ieee754_pow+0x232>
 800c79c:	4598      	cmp	r8, r3
 800c79e:	d80b      	bhi.n	800c7b8 <__ieee754_pow+0x220>
 800c7a0:	f1b9 0f00 	cmp.w	r9, #0
 800c7a4:	da0b      	bge.n	800c7be <__ieee754_pow+0x226>
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	b011      	add	sp, #68	@ 0x44
 800c7aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ae:	f000 bcf3 	b.w	800d198 <__math_oflow>
 800c7b2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c818 <__ieee754_pow+0x280>
 800c7b6:	e7e7      	b.n	800c788 <__ieee754_pow+0x1f0>
 800c7b8:	f1b9 0f00 	cmp.w	r9, #0
 800c7bc:	dcf3      	bgt.n	800c7a6 <__ieee754_pow+0x20e>
 800c7be:	2000      	movs	r0, #0
 800c7c0:	b011      	add	sp, #68	@ 0x44
 800c7c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c6:	f000 bcdf 	b.w	800d188 <__math_uflow>
 800c7ca:	4598      	cmp	r8, r3
 800c7cc:	d20c      	bcs.n	800c7e8 <__ieee754_pow+0x250>
 800c7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f7f4 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 800c7da:	3800      	subs	r0, #0
 800c7dc:	bf18      	it	ne
 800c7de:	2001      	movne	r0, #1
 800c7e0:	f1b9 0f00 	cmp.w	r9, #0
 800c7e4:	daec      	bge.n	800c7c0 <__ieee754_pow+0x228>
 800c7e6:	e7df      	b.n	800c7a8 <__ieee754_pow+0x210>
 800c7e8:	4b10      	ldr	r3, [pc, #64]	@ (800c82c <__ieee754_pow+0x294>)
 800c7ea:	4598      	cmp	r8, r3
 800c7ec:	f04f 0200 	mov.w	r2, #0
 800c7f0:	d924      	bls.n	800c83c <__ieee754_pow+0x2a4>
 800c7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f7f4 f990 	bl	8000b1c <__aeabi_dcmplt>
 800c7fc:	3800      	subs	r0, #0
 800c7fe:	bf18      	it	ne
 800c800:	2001      	movne	r0, #1
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	dccf      	bgt.n	800c7a8 <__ieee754_pow+0x210>
 800c808:	e7da      	b.n	800c7c0 <__ieee754_pow+0x228>
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w
 800c810:	00000000 	.word	0x00000000
 800c814:	3ff00000 	.word	0x3ff00000
 800c818:	00000000 	.word	0x00000000
 800c81c:	bff00000 	.word	0xbff00000
 800c820:	fff00000 	.word	0xfff00000
 800c824:	7ff00000 	.word	0x7ff00000
 800c828:	433fffff 	.word	0x433fffff
 800c82c:	3ff00000 	.word	0x3ff00000
 800c830:	3fefffff 	.word	0x3fefffff
 800c834:	3fe00000 	.word	0x3fe00000
 800c838:	43f00000 	.word	0x43f00000
 800c83c:	4b5a      	ldr	r3, [pc, #360]	@ (800c9a8 <__ieee754_pow+0x410>)
 800c83e:	f7f3 fd43 	bl	80002c8 <__aeabi_dsub>
 800c842:	a351      	add	r3, pc, #324	@ (adr r3, 800c988 <__ieee754_pow+0x3f0>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	4604      	mov	r4, r0
 800c84a:	460d      	mov	r5, r1
 800c84c:	f7f3 fef4 	bl	8000638 <__aeabi_dmul>
 800c850:	a34f      	add	r3, pc, #316	@ (adr r3, 800c990 <__ieee754_pow+0x3f8>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	4606      	mov	r6, r0
 800c858:	460f      	mov	r7, r1
 800c85a:	4620      	mov	r0, r4
 800c85c:	4629      	mov	r1, r5
 800c85e:	f7f3 feeb 	bl	8000638 <__aeabi_dmul>
 800c862:	4b52      	ldr	r3, [pc, #328]	@ (800c9ac <__ieee754_pow+0x414>)
 800c864:	4682      	mov	sl, r0
 800c866:	468b      	mov	fp, r1
 800c868:	2200      	movs	r2, #0
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f3 fee3 	bl	8000638 <__aeabi_dmul>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	a148      	add	r1, pc, #288	@ (adr r1, 800c998 <__ieee754_pow+0x400>)
 800c878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c87c:	f7f3 fd24 	bl	80002c8 <__aeabi_dsub>
 800c880:	4622      	mov	r2, r4
 800c882:	462b      	mov	r3, r5
 800c884:	f7f3 fed8 	bl	8000638 <__aeabi_dmul>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	2000      	movs	r0, #0
 800c88e:	4948      	ldr	r1, [pc, #288]	@ (800c9b0 <__ieee754_pow+0x418>)
 800c890:	f7f3 fd1a 	bl	80002c8 <__aeabi_dsub>
 800c894:	4622      	mov	r2, r4
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	462b      	mov	r3, r5
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 feca 	bl	8000638 <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 fec4 	bl	8000638 <__aeabi_dmul>
 800c8b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800c9a0 <__ieee754_pow+0x408>)
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	f7f3 febf 	bl	8000638 <__aeabi_dmul>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4650      	mov	r0, sl
 800c8c0:	4659      	mov	r1, fp
 800c8c2:	f7f3 fd01 	bl	80002c8 <__aeabi_dsub>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	4689      	mov	r9, r1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f3 fcfb 	bl	80002cc <__adddf3>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	4632      	mov	r2, r6
 800c8da:	463b      	mov	r3, r7
 800c8dc:	4620      	mov	r0, r4
 800c8de:	460d      	mov	r5, r1
 800c8e0:	f7f3 fcf2 	bl	80002c8 <__aeabi_dsub>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	f7f3 fcec 	bl	80002c8 <__aeabi_dsub>
 800c8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c900:	4606      	mov	r6, r0
 800c902:	460f      	mov	r7, r1
 800c904:	4652      	mov	r2, sl
 800c906:	465b      	mov	r3, fp
 800c908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c90c:	f7f3 fcdc 	bl	80002c8 <__aeabi_dsub>
 800c910:	4622      	mov	r2, r4
 800c912:	462b      	mov	r3, r5
 800c914:	f7f3 fe90 	bl	8000638 <__aeabi_dmul>
 800c918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c91c:	4680      	mov	r8, r0
 800c91e:	4689      	mov	r9, r1
 800c920:	4630      	mov	r0, r6
 800c922:	4639      	mov	r1, r7
 800c924:	f7f3 fe88 	bl	8000638 <__aeabi_dmul>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4640      	mov	r0, r8
 800c92e:	4649      	mov	r1, r9
 800c930:	f7f3 fccc 	bl	80002cc <__adddf3>
 800c934:	4652      	mov	r2, sl
 800c936:	465b      	mov	r3, fp
 800c938:	4606      	mov	r6, r0
 800c93a:	460f      	mov	r7, r1
 800c93c:	4620      	mov	r0, r4
 800c93e:	4629      	mov	r1, r5
 800c940:	f7f3 fe7a 	bl	8000638 <__aeabi_dmul>
 800c944:	460b      	mov	r3, r1
 800c946:	4602      	mov	r2, r0
 800c948:	4680      	mov	r8, r0
 800c94a:	4689      	mov	r9, r1
 800c94c:	4630      	mov	r0, r6
 800c94e:	4639      	mov	r1, r7
 800c950:	f7f3 fcbc 	bl	80002cc <__adddf3>
 800c954:	4b17      	ldr	r3, [pc, #92]	@ (800c9b4 <__ieee754_pow+0x41c>)
 800c956:	4299      	cmp	r1, r3
 800c958:	4604      	mov	r4, r0
 800c95a:	460d      	mov	r5, r1
 800c95c:	468a      	mov	sl, r1
 800c95e:	468b      	mov	fp, r1
 800c960:	f340 82ef 	ble.w	800cf42 <__ieee754_pow+0x9aa>
 800c964:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c968:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c96c:	4303      	orrs	r3, r0
 800c96e:	f000 81e8 	beq.w	800cd42 <__ieee754_pow+0x7aa>
 800c972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c976:	2200      	movs	r2, #0
 800c978:	2300      	movs	r3, #0
 800c97a:	f7f4 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800c97e:	3800      	subs	r0, #0
 800c980:	bf18      	it	ne
 800c982:	2001      	movne	r0, #1
 800c984:	e710      	b.n	800c7a8 <__ieee754_pow+0x210>
 800c986:	bf00      	nop
 800c988:	60000000 	.word	0x60000000
 800c98c:	3ff71547 	.word	0x3ff71547
 800c990:	f85ddf44 	.word	0xf85ddf44
 800c994:	3e54ae0b 	.word	0x3e54ae0b
 800c998:	55555555 	.word	0x55555555
 800c99c:	3fd55555 	.word	0x3fd55555
 800c9a0:	652b82fe 	.word	0x652b82fe
 800c9a4:	3ff71547 	.word	0x3ff71547
 800c9a8:	3ff00000 	.word	0x3ff00000
 800c9ac:	3fd00000 	.word	0x3fd00000
 800c9b0:	3fe00000 	.word	0x3fe00000
 800c9b4:	408fffff 	.word	0x408fffff
 800c9b8:	4bd5      	ldr	r3, [pc, #852]	@ (800cd10 <__ieee754_pow+0x778>)
 800c9ba:	402b      	ands	r3, r5
 800c9bc:	2200      	movs	r2, #0
 800c9be:	b92b      	cbnz	r3, 800c9cc <__ieee754_pow+0x434>
 800c9c0:	4bd4      	ldr	r3, [pc, #848]	@ (800cd14 <__ieee754_pow+0x77c>)
 800c9c2:	f7f3 fe39 	bl	8000638 <__aeabi_dmul>
 800c9c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c9ca:	468b      	mov	fp, r1
 800c9cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c9d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c9d4:	4413      	add	r3, r2
 800c9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9d8:	4bcf      	ldr	r3, [pc, #828]	@ (800cd18 <__ieee754_pow+0x780>)
 800c9da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c9de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c9e2:	459b      	cmp	fp, r3
 800c9e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c9e8:	dd08      	ble.n	800c9fc <__ieee754_pow+0x464>
 800c9ea:	4bcc      	ldr	r3, [pc, #816]	@ (800cd1c <__ieee754_pow+0x784>)
 800c9ec:	459b      	cmp	fp, r3
 800c9ee:	f340 81a5 	ble.w	800cd3c <__ieee754_pow+0x7a4>
 800c9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c9fc:	f04f 0a00 	mov.w	sl, #0
 800ca00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ca04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca06:	4bc6      	ldr	r3, [pc, #792]	@ (800cd20 <__ieee754_pow+0x788>)
 800ca08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca0c:	ed93 7b00 	vldr	d7, [r3]
 800ca10:	4629      	mov	r1, r5
 800ca12:	ec53 2b17 	vmov	r2, r3, d7
 800ca16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca1e:	f7f3 fc53 	bl	80002c8 <__aeabi_dsub>
 800ca22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca2e:	f7f3 fc4d 	bl	80002cc <__adddf3>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	2000      	movs	r0, #0
 800ca38:	49ba      	ldr	r1, [pc, #744]	@ (800cd24 <__ieee754_pow+0x78c>)
 800ca3a:	f7f3 ff27 	bl	800088c <__aeabi_ddiv>
 800ca3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f3 fdf5 	bl	8000638 <__aeabi_dmul>
 800ca4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ca56:	106d      	asrs	r5, r5, #1
 800ca58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ca5c:	f04f 0b00 	mov.w	fp, #0
 800ca60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ca64:	4661      	mov	r1, ip
 800ca66:	2200      	movs	r2, #0
 800ca68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ca6c:	4658      	mov	r0, fp
 800ca6e:	46e1      	mov	r9, ip
 800ca70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ca74:	4614      	mov	r4, r2
 800ca76:	461d      	mov	r5, r3
 800ca78:	f7f3 fdde 	bl	8000638 <__aeabi_dmul>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f3 fc20 	bl	80002c8 <__aeabi_dsub>
 800ca88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	460f      	mov	r7, r1
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	f7f3 fc18 	bl	80002c8 <__aeabi_dsub>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caa0:	f7f3 fc12 	bl	80002c8 <__aeabi_dsub>
 800caa4:	465a      	mov	r2, fp
 800caa6:	464b      	mov	r3, r9
 800caa8:	f7f3 fdc6 	bl	8000638 <__aeabi_dmul>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4630      	mov	r0, r6
 800cab2:	4639      	mov	r1, r7
 800cab4:	f7f3 fc08 	bl	80002c8 <__aeabi_dsub>
 800cab8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cabc:	f7f3 fdbc 	bl	8000638 <__aeabi_dmul>
 800cac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cac8:	4610      	mov	r0, r2
 800caca:	4619      	mov	r1, r3
 800cacc:	f7f3 fdb4 	bl	8000638 <__aeabi_dmul>
 800cad0:	a37d      	add	r3, pc, #500	@ (adr r3, 800ccc8 <__ieee754_pow+0x730>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	f7f3 fdad 	bl	8000638 <__aeabi_dmul>
 800cade:	a37c      	add	r3, pc, #496	@ (adr r3, 800ccd0 <__ieee754_pow+0x738>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fbf2 	bl	80002cc <__adddf3>
 800cae8:	4622      	mov	r2, r4
 800caea:	462b      	mov	r3, r5
 800caec:	f7f3 fda4 	bl	8000638 <__aeabi_dmul>
 800caf0:	a379      	add	r3, pc, #484	@ (adr r3, 800ccd8 <__ieee754_pow+0x740>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fbe9 	bl	80002cc <__adddf3>
 800cafa:	4622      	mov	r2, r4
 800cafc:	462b      	mov	r3, r5
 800cafe:	f7f3 fd9b 	bl	8000638 <__aeabi_dmul>
 800cb02:	a377      	add	r3, pc, #476	@ (adr r3, 800cce0 <__ieee754_pow+0x748>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fbe0 	bl	80002cc <__adddf3>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	462b      	mov	r3, r5
 800cb10:	f7f3 fd92 	bl	8000638 <__aeabi_dmul>
 800cb14:	a374      	add	r3, pc, #464	@ (adr r3, 800cce8 <__ieee754_pow+0x750>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fbd7 	bl	80002cc <__adddf3>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	462b      	mov	r3, r5
 800cb22:	f7f3 fd89 	bl	8000638 <__aeabi_dmul>
 800cb26:	a372      	add	r3, pc, #456	@ (adr r3, 800ccf0 <__ieee754_pow+0x758>)
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	f7f3 fbce 	bl	80002cc <__adddf3>
 800cb30:	4622      	mov	r2, r4
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	462b      	mov	r3, r5
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 fd7c 	bl	8000638 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fd76 	bl	8000638 <__aeabi_dmul>
 800cb4c:	465a      	mov	r2, fp
 800cb4e:	4604      	mov	r4, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	464b      	mov	r3, r9
 800cb54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb58:	f7f3 fbb8 	bl	80002cc <__adddf3>
 800cb5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb60:	f7f3 fd6a 	bl	8000638 <__aeabi_dmul>
 800cb64:	4622      	mov	r2, r4
 800cb66:	462b      	mov	r3, r5
 800cb68:	f7f3 fbb0 	bl	80002cc <__adddf3>
 800cb6c:	465a      	mov	r2, fp
 800cb6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb72:	464b      	mov	r3, r9
 800cb74:	4658      	mov	r0, fp
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7f3 fd5e 	bl	8000638 <__aeabi_dmul>
 800cb7c:	4b6a      	ldr	r3, [pc, #424]	@ (800cd28 <__ieee754_pow+0x790>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4606      	mov	r6, r0
 800cb82:	460f      	mov	r7, r1
 800cb84:	f7f3 fba2 	bl	80002cc <__adddf3>
 800cb88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb8c:	f7f3 fb9e 	bl	80002cc <__adddf3>
 800cb90:	46d8      	mov	r8, fp
 800cb92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800cb96:	460d      	mov	r5, r1
 800cb98:	465a      	mov	r2, fp
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cba4:	f7f3 fd48 	bl	8000638 <__aeabi_dmul>
 800cba8:	465c      	mov	r4, fp
 800cbaa:	4680      	mov	r8, r0
 800cbac:	4689      	mov	r9, r1
 800cbae:	4b5e      	ldr	r3, [pc, #376]	@ (800cd28 <__ieee754_pow+0x790>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7f3 fb87 	bl	80002c8 <__aeabi_dsub>
 800cbba:	4632      	mov	r2, r6
 800cbbc:	463b      	mov	r3, r7
 800cbbe:	f7f3 fb83 	bl	80002c8 <__aeabi_dsub>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbca:	f7f3 fb7d 	bl	80002c8 <__aeabi_dsub>
 800cbce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbd2:	f7f3 fd31 	bl	8000638 <__aeabi_dmul>
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	462b      	mov	r3, r5
 800cbde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbe2:	f7f3 fd29 	bl	8000638 <__aeabi_dmul>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fb6d 	bl	80002cc <__adddf3>
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f7f3 fb65 	bl	80002cc <__adddf3>
 800cc02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cc06:	a33c      	add	r3, pc, #240	@ (adr r3, 800ccf8 <__ieee754_pow+0x760>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	4658      	mov	r0, fp
 800cc0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cc12:	460d      	mov	r5, r1
 800cc14:	f7f3 fd10 	bl	8000638 <__aeabi_dmul>
 800cc18:	465c      	mov	r4, fp
 800cc1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc1e:	4642      	mov	r2, r8
 800cc20:	464b      	mov	r3, r9
 800cc22:	4620      	mov	r0, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	f7f3 fb4f 	bl	80002c8 <__aeabi_dsub>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 fb49 	bl	80002c8 <__aeabi_dsub>
 800cc36:	a332      	add	r3, pc, #200	@ (adr r3, 800cd00 <__ieee754_pow+0x768>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fcfc 	bl	8000638 <__aeabi_dmul>
 800cc40:	a331      	add	r3, pc, #196	@ (adr r3, 800cd08 <__ieee754_pow+0x770>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f7f3 fcf3 	bl	8000638 <__aeabi_dmul>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	4630      	mov	r0, r6
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7f3 fb37 	bl	80002cc <__adddf3>
 800cc5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc60:	4b32      	ldr	r3, [pc, #200]	@ (800cd2c <__ieee754_pow+0x794>)
 800cc62:	4413      	add	r3, r2
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7f3 fb30 	bl	80002cc <__adddf3>
 800cc6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc72:	f7f3 fc77 	bl	8000564 <__aeabi_i2d>
 800cc76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc78:	4b2d      	ldr	r3, [pc, #180]	@ (800cd30 <__ieee754_pow+0x798>)
 800cc7a:	4413      	add	r3, r2
 800cc7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc80:	4606      	mov	r6, r0
 800cc82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc86:	460f      	mov	r7, r1
 800cc88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc8c:	f7f3 fb1e 	bl	80002cc <__adddf3>
 800cc90:	4642      	mov	r2, r8
 800cc92:	464b      	mov	r3, r9
 800cc94:	f7f3 fb1a 	bl	80002cc <__adddf3>
 800cc98:	4632      	mov	r2, r6
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	f7f3 fb16 	bl	80002cc <__adddf3>
 800cca0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cca4:	4632      	mov	r2, r6
 800cca6:	463b      	mov	r3, r7
 800cca8:	4658      	mov	r0, fp
 800ccaa:	460d      	mov	r5, r1
 800ccac:	f7f3 fb0c 	bl	80002c8 <__aeabi_dsub>
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	f7f3 fb08 	bl	80002c8 <__aeabi_dsub>
 800ccb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccbc:	f7f3 fb04 	bl	80002c8 <__aeabi_dsub>
 800ccc0:	465c      	mov	r4, fp
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	e036      	b.n	800cd34 <__ieee754_pow+0x79c>
 800ccc6:	bf00      	nop
 800ccc8:	4a454eef 	.word	0x4a454eef
 800cccc:	3fca7e28 	.word	0x3fca7e28
 800ccd0:	93c9db65 	.word	0x93c9db65
 800ccd4:	3fcd864a 	.word	0x3fcd864a
 800ccd8:	a91d4101 	.word	0xa91d4101
 800ccdc:	3fd17460 	.word	0x3fd17460
 800cce0:	518f264d 	.word	0x518f264d
 800cce4:	3fd55555 	.word	0x3fd55555
 800cce8:	db6fabff 	.word	0xdb6fabff
 800ccec:	3fdb6db6 	.word	0x3fdb6db6
 800ccf0:	33333303 	.word	0x33333303
 800ccf4:	3fe33333 	.word	0x3fe33333
 800ccf8:	e0000000 	.word	0xe0000000
 800ccfc:	3feec709 	.word	0x3feec709
 800cd00:	dc3a03fd 	.word	0xdc3a03fd
 800cd04:	3feec709 	.word	0x3feec709
 800cd08:	145b01f5 	.word	0x145b01f5
 800cd0c:	be3e2fe0 	.word	0xbe3e2fe0
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	43400000 	.word	0x43400000
 800cd18:	0003988e 	.word	0x0003988e
 800cd1c:	000bb679 	.word	0x000bb679
 800cd20:	0800d888 	.word	0x0800d888
 800cd24:	3ff00000 	.word	0x3ff00000
 800cd28:	40080000 	.word	0x40080000
 800cd2c:	0800d868 	.word	0x0800d868
 800cd30:	0800d878 	.word	0x0800d878
 800cd34:	460b      	mov	r3, r1
 800cd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd3a:	e5d7      	b.n	800c8ec <__ieee754_pow+0x354>
 800cd3c:	f04f 0a01 	mov.w	sl, #1
 800cd40:	e65e      	b.n	800ca00 <__ieee754_pow+0x468>
 800cd42:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d014 <__ieee754_pow+0xa7c>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fabe 	bl	80002cc <__adddf3>
 800cd50:	4642      	mov	r2, r8
 800cd52:	e9cd 0100 	strd	r0, r1, [sp]
 800cd56:	464b      	mov	r3, r9
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	f7f3 fab4 	bl	80002c8 <__aeabi_dsub>
 800cd60:	4602      	mov	r2, r0
 800cd62:	460b      	mov	r3, r1
 800cd64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd68:	f7f3 fef6 	bl	8000b58 <__aeabi_dcmpgt>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f47f ae00 	bne.w	800c972 <__ieee754_pow+0x3da>
 800cd72:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800cd76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cd7a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cd7e:	fa43 fa0a 	asr.w	sl, r3, sl
 800cd82:	44da      	add	sl, fp
 800cd84:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd88:	489d      	ldr	r0, [pc, #628]	@ (800d000 <__ieee754_pow+0xa68>)
 800cd8a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cd8e:	4108      	asrs	r0, r1
 800cd90:	ea00 030a 	and.w	r3, r0, sl
 800cd94:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd98:	f1c1 0114 	rsb	r1, r1, #20
 800cd9c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cda0:	fa4a fa01 	asr.w	sl, sl, r1
 800cda4:	f1bb 0f00 	cmp.w	fp, #0
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f04f 0200 	mov.w	r2, #0
 800cdb0:	bfb8      	it	lt
 800cdb2:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdb6:	f7f3 fa87 	bl	80002c8 <__aeabi_dsub>
 800cdba:	4680      	mov	r8, r0
 800cdbc:	4689      	mov	r9, r1
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	463b      	mov	r3, r7
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa81 	bl	80002cc <__adddf3>
 800cdca:	2400      	movs	r4, #0
 800cdcc:	a37c      	add	r3, pc, #496	@ (adr r3, 800cfc0 <__ieee754_pow+0xa28>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	f7f3 fc2f 	bl	8000638 <__aeabi_dmul>
 800cdda:	4642      	mov	r2, r8
 800cddc:	e9cd 0100 	strd	r0, r1, [sp]
 800cde0:	464b      	mov	r3, r9
 800cde2:	4620      	mov	r0, r4
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7f3 fa6f 	bl	80002c8 <__aeabi_dsub>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4630      	mov	r0, r6
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	f7f3 fa69 	bl	80002c8 <__aeabi_dsub>
 800cdf6:	a374      	add	r3, pc, #464	@ (adr r3, 800cfc8 <__ieee754_pow+0xa30>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	f7f3 fc1c 	bl	8000638 <__aeabi_dmul>
 800ce00:	a373      	add	r3, pc, #460	@ (adr r3, 800cfd0 <__ieee754_pow+0xa38>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	4680      	mov	r8, r0
 800ce08:	4689      	mov	r9, r1
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fc13 	bl	8000638 <__aeabi_dmul>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4640      	mov	r0, r8
 800ce18:	4649      	mov	r1, r9
 800ce1a:	f7f3 fa57 	bl	80002cc <__adddf3>
 800ce1e:	4604      	mov	r4, r0
 800ce20:	460d      	mov	r5, r1
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce2a:	f7f3 fa4f 	bl	80002cc <__adddf3>
 800ce2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce32:	4680      	mov	r8, r0
 800ce34:	4689      	mov	r9, r1
 800ce36:	f7f3 fa47 	bl	80002c8 <__aeabi_dsub>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f3 fa41 	bl	80002c8 <__aeabi_dsub>
 800ce46:	4642      	mov	r2, r8
 800ce48:	4606      	mov	r6, r0
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	464b      	mov	r3, r9
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4649      	mov	r1, r9
 800ce52:	f7f3 fbf1 	bl	8000638 <__aeabi_dmul>
 800ce56:	a360      	add	r3, pc, #384	@ (adr r3, 800cfd8 <__ieee754_pow+0xa40>)
 800ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	460d      	mov	r5, r1
 800ce60:	f7f3 fbea 	bl	8000638 <__aeabi_dmul>
 800ce64:	a35e      	add	r3, pc, #376	@ (adr r3, 800cfe0 <__ieee754_pow+0xa48>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fa2d 	bl	80002c8 <__aeabi_dsub>
 800ce6e:	4622      	mov	r2, r4
 800ce70:	462b      	mov	r3, r5
 800ce72:	f7f3 fbe1 	bl	8000638 <__aeabi_dmul>
 800ce76:	a35c      	add	r3, pc, #368	@ (adr r3, 800cfe8 <__ieee754_pow+0xa50>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f7f3 fa26 	bl	80002cc <__adddf3>
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	f7f3 fbd8 	bl	8000638 <__aeabi_dmul>
 800ce88:	a359      	add	r3, pc, #356	@ (adr r3, 800cff0 <__ieee754_pow+0xa58>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fbcf 	bl	8000638 <__aeabi_dmul>
 800ce9a:	a357      	add	r3, pc, #348	@ (adr r3, 800cff8 <__ieee754_pow+0xa60>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fa14 	bl	80002cc <__adddf3>
 800cea4:	4622      	mov	r2, r4
 800cea6:	462b      	mov	r3, r5
 800cea8:	f7f3 fbc6 	bl	8000638 <__aeabi_dmul>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4640      	mov	r0, r8
 800ceb2:	4649      	mov	r1, r9
 800ceb4:	f7f3 fa08 	bl	80002c8 <__aeabi_dsub>
 800ceb8:	4604      	mov	r4, r0
 800ceba:	460d      	mov	r5, r1
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4640      	mov	r0, r8
 800cec2:	4649      	mov	r1, r9
 800cec4:	f7f3 fbb8 	bl	8000638 <__aeabi_dmul>
 800cec8:	2200      	movs	r2, #0
 800ceca:	e9cd 0100 	strd	r0, r1, [sp]
 800cece:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	f7f3 f9f7 	bl	80002c8 <__aeabi_dsub>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cee2:	f7f3 fcd3 	bl	800088c <__aeabi_ddiv>
 800cee6:	4632      	mov	r2, r6
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	463b      	mov	r3, r7
 800ceee:	4640      	mov	r0, r8
 800cef0:	4649      	mov	r1, r9
 800cef2:	f7f3 fba1 	bl	8000638 <__aeabi_dmul>
 800cef6:	4632      	mov	r2, r6
 800cef8:	463b      	mov	r3, r7
 800cefa:	f7f3 f9e7 	bl	80002cc <__adddf3>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4620      	mov	r0, r4
 800cf04:	4629      	mov	r1, r5
 800cf06:	f7f3 f9df 	bl	80002c8 <__aeabi_dsub>
 800cf0a:	4642      	mov	r2, r8
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	f7f3 f9db 	bl	80002c8 <__aeabi_dsub>
 800cf12:	460b      	mov	r3, r1
 800cf14:	4602      	mov	r2, r0
 800cf16:	493b      	ldr	r1, [pc, #236]	@ (800d004 <__ieee754_pow+0xa6c>)
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7f3 f9d5 	bl	80002c8 <__aeabi_dsub>
 800cf1e:	ec41 0b10 	vmov	d0, r0, r1
 800cf22:	ee10 3a90 	vmov	r3, s1
 800cf26:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf2e:	da30      	bge.n	800cf92 <__ieee754_pow+0x9fa>
 800cf30:	4650      	mov	r0, sl
 800cf32:	f000 f87d 	bl	800d030 <scalbn>
 800cf36:	ec51 0b10 	vmov	r0, r1, d0
 800cf3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf3e:	f7ff bbd2 	b.w	800c6e6 <__ieee754_pow+0x14e>
 800cf42:	4c31      	ldr	r4, [pc, #196]	@ (800d008 <__ieee754_pow+0xa70>)
 800cf44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d91a      	bls.n	800cf82 <__ieee754_pow+0x9ea>
 800cf4c:	4b2f      	ldr	r3, [pc, #188]	@ (800d00c <__ieee754_pow+0xa74>)
 800cf4e:	440b      	add	r3, r1
 800cf50:	4303      	orrs	r3, r0
 800cf52:	d009      	beq.n	800cf68 <__ieee754_pow+0x9d0>
 800cf54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f7f3 fdde 	bl	8000b1c <__aeabi_dcmplt>
 800cf60:	3800      	subs	r0, #0
 800cf62:	bf18      	it	ne
 800cf64:	2001      	movne	r0, #1
 800cf66:	e42b      	b.n	800c7c0 <__ieee754_pow+0x228>
 800cf68:	4642      	mov	r2, r8
 800cf6a:	464b      	mov	r3, r9
 800cf6c:	f7f3 f9ac 	bl	80002c8 <__aeabi_dsub>
 800cf70:	4632      	mov	r2, r6
 800cf72:	463b      	mov	r3, r7
 800cf74:	f7f3 fde6 	bl	8000b44 <__aeabi_dcmpge>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1eb      	bne.n	800cf54 <__ieee754_pow+0x9bc>
 800cf7c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d01c <__ieee754_pow+0xa84>
 800cf80:	e6f7      	b.n	800cd72 <__ieee754_pow+0x7da>
 800cf82:	469a      	mov	sl, r3
 800cf84:	4b22      	ldr	r3, [pc, #136]	@ (800d010 <__ieee754_pow+0xa78>)
 800cf86:	459a      	cmp	sl, r3
 800cf88:	f63f aef3 	bhi.w	800cd72 <__ieee754_pow+0x7da>
 800cf8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cf90:	e715      	b.n	800cdbe <__ieee754_pow+0x826>
 800cf92:	ec51 0b10 	vmov	r0, r1, d0
 800cf96:	4619      	mov	r1, r3
 800cf98:	e7cf      	b.n	800cf3a <__ieee754_pow+0x9a2>
 800cf9a:	491a      	ldr	r1, [pc, #104]	@ (800d004 <__ieee754_pow+0xa6c>)
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	f7ff bb18 	b.w	800c5d2 <__ieee754_pow+0x3a>
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	f7ff bb14 	b.w	800c5d2 <__ieee754_pow+0x3a>
 800cfaa:	4630      	mov	r0, r6
 800cfac:	4639      	mov	r1, r7
 800cfae:	f7ff bb10 	b.w	800c5d2 <__ieee754_pow+0x3a>
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	f7ff bb5e 	b.w	800c674 <__ieee754_pow+0xdc>
 800cfb8:	2400      	movs	r4, #0
 800cfba:	f7ff bb49 	b.w	800c650 <__ieee754_pow+0xb8>
 800cfbe:	bf00      	nop
 800cfc0:	00000000 	.word	0x00000000
 800cfc4:	3fe62e43 	.word	0x3fe62e43
 800cfc8:	fefa39ef 	.word	0xfefa39ef
 800cfcc:	3fe62e42 	.word	0x3fe62e42
 800cfd0:	0ca86c39 	.word	0x0ca86c39
 800cfd4:	be205c61 	.word	0xbe205c61
 800cfd8:	72bea4d0 	.word	0x72bea4d0
 800cfdc:	3e663769 	.word	0x3e663769
 800cfe0:	c5d26bf1 	.word	0xc5d26bf1
 800cfe4:	3ebbbd41 	.word	0x3ebbbd41
 800cfe8:	af25de2c 	.word	0xaf25de2c
 800cfec:	3f11566a 	.word	0x3f11566a
 800cff0:	16bebd93 	.word	0x16bebd93
 800cff4:	3f66c16c 	.word	0x3f66c16c
 800cff8:	5555553e 	.word	0x5555553e
 800cffc:	3fc55555 	.word	0x3fc55555
 800d000:	fff00000 	.word	0xfff00000
 800d004:	3ff00000 	.word	0x3ff00000
 800d008:	4090cbff 	.word	0x4090cbff
 800d00c:	3f6f3400 	.word	0x3f6f3400
 800d010:	3fe00000 	.word	0x3fe00000
 800d014:	652b82fe 	.word	0x652b82fe
 800d018:	3c971547 	.word	0x3c971547
 800d01c:	4090cc00 	.word	0x4090cc00

0800d020 <fabs>:
 800d020:	ec51 0b10 	vmov	r0, r1, d0
 800d024:	4602      	mov	r2, r0
 800d026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d02a:	ec43 2b10 	vmov	d0, r2, r3
 800d02e:	4770      	bx	lr

0800d030 <scalbn>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	ec55 4b10 	vmov	r4, r5, d0
 800d036:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d03a:	4606      	mov	r6, r0
 800d03c:	462b      	mov	r3, r5
 800d03e:	b991      	cbnz	r1, 800d066 <scalbn+0x36>
 800d040:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d044:	4323      	orrs	r3, r4
 800d046:	d03d      	beq.n	800d0c4 <scalbn+0x94>
 800d048:	4b35      	ldr	r3, [pc, #212]	@ (800d120 <scalbn+0xf0>)
 800d04a:	4620      	mov	r0, r4
 800d04c:	4629      	mov	r1, r5
 800d04e:	2200      	movs	r2, #0
 800d050:	f7f3 faf2 	bl	8000638 <__aeabi_dmul>
 800d054:	4b33      	ldr	r3, [pc, #204]	@ (800d124 <scalbn+0xf4>)
 800d056:	429e      	cmp	r6, r3
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	da0f      	bge.n	800d07e <scalbn+0x4e>
 800d05e:	a328      	add	r3, pc, #160	@ (adr r3, 800d100 <scalbn+0xd0>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	e01e      	b.n	800d0a4 <scalbn+0x74>
 800d066:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d06a:	4291      	cmp	r1, r2
 800d06c:	d10b      	bne.n	800d086 <scalbn+0x56>
 800d06e:	4622      	mov	r2, r4
 800d070:	4620      	mov	r0, r4
 800d072:	4629      	mov	r1, r5
 800d074:	f7f3 f92a 	bl	80002cc <__adddf3>
 800d078:	4604      	mov	r4, r0
 800d07a:	460d      	mov	r5, r1
 800d07c:	e022      	b.n	800d0c4 <scalbn+0x94>
 800d07e:	460b      	mov	r3, r1
 800d080:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d084:	3936      	subs	r1, #54	@ 0x36
 800d086:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d08a:	4296      	cmp	r6, r2
 800d08c:	dd0d      	ble.n	800d0aa <scalbn+0x7a>
 800d08e:	2d00      	cmp	r5, #0
 800d090:	a11d      	add	r1, pc, #116	@ (adr r1, 800d108 <scalbn+0xd8>)
 800d092:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d096:	da02      	bge.n	800d09e <scalbn+0x6e>
 800d098:	a11d      	add	r1, pc, #116	@ (adr r1, 800d110 <scalbn+0xe0>)
 800d09a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d09e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d108 <scalbn+0xd8>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	f7f3 fac8 	bl	8000638 <__aeabi_dmul>
 800d0a8:	e7e6      	b.n	800d078 <scalbn+0x48>
 800d0aa:	1872      	adds	r2, r6, r1
 800d0ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d0b0:	428a      	cmp	r2, r1
 800d0b2:	dcec      	bgt.n	800d08e <scalbn+0x5e>
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	dd08      	ble.n	800d0ca <scalbn+0x9a>
 800d0b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d0bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d0c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0c4:	ec45 4b10 	vmov	d0, r4, r5
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d0ce:	da08      	bge.n	800d0e2 <scalbn+0xb2>
 800d0d0:	2d00      	cmp	r5, #0
 800d0d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800d100 <scalbn+0xd0>)
 800d0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0d8:	dac1      	bge.n	800d05e <scalbn+0x2e>
 800d0da:	a10f      	add	r1, pc, #60	@ (adr r1, 800d118 <scalbn+0xe8>)
 800d0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0e0:	e7bd      	b.n	800d05e <scalbn+0x2e>
 800d0e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d0e6:	3236      	adds	r2, #54	@ 0x36
 800d0e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d0ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d128 <scalbn+0xf8>)
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	e7d4      	b.n	800d0a4 <scalbn+0x74>
 800d0fa:	bf00      	nop
 800d0fc:	f3af 8000 	nop.w
 800d100:	c2f8f359 	.word	0xc2f8f359
 800d104:	01a56e1f 	.word	0x01a56e1f
 800d108:	8800759c 	.word	0x8800759c
 800d10c:	7e37e43c 	.word	0x7e37e43c
 800d110:	8800759c 	.word	0x8800759c
 800d114:	fe37e43c 	.word	0xfe37e43c
 800d118:	c2f8f359 	.word	0xc2f8f359
 800d11c:	81a56e1f 	.word	0x81a56e1f
 800d120:	43500000 	.word	0x43500000
 800d124:	ffff3cb0 	.word	0xffff3cb0
 800d128:	3c900000 	.word	0x3c900000

0800d12c <with_errno>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	ed2d 8b02 	vpush	{d8}
 800d132:	eeb0 8a40 	vmov.f32	s16, s0
 800d136:	eef0 8a60 	vmov.f32	s17, s1
 800d13a:	4604      	mov	r4, r0
 800d13c:	f7fb fe2a 	bl	8008d94 <__errno>
 800d140:	eeb0 0a48 	vmov.f32	s0, s16
 800d144:	eef0 0a68 	vmov.f32	s1, s17
 800d148:	ecbd 8b02 	vpop	{d8}
 800d14c:	6004      	str	r4, [r0, #0]
 800d14e:	bd10      	pop	{r4, pc}

0800d150 <xflow>:
 800d150:	4603      	mov	r3, r0
 800d152:	b507      	push	{r0, r1, r2, lr}
 800d154:	ec51 0b10 	vmov	r0, r1, d0
 800d158:	b183      	cbz	r3, 800d17c <xflow+0x2c>
 800d15a:	4602      	mov	r2, r0
 800d15c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d160:	e9cd 2300 	strd	r2, r3, [sp]
 800d164:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d168:	f7f3 fa66 	bl	8000638 <__aeabi_dmul>
 800d16c:	ec41 0b10 	vmov	d0, r0, r1
 800d170:	2022      	movs	r0, #34	@ 0x22
 800d172:	b003      	add	sp, #12
 800d174:	f85d eb04 	ldr.w	lr, [sp], #4
 800d178:	f7ff bfd8 	b.w	800d12c <with_errno>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	e7ee      	b.n	800d160 <xflow+0x10>
 800d182:	0000      	movs	r0, r0
 800d184:	0000      	movs	r0, r0
	...

0800d188 <__math_uflow>:
 800d188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d190 <__math_uflow+0x8>
 800d18c:	f7ff bfe0 	b.w	800d150 <xflow>
 800d190:	00000000 	.word	0x00000000
 800d194:	10000000 	.word	0x10000000

0800d198 <__math_oflow>:
 800d198:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1a0 <__math_oflow+0x8>
 800d19c:	f7ff bfd8 	b.w	800d150 <xflow>
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	70000000 	.word	0x70000000

0800d1a8 <__ieee754_sqrt>:
 800d1a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	4a68      	ldr	r2, [pc, #416]	@ (800d350 <__ieee754_sqrt+0x1a8>)
 800d1ae:	ec55 4b10 	vmov	r4, r5, d0
 800d1b2:	43aa      	bics	r2, r5
 800d1b4:	462b      	mov	r3, r5
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	d110      	bne.n	800d1dc <__ieee754_sqrt+0x34>
 800d1ba:	4622      	mov	r2, r4
 800d1bc:	4620      	mov	r0, r4
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7f3 fa3a 	bl	8000638 <__aeabi_dmul>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	f7f3 f87e 	bl	80002cc <__adddf3>
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	460d      	mov	r5, r1
 800d1d4:	ec45 4b10 	vmov	d0, r4, r5
 800d1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	dc0e      	bgt.n	800d1fe <__ieee754_sqrt+0x56>
 800d1e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d1e4:	4322      	orrs	r2, r4
 800d1e6:	d0f5      	beq.n	800d1d4 <__ieee754_sqrt+0x2c>
 800d1e8:	b19d      	cbz	r5, 800d212 <__ieee754_sqrt+0x6a>
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 f86a 	bl	80002c8 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	f7f3 fb48 	bl	800088c <__aeabi_ddiv>
 800d1fc:	e7e8      	b.n	800d1d0 <__ieee754_sqrt+0x28>
 800d1fe:	152a      	asrs	r2, r5, #20
 800d200:	d115      	bne.n	800d22e <__ieee754_sqrt+0x86>
 800d202:	2000      	movs	r0, #0
 800d204:	e009      	b.n	800d21a <__ieee754_sqrt+0x72>
 800d206:	0acb      	lsrs	r3, r1, #11
 800d208:	3a15      	subs	r2, #21
 800d20a:	0549      	lsls	r1, r1, #21
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0fa      	beq.n	800d206 <__ieee754_sqrt+0x5e>
 800d210:	e7f7      	b.n	800d202 <__ieee754_sqrt+0x5a>
 800d212:	462a      	mov	r2, r5
 800d214:	e7fa      	b.n	800d20c <__ieee754_sqrt+0x64>
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	3001      	adds	r0, #1
 800d21a:	02dc      	lsls	r4, r3, #11
 800d21c:	d5fb      	bpl.n	800d216 <__ieee754_sqrt+0x6e>
 800d21e:	1e44      	subs	r4, r0, #1
 800d220:	1b12      	subs	r2, r2, r4
 800d222:	f1c0 0420 	rsb	r4, r0, #32
 800d226:	fa21 f404 	lsr.w	r4, r1, r4
 800d22a:	4323      	orrs	r3, r4
 800d22c:	4081      	lsls	r1, r0
 800d22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d232:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d23a:	07d2      	lsls	r2, r2, #31
 800d23c:	bf5c      	itt	pl
 800d23e:	005b      	lslpl	r3, r3, #1
 800d240:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d244:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d248:	bf58      	it	pl
 800d24a:	0049      	lslpl	r1, r1, #1
 800d24c:	2600      	movs	r6, #0
 800d24e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d252:	106d      	asrs	r5, r5, #1
 800d254:	0049      	lsls	r1, r1, #1
 800d256:	2016      	movs	r0, #22
 800d258:	4632      	mov	r2, r6
 800d25a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d25e:	1917      	adds	r7, r2, r4
 800d260:	429f      	cmp	r7, r3
 800d262:	bfde      	ittt	le
 800d264:	193a      	addle	r2, r7, r4
 800d266:	1bdb      	suble	r3, r3, r7
 800d268:	1936      	addle	r6, r6, r4
 800d26a:	0fcf      	lsrs	r7, r1, #31
 800d26c:	3801      	subs	r0, #1
 800d26e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d272:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d276:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d27a:	d1f0      	bne.n	800d25e <__ieee754_sqrt+0xb6>
 800d27c:	4604      	mov	r4, r0
 800d27e:	2720      	movs	r7, #32
 800d280:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d284:	429a      	cmp	r2, r3
 800d286:	eb00 0e0c 	add.w	lr, r0, ip
 800d28a:	db02      	blt.n	800d292 <__ieee754_sqrt+0xea>
 800d28c:	d113      	bne.n	800d2b6 <__ieee754_sqrt+0x10e>
 800d28e:	458e      	cmp	lr, r1
 800d290:	d811      	bhi.n	800d2b6 <__ieee754_sqrt+0x10e>
 800d292:	f1be 0f00 	cmp.w	lr, #0
 800d296:	eb0e 000c 	add.w	r0, lr, ip
 800d29a:	da42      	bge.n	800d322 <__ieee754_sqrt+0x17a>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	db40      	blt.n	800d322 <__ieee754_sqrt+0x17a>
 800d2a0:	f102 0801 	add.w	r8, r2, #1
 800d2a4:	1a9b      	subs	r3, r3, r2
 800d2a6:	458e      	cmp	lr, r1
 800d2a8:	bf88      	it	hi
 800d2aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d2ae:	eba1 010e 	sub.w	r1, r1, lr
 800d2b2:	4464      	add	r4, ip
 800d2b4:	4642      	mov	r2, r8
 800d2b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d2ba:	3f01      	subs	r7, #1
 800d2bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d2c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d2c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d2c8:	d1dc      	bne.n	800d284 <__ieee754_sqrt+0xdc>
 800d2ca:	4319      	orrs	r1, r3
 800d2cc:	d01b      	beq.n	800d306 <__ieee754_sqrt+0x15e>
 800d2ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d354 <__ieee754_sqrt+0x1ac>
 800d2d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d358 <__ieee754_sqrt+0x1b0>
 800d2d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2da:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2de:	f7f2 fff3 	bl	80002c8 <__aeabi_dsub>
 800d2e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	f7f3 fc1f 	bl	8000b30 <__aeabi_dcmple>
 800d2f2:	b140      	cbz	r0, 800d306 <__ieee754_sqrt+0x15e>
 800d2f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d2f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800d300:	d111      	bne.n	800d326 <__ieee754_sqrt+0x17e>
 800d302:	3601      	adds	r6, #1
 800d304:	463c      	mov	r4, r7
 800d306:	1072      	asrs	r2, r6, #1
 800d308:	0863      	lsrs	r3, r4, #1
 800d30a:	07f1      	lsls	r1, r6, #31
 800d30c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d310:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d314:	bf48      	it	mi
 800d316:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d31a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d31e:	4618      	mov	r0, r3
 800d320:	e756      	b.n	800d1d0 <__ieee754_sqrt+0x28>
 800d322:	4690      	mov	r8, r2
 800d324:	e7be      	b.n	800d2a4 <__ieee754_sqrt+0xfc>
 800d326:	f7f2 ffd1 	bl	80002cc <__adddf3>
 800d32a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4640      	mov	r0, r8
 800d334:	4649      	mov	r1, r9
 800d336:	f7f3 fbf1 	bl	8000b1c <__aeabi_dcmplt>
 800d33a:	b120      	cbz	r0, 800d346 <__ieee754_sqrt+0x19e>
 800d33c:	1ca0      	adds	r0, r4, #2
 800d33e:	bf08      	it	eq
 800d340:	3601      	addeq	r6, #1
 800d342:	3402      	adds	r4, #2
 800d344:	e7df      	b.n	800d306 <__ieee754_sqrt+0x15e>
 800d346:	1c63      	adds	r3, r4, #1
 800d348:	f023 0401 	bic.w	r4, r3, #1
 800d34c:	e7db      	b.n	800d306 <__ieee754_sqrt+0x15e>
 800d34e:	bf00      	nop
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	20000228 	.word	0x20000228
 800d358:	20000220 	.word	0x20000220

0800d35c <_init>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr

0800d368 <_fini>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	bf00      	nop
 800d36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d36e:	bc08      	pop	{r3}
 800d370:	469e      	mov	lr, r3
 800d372:	4770      	bx	lr
